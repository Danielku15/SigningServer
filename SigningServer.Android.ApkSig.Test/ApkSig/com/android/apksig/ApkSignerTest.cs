// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SigningServer.Android.Com.Android.Apksig
{
    [TestClass]
    public class ApkSignerTest: SigningServer.Android.TestBase
    {
        /// <summary>
        /// Whether to preserve, as files, outputs of failed tests. This is useful for investigating test
        /// failures.
        /// </summary>
        internal static readonly bool KEEP_FAILING_OUTPUT_AS_FILES = false;
        
        internal static readonly string FIRST_RSA_2048_SIGNER_RESOURCE_NAME = "rsa-2048";
        
        internal static readonly string SECOND_RSA_2048_SIGNER_RESOURCE_NAME = "rsa-2048_2";
        
        internal static readonly string THIRD_RSA_2048_SIGNER_RESOURCE_NAME = "rsa-2048_3";
        
        internal static readonly string EC_P256_SIGNER_RESOURCE_NAME = "ec-p256";
        
        internal static readonly string FIRST_RSA_2048_SIGNER_CERT_WITH_NEGATIVE_MODULUS = "rsa-2048_negmod.x509.der";
        
        internal static readonly string LINEAGE_RSA_2048_2_SIGNERS_RESOURCE_NAME = "rsa-2048-lineage-2-signers";
        
        internal readonly int EXTRA_BLOCK_ID = 0x7e57c0de;
        
        internal readonly byte[] EXTRA_BLOCK_VALUE = {0, 1, 2, 3, 4, 5, 6, 7};
        
        public DirectoryInfo mTemporaryFolder;

        [TestInitialize]
        public void SetUp()
        {
            mTemporaryFolder = CreateTemporaryFolder();
        }
        
        // public static void Main(string[] parameters)
        // {
        //     System.IO.FileInfo outDir = (parameters.Length > 0) ? new System.IO.FileInfo(parameters[0]) : new System.IO.FileInfo(".");
        //     SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GenerateGoldenFiles(outDir);
        // }
        
        internal static void GenerateGoldenFiles(System.IO.FileInfo outDir)
        {
            Console.WriteLine("Generating golden files " + typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest).Name + " into " + outDir);
            if (!outDir.Exists)
            {
                outDir.Create();
            }
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfigWithLineage = SigningServer.Android.Collections.Arrays.AsList(rsa2048SignerConfig.Get(0), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.SigningCertificateLineage lineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.LINEAGE_RSA_2048_2_SIGNERS_RESOURCE_NAME);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v1-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v1-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v1-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v2-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v2-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v2-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v1v2-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v1v2-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v1v2-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v2v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v2v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v2v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v2v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v2v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v2v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v1v2v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v1v2v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v1v2v3-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-unaligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-unaligned-v1v2v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-legacy-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-legacy-aligned-v1v2v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("golden-aligned-in.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-aligned-v1v2v3-lineage-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("original.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-rsa-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("original.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-rsa-minSdkVersion-1-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetMinSdkVersion(1));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("original.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-rsa-minSdkVersion-18-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetMinSdkVersion(18));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("original.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-rsa-minSdkVersion-24-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetMinSdkVersion(24));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("original.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-rsa-verity-out.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetVerityEnabled(true));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SignGolden("pinsapp-unsigned.apk", new System.IO.FileInfo(Path.Combine(outDir.FullName, "golden-pinsapp-signed.apk")), new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetVerityEnabled(true));
        }
        
        internal static void SignGolden(string inResourceName, System.IO.FileInfo outFile, Com.Android.Apksig.ApkSigner.Builder apkSignerBuilder)
        {
            Com.Android.Apksig.Util.DataSource input = Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(typeof(Com.Android.Apksig.ApkSigner), inResourceName)));
            apkSignerBuilder.SetInputApk(input).SetOutputApk(outFile);
            System.IO.FileInfo outFileIdSig = new System.IO.FileInfo(outFile.FullName + ".idsig");
            apkSignerBuilder.SetV4SignatureOutputFile(outFileIdSig);
            apkSignerBuilder.SetV4ErrorReportingEnabled(true);
            apkSignerBuilder.Build().Sign();
        }
        
        [Test]
        public virtual void TestAlignmentPreserved_Golden()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfigWithLineage = SigningServer.Android.Collections.Arrays.AsList(rsa2048SignerConfig.Get(0), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.SigningCertificateLineage lineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.LINEAGE_RSA_2048_2_SIGNERS_RESOURCE_NAME);
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v1-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v2-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v1v2-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v2v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v2v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v1v2v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            AssertGolden("golden-unaligned-in.apk", "golden-unaligned-v1v2v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v1-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v2-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v1v2-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v2v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v2v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v1v2v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            AssertGolden("golden-legacy-aligned-in.apk", "golden-legacy-aligned-v1v2v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v1-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v2-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v1v2-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v2v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v2v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v1v2v3-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            AssertGolden("golden-aligned-in.apk", "golden-aligned-v1v2v3-lineage-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfigWithLineage).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
        }
        
        [Test]
        public virtual void TestMinSdkVersion_Golden()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsaSignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertGolden("original.apk", "golden-rsa-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsaSignerConfig));
            AssertGolden("original.apk", "golden-rsa-minSdkVersion-1-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsaSignerConfig).SetMinSdkVersion(1));
            AssertGolden("original.apk", "golden-rsa-minSdkVersion-18-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsaSignerConfig).SetMinSdkVersion(18));
            AssertGolden("original.apk", "golden-rsa-minSdkVersion-24-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsaSignerConfig).SetMinSdkVersion(24));
        }
        
        [Test]
        public virtual void TestVerityEnabled_Golden()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsaSignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertGolden("original.apk", "golden-rsa-verity-out.apk", new Com.Android.Apksig.ApkSigner.Builder(rsaSignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetVerityEnabled(true));
        }
        
        [Test]
        public virtual void TestRsaSignedVerifies()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            string input = "original.apk";
            System.IO.FileInfo output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(1));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 1));
            output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(18));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 18));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerificationFailure(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 17), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_UNSUPPORTED_SIG_ALG);
        }
        
        [Test]
        public virtual void TestDsaSignedVerifies()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources("dsa-1024"));
            string input = "original.apk";
            System.IO.FileInfo output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(1));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 1));
            output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(21));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 21));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerificationFailure(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 20), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_UNSUPPORTED_SIG_ALG);
        }
        
        [Test]
        public virtual void TestDeterministicDsaSignedVerifies()
        {
                SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDeterministicDsaSignerConfigFromResources("dsa-2048"));
                string input = "original.apk";
                System.IO.FileInfo output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(1));
                SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 1));
                output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(21));
                SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 21));
                SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerificationFailure(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 20), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_UNSUPPORTED_SIG_ALG);
        }
        
        [Test]
        public virtual void TestDeterministicDsaSigningIsDeterministic()
        {
                SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDeterministicDsaSignerConfigFromResources("dsa-2048"));
                string input = "original.apk";
                Com.Android.Apksig.ApkSigner.Builder apkSignerBuilder = new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(1);
                System.IO.FileInfo first = Sign(input, apkSignerBuilder);
                System.IO.FileInfo second = Sign(input, apkSignerBuilder);
                AssertFileContentsEqual(first, second);
        }
        
        [Test]
        public virtual void TestEcSignedVerifies()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME));
            string input = "original.apk";
            System.IO.FileInfo output = Sign(input, new Com.Android.Apksig.ApkSigner.Builder(signers).SetMinSdkVersion(18));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 18));
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerificationFailure(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(output, 17), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_UNSUPPORTED_SIG_ALG);
        }
        
        [Test]
        public virtual void TestV1SigningRejectsInvalidZipEntryNames()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertThrows(typeof(Com.Android.Apksig.Apk.ApkFormatException), () => Sign("v1-only-with-cr-in-entry-name.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true)));
            AssertThrows(typeof(Com.Android.Apksig.Apk.ApkFormatException), () => Sign("v1-only-with-lf-in-entry-name.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true)));
            AssertThrows(typeof(Com.Android.Apksig.Apk.ApkFormatException), () => Sign("v1-only-with-nul-in-entry-name.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true)));
        }
        
        [Test]
        public virtual void TestWeirdZipCompressionMethod()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Sign("weird-compression-method.apk", new Com.Android.Apksig.ApkSigner.Builder(signers));
        }
        
        [Test]
        public virtual void TestZipCompressionMethodMismatchBetweenLfhAndCd()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Sign("mismatched-compression-method.apk", new Com.Android.Apksig.ApkSigner.Builder(signers));
        }
        
        [Test]
        public virtual void TestDebuggableApk()
        {
            string debuggableBooleanApk = "debuggable-boolean.apk";
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Sign(debuggableBooleanApk, new Com.Android.Apksig.ApkSigner.Builder(signers));
            Sign(debuggableBooleanApk, new Com.Android.Apksig.ApkSigner.Builder(signers).SetDebuggableApkPermitted(true));
            AssertThrows(typeof(SigningServer.Android.Security.SignatureException), () => Sign(debuggableBooleanApk, new Com.Android.Apksig.ApkSigner.Builder(signers).SetDebuggableApkPermitted(false)));
            string debuggableResourceApk = "debuggable-resource.apk";
            Sign(debuggableResourceApk, new Com.Android.Apksig.ApkSigner.Builder(signers).SetDebuggableApkPermitted(true));
            AssertThrows(typeof(SigningServer.Android.Security.SignatureException), () => Sign(debuggableResourceApk, new Com.Android.Apksig.ApkSigner.Builder(signers).SetDebuggableApkPermitted(false)));
        }
        
        [Test]
        public virtual void TestV3SigningWithSignersNotInLineageFails()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Collections.Arrays.AsList(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.SigningCertificateLineage lineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), "rsa-1024-lineage-2-signers");
            AssertThrows(typeof(System.InvalidOperationException), () => Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetSigningCertificateLineage(lineage)));
        }
        
        [Test]
        public virtual void TestSigningWithLineageRequiresOldestSignerForV1AndV2()
        {
            Com.Android.Apksig.ApkSigner.SignerConfig firstSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.ApkSigner.SignerConfig secondSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.ApkSigner.SignerConfig thirdSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage lineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), "rsa-2048-lineage-3-signers");
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(thirdSigner);
            try
            {
                Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
                Fail("The signing should have failed due to the oldest signer in the lineage not" + " being provided for v1 signing");
            }
            catch (System.ArgumentException expected)
            {
            }
            try
            {
                Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
                Fail("The signing should have failed due to the oldest signer in the lineage not" + " being provided for v2 signing");
            }
            catch (System.ArgumentException expected)
            {
            }
            Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            signers = SigningServer.Android.Collections.Arrays.AsList(secondSigner, thirdSigner);
            try
            {
                Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
                Fail("The signing should have failed due to the oldest signer in the lineage not" + " being provided for v1/v2 signing");
            }
            catch (System.ArgumentException expected)
            {
            }
            signers = SigningServer.Android.Collections.Arrays.AsList(firstSigner, thirdSigner);
            Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
        }
        
        [Test]
        public virtual void TestV3SigningWithMultipleSignersAndNoLineageFails()
        {
            Com.Android.Apksig.ApkSigner.SignerConfig firstSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.ApkSigner.SignerConfig secondSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Collections.Arrays.AsList(firstSigner, secondSigner);
            AssertThrows(typeof(System.InvalidOperationException), () => Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true)));
        }
        
        [Test]
        public virtual void TestLineageCanBeReadAfterV3Signing()
        {
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig firstSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig secondSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage lineage = new Com.Android.Apksig.SigningCertificateLineage.Builder(firstSigner, secondSigner).Build();
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signerConfigs = SigningServer.Android.Collections.Arrays.AsList(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            System.IO.FileInfo output = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signerConfigs).SetV3SigningEnabled(true).SetSigningCertificateLineage(lineage));
            Com.Android.Apksig.SigningCertificateLineage lineageFromApk = Com.Android.Apksig.SigningCertificateLineage.ReadFromApkFile(output);
            AssertTrue("The first signer was not in the lineage from the signed APK", lineageFromApk.IsSignerInLineage((firstSigner)));
            AssertTrue("The second signer was not in the lineage from the signed APK", lineageFromApk.IsSignerInLineage((secondSigner)));
        }
        
        [Test]
        public virtual void TestPublicKeyHasPositiveModulusAfterSigning()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signersList = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_CERT_WITH_NEGATIVE_MODULUS));
            System.IO.FileInfo signedApk = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signersList).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            Com.Android.Apksig.Internal.X509.RSAPublicKey v2PublicKey = GetRSAPublicKeyFromSigningBlock(signedApk, Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2);
            AssertTrue("The modulus in the public key in the V2 signing block must not be negative", v2PublicKey.modulus.CompareTo(SigningServer.Android.Math.BigInteger.ZERO) > 0);
            Com.Android.Apksig.Internal.X509.RSAPublicKey v3PublicKey = GetRSAPublicKeyFromSigningBlock(signedApk, Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3);
            AssertTrue("The modulus in the public key in the V3 signing block must not be negative", v3PublicKey.modulus.CompareTo(SigningServer.Android.Math.BigInteger.ZERO) > 0);
        }
        
        [Test]
        public virtual void TestV4State_disableV2V3EnableV4_fails()
        {
            Com.Android.Apksig.ApkSigner.SignerConfig signer = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            AssertThrows(typeof(System.InvalidOperationException), () => Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(signer)).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(true)));
        }
        
        [Test]
        public virtual void TestSignApk_stampFile()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Security.MessageDigest messageDigest = SigningServer.Android.Security.MessageDigest.GetInstance("SHA-256");
            messageDigest.Update(sourceStampSigner.GetCertificates().Get(0).GetEncoded());
            byte[] expectedStampCertificateDigest = messageDigest.Digest();
            System.IO.FileInfo signedApkFile = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetSourceStampSignerConfig(sourceStampSigner));
            using(SigningServer.Android.IO.RandomAccessFile f = new SigningServer.Android.IO.RandomAccessFile(signedApkFile, "r"))
            {
                Com.Android.Apksig.Util.DataSource signedApk = Com.Android.Apksig.Util.DataSources.AsDataSource(f, 0, f.Length());
                Com.Android.Apksig.Apk.ApkUtils.ZipSections zipSections = Com.Android.Apksig.Apk.ApkUtils.FindZipSections(signedApk);
                SigningServer.Android.Collections.List<Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord> cdRecords = Com.Android.Apksig.Internal.Apk.V1.V1SchemeVerifier.ParseZipCentralDirectory(signedApk, zipSections);
                Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord stampCdRecord = null;
                foreach (Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord cdRecord in cdRecords)
                {
                    if (Com.Android.Apksig.Apk.ApkUtils.SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME.Equals(cdRecord.GetName()))
                    {
                        stampCdRecord = cdRecord;
                        break;
                    }
                }
                AssertNotNull(stampCdRecord);
                byte[] actualStampCertificateDigest = Com.Android.Apksig.Internal.Zip.LocalFileRecord.GetUncompressedData(signedApk, stampCdRecord, zipSections.GetZipCentralDirectoryOffset());
                AssertArrayEquals(expectedStampCertificateDigest, actualStampCertificateDigest);
            }
        }
        
        [Test]
        public virtual void TestSignApk_existingStampFile_sameSourceStamp()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            System.IO.FileInfo signedApk = Sign("original-with-stamp-file.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSourceStampSignerConfig(sourceStampSigner));
            Com.Android.Apksig.ApkVerifier.Result sourceStampVerificationResult = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertSourceStampVerified(signedApk, sourceStampVerificationResult);
        }
        
        [Test]
        public virtual void TestSignApk_existingStampFile_differentSourceStamp()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            System.Exception exception = AssertThrows(typeof(Com.Android.Apksig.Apk.ApkFormatException), () => Sign("original-with-stamp-file.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSourceStampSignerConfig(sourceStampSigner)));
            AssertEquals(SigningServer.Android.Core.StringExtensions.Format("Cannot generate SourceStamp. APK contains an existing entry with the" + " name: %s, and it is different than the provided source stamp" + " certificate", Com.Android.Apksig.Apk.ApkUtils.SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME), exception.GetMessage());
        }
        
        [Test]
        public virtual void TestSignApk_existingStampFile_differentSourceStamp_forceOverwrite()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signers = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            System.IO.FileInfo signedApk = Sign("original-with-stamp-file.apk", new Com.Android.Apksig.ApkSigner.Builder(signers).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetForceSourceStampOverwrite(true).SetSourceStampSignerConfig(sourceStampSigner));
            Com.Android.Apksig.ApkVerifier.Result sourceStampVerificationResult = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertSourceStampVerified(signedApk, sourceStampVerificationResult);
        }
        
        [Test]
        public virtual void TestSignApk_stampBlock_noStampGenerated()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signersList = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            System.IO.FileInfo signedApkFile = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signersList).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true));
            using(SigningServer.Android.IO.RandomAccessFile f = new SigningServer.Android.IO.RandomAccessFile(signedApkFile, "r"))
            {
                Com.Android.Apksig.Util.DataSource signedApk = Com.Android.Apksig.Util.DataSources.AsDataSource(f, 0, f.Length());
                Com.Android.Apksig.Apk.ApkUtils.ZipSections zipSections = Com.Android.Apksig.Apk.ApkUtils.FindZipSections(signedApk);
                Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result result = new Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result(Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_SOURCE_STAMP);
                AssertThrows(typeof(Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.SignatureNotFoundException), () => Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.FindSignature(signedApk, zipSections, Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_SOURCE_STAMP, result));
            }
        }
        
        [Test]
        public virtual void TestSignApk_stampBlock_whenV1SignaturePresent()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signersList = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            System.IO.FileInfo signedApk = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signersList).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false).SetSourceStampSignerConfig(sourceStampSigner));
            Com.Android.Apksig.ApkVerifier.Result sourceStampVerificationResult = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertSourceStampVerified(signedApk, sourceStampVerificationResult);
        }
        
        [Test]
        public virtual void TestSignApk_stampBlock_whenV2SignaturePresent()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signersList = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            System.IO.FileInfo signedApk = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signersList).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false).SetSourceStampSignerConfig(sourceStampSigner));
            Com.Android.Apksig.ApkVerifier.Result sourceStampVerificationResult = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(signedApk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertSourceStampVerified(signedApk, sourceStampVerificationResult);
        }
        
        [Test]
        public virtual void TestSignApk_stampBlock_whenV3SignaturePresent()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signersList = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            System.IO.FileInfo signedApk = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signersList).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetSourceStampSignerConfig(sourceStampSigner));
            Com.Android.Apksig.ApkVerifier.Result sourceStampVerificationResult = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.VerifyForMinSdkVersion(signedApk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertSourceStampVerified(signedApk, sourceStampVerificationResult);
        }
        
        [Test]
        public virtual void TestSignApk_stampBlock_withStampLineage()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> signersList = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.ApkSigner.SignerConfig sourceStampSigner = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage sourceStampLineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), SigningServer.Android.Com.Android.Apksig.ApkSignerTest.LINEAGE_RSA_2048_2_SIGNERS_RESOURCE_NAME);
            System.IO.FileInfo signedApk = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(signersList).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetSourceStampSignerConfig(sourceStampSigner).SetSourceStampSigningCertificateLineage(sourceStampLineage));
            Com.Android.Apksig.ApkVerifier.Result sourceStampVerificationResult = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertSourceStampVerified(signedApk, sourceStampVerificationResult);
        }
        
        [Test]
        public virtual void TestSignApk_Pinlist()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertGolden("pinsapp-unsigned.apk", "golden-pinsapp-signed.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetVerityEnabled(true));
            AssertTrue("pinlist.meta file must be in the signed APK.", SigningServer.Android.Com.Android.Apksig.ApkSignerTest.ResourceZipFileContains("golden-pinsapp-signed.apk", "pinlist.meta"));
        }
        
        [Test]
        public virtual void TestOtherSignersSignaturesPreserved_extraSigBlock_signatureAppended()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> ecP256SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME));
            System.IO.FileInfo signedApk = Sign("v2-rsa-2048-with-extra-sig-block.apk", new Com.Android.Apksig.ApkSigner.Builder(ecP256SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true));
            Com.Android.Apksig.ApkVerifier.Result result = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(result);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertResultContainsSigners(result, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME);
            AssertSigningBlockContains(signedApk, Com.Android.Apksig.Internal.Util.Pair.Of<byte[], int>(EXTRA_BLOCK_VALUE, EXTRA_BLOCK_ID));
        }
        
        [Test]
        public virtual void TestOtherSignersSignaturesPreserved_v1Only_signatureAppended()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> ecP256SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME));
            System.IO.FileInfo signedApk = Sign("v1-only-with-rsa-2048.apk", new Com.Android.Apksig.ApkSigner.Builder(ecP256SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(false).SetV3SigningEnabled(false).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true));
            Com.Android.Apksig.ApkVerifier.Result result = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(result);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertResultContainsSigners(result, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME);
        }
        
        [Test]
        public virtual void TestOtherSignersSignaturesPreserved_v3OnlyDifferentSigner_throwsException()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertThrows(typeof(System.InvalidOperationException), () => Sign("v3-only-with-stamp.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true)));
        }
        
        [Test]
        public virtual void TestOtherSignersSignaturesPreserved_v2OnlyAppendV2V3SameSigner_signatureAppended()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            System.IO.FileInfo signedApk = Sign("v2-rsa-2048-with-extra-sig-block.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(true).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true));
            Com.Android.Apksig.ApkVerifier.Result result = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(result);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertResultContainsSigners(result, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            AssertSigningBlockContains(signedApk, Com.Android.Apksig.Internal.Util.Pair.Of<byte[], int>(EXTRA_BLOCK_VALUE, EXTRA_BLOCK_ID));
        }
        
        [Test]
        public virtual void TestOtherSignersSignaturesPreserved_v2OnlyAppendV3SameSigner_throwsException()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertThrows(typeof(System.InvalidOperationException), () => Sign("v2-rsa-2048-with-extra-sig-block.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(false).SetV3SigningEnabled(true).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true)));
        }
        
        [Test]
        public virtual void TestOtherSignersSignaturesPreserved_v1v2IndividuallySign_signaturesAppended()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> rsa2048SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            SigningServer.Android.Collections.List<Com.Android.Apksig.ApkSigner.SignerConfig> ecP256SignerConfig = SigningServer.Android.Util.Collections.SingletonList<Com.Android.Apksig.ApkSigner.SignerConfig>(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME));
            System.IO.FileInfo signedApk = Sign("original.apk", new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false).SetV4SigningEnabled(false));
            signedApk = Sign(signedApk, new Com.Android.Apksig.ApkSigner.Builder(ecP256SignerConfig).SetV1SigningEnabled(true).SetV2SigningEnabled(true).SetV3SigningEnabled(false).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true));
            signedApk = Sign(signedApk, new Com.Android.Apksig.ApkSigner.Builder(rsa2048SignerConfig).SetV1SigningEnabled(false).SetV2SigningEnabled(true).SetV3SigningEnabled(false).SetV4SigningEnabled(false).SetOtherSignersSignaturesPreserved(true));
            Com.Android.Apksig.ApkVerifier.Result result = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(signedApk, null);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(result);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertResultContainsSigners(result, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.ApkSignerTest.EC_P256_SIGNER_RESOURCE_NAME);
        }
        
        /// <summary>
        /// Asserts the provided {@code signedApk} contains a signature block with the expected
        /// {@code byte[]} value and block ID as specified in the {@code expectedBlock}.
        /// </summary>
        internal static void AssertSigningBlockContains(System.IO.FileInfo signedApk, Com.Android.Apksig.Internal.Util.Pair<byte[], int> expectedBlock)
        {
            using(SigningServer.Android.IO.RandomAccessFile apkFile = new SigningServer.Android.IO.RandomAccessFile(signedApk, "r"))
            {
                Com.Android.Apksig.Apk.ApkUtils.ApkSigningBlock apkSigningBlock = Com.Android.Apksig.Apk.ApkUtils.FindApkSigningBlock(Com.Android.Apksig.Util.DataSources.AsDataSource(apkFile));
                SigningServer.Android.Collections.List<Com.Android.Apksig.Internal.Util.Pair<byte[], int>> signatureBlocks = Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetApkSignatureBlocks(apkSigningBlock.GetContents());
                foreach (Com.Android.Apksig.Internal.Util.Pair<byte[], int> signatureBlock in signatureBlocks)
                {
                    if (signatureBlock.GetSecond().Equals(expectedBlock.GetSecond()))
                    {
                        if (SigningServer.Android.Collections.Arrays.Equals(signatureBlock.GetFirst(), expectedBlock.GetFirst()))
                        {
                            return;
                        }
                    }
                }
                Fail(SigningServer.Android.Core.StringExtensions.Format("The APK signing block did not contain the expected block with ID %08x", expectedBlock.GetSecond()));
            }
        }
        
        /// <summary>
        /// Asserts the provided verification {@code result} contains the expected {@code signers} for
        /// each scheme that was used to verify the APK's signature.
        /// </summary>
        internal static void AssertResultContainsSigners(Com.Android.Apksig.ApkVerifier.Result result, params string[] signers)
        {
            AssertTrue(result.IsVerified());
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> expectedSigners = new SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate>();
            foreach (string signer in signers)
            {
                Com.Android.Apksig.ApkSigner.SignerConfig signerConfig = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(signer);
                expectedSigners.AddAll(signerConfig.GetCertificates());
            }
            if (result.IsVerifiedUsingV1Scheme())
            {
                SigningServer.Android.Collections.Set<SigningServer.Android.Security.Cert.X509Certificate> v1Signers = new SigningServer.Android.Collections.HashSet<SigningServer.Android.Security.Cert.X509Certificate>();
                foreach (Com.Android.Apksig.ApkVerifier.Result.V1SchemeSignerInfo signer in result.GetV1SchemeSigners())
                {
                    v1Signers.Add(signer.GetCertificate());
                }
                AssertEquals(expectedSigners.Size(), v1Signers.Size());
                AssertTrue("Expected V1 signers: " + SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetAllSubjectNamesFrom(expectedSigners) + ", actual V1 signers: " + SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetAllSubjectNamesFrom(v1Signers), v1Signers.ContainsAll(expectedSigners));
            }
            if (result.IsVerifiedUsingV2Scheme())
            {
                SigningServer.Android.Collections.Set<SigningServer.Android.Security.Cert.X509Certificate> v2Signers = new SigningServer.Android.Collections.HashSet<SigningServer.Android.Security.Cert.X509Certificate>();
                foreach (Com.Android.Apksig.ApkVerifier.Result.V2SchemeSignerInfo signer in result.GetV2SchemeSigners())
                {
                    v2Signers.Add(signer.GetCertificate());
                }
                AssertEquals(expectedSigners.Size(), v2Signers.Size());
                AssertTrue("Expected V2 signers: " + SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetAllSubjectNamesFrom(expectedSigners) + ", actual V2 signers: " + SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetAllSubjectNamesFrom(v2Signers), v2Signers.ContainsAll(expectedSigners));
            }
            if (result.IsVerifiedUsingV3Scheme())
            {
                SigningServer.Android.Collections.Set<SigningServer.Android.Security.Cert.X509Certificate> v3Signers = new SigningServer.Android.Collections.HashSet<SigningServer.Android.Security.Cert.X509Certificate>();
                foreach (Com.Android.Apksig.ApkVerifier.Result.V3SchemeSignerInfo signer in result.GetV3SchemeSigners())
                {
                    v3Signers.Add(signer.GetCertificate());
                }
                AssertEquals(expectedSigners.Size(), v3Signers.Size());
                AssertTrue("Expected V3 signers: " + SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetAllSubjectNamesFrom(expectedSigners) + ", actual V3 signers: " + SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetAllSubjectNamesFrom(v3Signers), v3Signers.ContainsAll(expectedSigners));
            }
        }
        
        /// <summary>
        /// Returns a comma delimited {@code String} containing all of the Subject Names from the
        /// provided {@code certificates}.
        /// </summary>
        internal static string GetAllSubjectNamesFrom(SigningServer.Android.Collections.Collection<SigningServer.Android.Security.Cert.X509Certificate> certificates)
        {
            SigningServer.Android.Core.StringBuilder result = new SigningServer.Android.Core.StringBuilder();
            foreach (SigningServer.Android.Security.Cert.X509Certificate certificate in certificates)
            {
                if (result.Length() > 0)
                {
                    result.Append(", ");
                }
                result.Append(certificate.GetSubjectDN().GetName());
            }
            return result.ToString();
        }
        
        internal static bool ResourceZipFileContains(string resourceName, string zipEntryName)
        {
            SigningServer.Android.Util.Zip.ZipInputStream zip = new SigningServer.Android.Util.Zip.ZipInputStream(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToInputStream(typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest), resourceName));
            while (true)
            {
                SigningServer.Android.Util.Zip.ZipEntry entry = zip.GetNextEntry();
                if (entry == null)
                {
                    break;
                }
                if (entry.GetName().Equals(zipEntryName))
                {
                    return true;
                }
            }
            return false;
        }
        
        internal Com.Android.Apksig.Internal.X509.RSAPublicKey GetRSAPublicKeyFromSigningBlock(System.IO.FileInfo apk, int signatureVersionId)
        {
            int signatureVersionBlockId;
            switch (signatureVersionId)
            {
                case Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2:
                    signatureVersionBlockId = Com.Android.Apksig.Internal.Apk.V2.V2SchemeConstants.APK_SIGNATURE_SCHEME_V2_BLOCK_ID;
                    break;
                case Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3:
                    signatureVersionBlockId = Com.Android.Apksig.Internal.Apk.V3.V3SchemeConstants.APK_SIGNATURE_SCHEME_V3_BLOCK_ID;
                    break;
                default:
                    throw new System.Exception("Invalid signature version ID specified: " + signatureVersionId);
            }
            Com.Android.Apksig.Internal.Apk.SignatureInfo signatureInfo = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetSignatureInfoFromApk(apk, signatureVersionId, signatureVersionBlockId);
            SigningServer.Android.IO.ByteBuffer signers = Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetLengthPrefixedSlice(signatureInfo.signatureBlock);
            SigningServer.Android.IO.ByteBuffer signer = Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetLengthPrefixedSlice(signers);
            Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetLengthPrefixedSlice(signer);
            if (signatureVersionId >= Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3)
            {
                signer.GetInt();
                signer.GetInt();
            }
            Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetLengthPrefixedSlice(signer);
            SigningServer.Android.IO.ByteBuffer publicKey = Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetLengthPrefixedSlice(signer);
            Com.Android.Apksig.Internal.X509.SubjectPublicKeyInfo subjectPublicKeyInfo = Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Parse<Com.Android.Apksig.Internal.X509.SubjectPublicKeyInfo>(publicKey);
            SigningServer.Android.IO.ByteBuffer subjectPublicKeyBuffer = subjectPublicKeyInfo.subjectPublicKey;
            subjectPublicKeyBuffer.Get();
            return Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Parse<Com.Android.Apksig.Internal.X509.RSAPublicKey>(subjectPublicKeyBuffer);
        }
        
        internal static Com.Android.Apksig.Internal.Apk.SignatureInfo GetSignatureInfoFromApk(System.IO.FileInfo apkFile, int signatureVersionId, int signatureVersionBlockId)
        {
            using(SigningServer.Android.IO.RandomAccessFile f = new SigningServer.Android.IO.RandomAccessFile(apkFile, "r"))
            {
                Com.Android.Apksig.Util.DataSource apk = Com.Android.Apksig.Util.DataSources.AsDataSource(f, 0, f.Length());
                Com.Android.Apksig.Apk.ApkUtils.ZipSections zipSections = Com.Android.Apksig.Apk.ApkUtils.FindZipSections(apk);
                Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result result = new Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result(signatureVersionId);
                return Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.FindSignature(apk, zipSections, signatureVersionBlockId, result);
            }
        }
        
        /// <summary>
        /// Asserts that signing the specified golden input file using the provided signing configuration
        /// produces output identical to the specified golden output file.
        /// </summary>
        internal void AssertGolden(string inResourceName, string expectedOutResourceName, Com.Android.Apksig.ApkSigner.Builder apkSignerBuilder)
        {
            System.IO.FileInfo output = Sign(inResourceName, apkSignerBuilder);
            SigningServer.Android.Com.Android.Apksig.ApkSignerTest.AssertVerified(SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(output, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P));
            if (output.Length > int.MaxValue)
            {
                throw new SigningServer.Android.Core.RuntimeException("Output too large: " + output.Length + " bytes");
            }
            byte[] outData = new byte[(int)output.Length];
            using(SigningServer.Android.IO.FileInputStream fis = new SigningServer.Android.IO.FileInputStream(output))
            {
                fis.Read(outData);
            }
            SigningServer.Android.IO.ByteBuffer actualOutBuf = SigningServer.Android.IO.ByteBuffer.Wrap(outData);
            SigningServer.Android.IO.ByteBuffer expectedOutBuf = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(GetType(), expectedOutResourceName));
            bool identical = false;
            var identicalCount = 0;
            if (actualOutBuf.Remaining() == expectedOutBuf.Remaining())
            {
                while (actualOutBuf.HasRemaining())
                {
                    if (actualOutBuf.Get() != expectedOutBuf.Get())
                    {
                        break;
                    }

                    identicalCount++;
                }
                identical = !actualOutBuf.HasRemaining();
            }
            if (identical)
            {
                return;
            }
            if (SigningServer.Android.Com.Android.Apksig.ApkSignerTest.KEEP_FAILING_OUTPUT_AS_FILES)
            {
                System.IO.FileInfo tmp = CreateTemporaryFile(GetType().Name, ".apk");
                File.Copy(output.FullName, tmp.FullName);
                Fail(tmp + " differs from " + expectedOutResourceName);
            }
            else 
            {
                Fail("Output differs from " + expectedOutResourceName + ", identical: " + identicalCount + "/" + outData.Length);
            }
        }
        
        internal System.IO.FileInfo Sign(System.IO.FileInfo inApkFile, Com.Android.Apksig.ApkSigner.Builder apkSignerBuilder)
        {
            using(SigningServer.Android.IO.RandomAccessFile apkFile = new SigningServer.Android.IO.RandomAccessFile(inApkFile, "r"))
            {
                Com.Android.Apksig.Util.DataSource input = Com.Android.Apksig.Util.DataSources.AsDataSource(apkFile);
                return Sign(input, apkSignerBuilder);
            }
        }
        
        internal System.IO.FileInfo Sign(string inResourceName, Com.Android.Apksig.ApkSigner.Builder apkSignerBuilder)
        {
            Com.Android.Apksig.Util.DataSource input = Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(GetType(), inResourceName)));
            return Sign(input, apkSignerBuilder);
        }
        
        internal System.IO.FileInfo Sign(Com.Android.Apksig.Util.DataSource input, Com.Android.Apksig.ApkSigner.Builder apkSignerBuilder)
        {
            System.IO.FileInfo outFile = new FileInfo(Path.Combine(mTemporaryFolder.FullName, Guid.NewGuid().ToString("N")));
            apkSignerBuilder.SetInputApk(input).SetOutputApk(outFile);
            System.IO.FileInfo outFileIdSig = new System.IO.FileInfo(outFile.FullName + ".idsig");
            apkSignerBuilder.SetV4SignatureOutputFile(outFileIdSig);
            apkSignerBuilder.SetV4ErrorReportingEnabled(true);
            apkSignerBuilder.Build().Sign();
            return outFile;
        }
        
        internal static Com.Android.Apksig.ApkVerifier.Result VerifyForMinSdkVersion(System.IO.FileInfo apk, int minSdkVersion)
        {
            return SigningServer.Android.Com.Android.Apksig.ApkSignerTest.Verify(apk, minSdkVersion);
        }
        
        internal static Com.Android.Apksig.ApkVerifier.Result Verify(System.IO.FileInfo apk, int? minSdkVersionOverride)
        {
            Com.Android.Apksig.ApkVerifier.Builder builder = new Com.Android.Apksig.ApkVerifier.Builder(apk);
            if (minSdkVersionOverride != null)
            {
                builder.SetMinCheckedPlatformVersion(minSdkVersionOverride.Value);
            }
            System.IO.FileInfo idSig = new System.IO.FileInfo(apk.FullName + ".idsig");
            if (idSig.Exists)
            {
                builder.SetV4SignatureFile(idSig);
            }
            return builder.Build().Verify();
        }
        
        internal static void AssertVerified(Com.Android.Apksig.ApkVerifier.Result result)
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(result);
        }
        
        internal static void AssertSourceStampVerified(System.IO.FileInfo signedApk, Com.Android.Apksig.ApkVerifier.Result result)
        {
            Com.Android.Apksig.Internal.Apk.SignatureInfo signatureInfo = SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetSignatureInfoFromApk(signedApk, Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_SOURCE_STAMP, Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.V2_SOURCE_STAMP_BLOCK_ID);
            AssertNotNull(signatureInfo.signatureBlock);
            AssertTrue(result.IsSourceStampVerified());
        }
        
        internal static void AssertVerificationFailure(Com.Android.Apksig.ApkVerifier.Result result, Com.Android.Apksig.ApkVerifier.Issue expectedIssue)
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(result, expectedIssue);
        }
        
        internal void AssertFileContentsEqual(System.IO.FileInfo first, System.IO.FileInfo second)
        {
            AssertArrayEquals(File.ReadAllBytes(first.FullName), File.ReadAllBytes(second.FullName));
        }
        
        internal static Com.Android.Apksig.ApkSigner.SignerConfig GetDefaultSignerConfigFromResources(string keyNameInResources)
        {
            return SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(keyNameInResources, false);
        }
        
        internal static Com.Android.Apksig.ApkSigner.SignerConfig GetDefaultSignerConfigFromResources(string keyNameInResources, bool deterministicDsaSigning)
        {
            SigningServer.Android.Security.PrivateKey privateKey = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToPrivateKey(typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest), keyNameInResources + ".pk8");
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> certs = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToCertificateChain(typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest), keyNameInResources + ".x509.pem");
            return new Com.Android.Apksig.ApkSigner.SignerConfig.Builder(keyNameInResources, privateKey, certs, deterministicDsaSigning).Build();
        }
        
        internal static Com.Android.Apksig.ApkSigner.SignerConfig GetDefaultSignerConfigFromResources(string keyNameInResources, string certNameInResources)
        {
            SigningServer.Android.Security.PrivateKey privateKey = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToPrivateKey(typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest), keyNameInResources + ".pk8");
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> certs = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToCertificateChain(typeof(SigningServer.Android.Com.Android.Apksig.ApkSignerTest), certNameInResources);
            return new Com.Android.Apksig.ApkSigner.SignerConfig.Builder(keyNameInResources, privateKey, certs).Build();
        }
        
        internal static Com.Android.Apksig.ApkSigner.SignerConfig GetDeterministicDsaSignerConfigFromResources(string keyNameInResources)
        {
            return SigningServer.Android.Com.Android.Apksig.ApkSignerTest.GetDefaultSignerConfigFromResources(keyNameInResources, true);
        }
        
    }
    
}
