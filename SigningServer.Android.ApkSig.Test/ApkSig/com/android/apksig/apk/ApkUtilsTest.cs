// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SigningServer.Android.Com.Android.Apksig.Apk
{
    [TestClass]
    public class ApkUtilsTest: SigningServer.Android.TestBase
    {
        [Test]
        public virtual void TestGetMinSdkVersionForValidCodename()
        {
            AssertEquals(1, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("AAAA"));
            AssertEquals(2, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("CUPCAKE"));
            AssertEquals(7, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("FROYO"));
            AssertEquals(23, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("N"));
            AssertEquals(23, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("NMR1"));
            AssertEquals(25, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("OMG"));
            AssertEquals(27, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("QQQ"));
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Apk.CodenameMinSdkVersionException))]
        public virtual void TestGetMinSdkVersionForEmptyCodename()
        {
            Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("");
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Apk.CodenameMinSdkVersionException))]
        public virtual void TestGetMinSdkVersionForUnexpectedCodename()
        {
            Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionForCodename("1ABC");
        }
        
        [Test]
        public virtual void TestGetMinSdkVersionFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original.apk");
            AssertEquals(23, Com.Android.Apksig.Apk.ApkUtils.GetMinSdkVersionFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetDebuggableFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original.apk");
            AssertFalse(Com.Android.Apksig.Apk.ApkUtils.GetDebuggableFromBinaryAndroidManifest(manifest));
            manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("debuggable-boolean.apk");
            AssertTrue(Com.Android.Apksig.Apk.ApkUtils.GetDebuggableFromBinaryAndroidManifest(manifest));
            manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("debuggable-resource.apk");
            try
            {
                Com.Android.Apksig.Apk.ApkUtils.GetDebuggableFromBinaryAndroidManifest(manifest);
                Fail();
            }
            catch (Com.Android.Apksig.Apk.ApkFormatException expected)
            {
            }
        }
        
        [Test]
        public virtual void TestGetPackageNameFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original.apk");
            AssertEquals("android.appsecurity.cts.tinyapp", Com.Android.Apksig.Apk.ApkUtils.GetPackageNameFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetTargetSdkVersionFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("v3-ec-p256-targetSdk-30.apk");
            AssertEquals(30, Com.Android.Apksig.Apk.ApkUtils.GetTargetSdkVersionFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetTargetSdkVersion_noUsesSdkElement_returnsDefault()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("v1-only-no-uses-sdk.apk");
            AssertEquals(1, Com.Android.Apksig.Apk.ApkUtils.GetTargetSdkVersionFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetTargetSandboxVersionFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("targetSandboxVersion-2.apk");
            AssertEquals(2, Com.Android.Apksig.Apk.ApkUtils.GetTargetSandboxVersionFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetTargetSandboxVersion_noTargetSandboxAttribute_returnsDefault()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original.apk");
            AssertEquals(1, Com.Android.Apksig.Apk.ApkUtils.GetTargetSandboxVersionFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetVersionCodeFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original.apk");
            AssertEquals(10, Com.Android.Apksig.Apk.ApkUtils.GetVersionCodeFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetVersionCode_withVersionCodeMajor_returnsOnlyVersionCode()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original-with-versionCodeMajor.apk");
            AssertEquals(25, Com.Android.Apksig.Apk.ApkUtils.GetVersionCodeFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetLongVersionCodeFromBinaryAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original-with-versionCodeMajor.apk");
            AssertEquals(4294967321L, Com.Android.Apksig.Apk.ApkUtils.GetLongVersionCodeFromBinaryAndroidManifest(manifest));
        }
        
        [Test]
        public virtual void TestGetAndroidManifest()
        {
            SigningServer.Android.IO.ByteBuffer manifest = SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest("original.apk");
            SigningServer.Android.Security.MessageDigest md = SigningServer.Android.Security.MessageDigest.GetInstance("SHA-256");
            md.Update(manifest);
            var actualDigest = md.Digest();
            AssertEquals("8b3de63a282652221162cdc327f424924ac3c7c24e642035975a1ee7a395c4dc", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(actualDigest));
        }
        
        internal static SigningServer.Android.IO.ByteBuffer GetAndroidManifest(string apkResourceName)
        {
            return SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetAndroidManifest(SigningServer.Android.Com.Android.Apksig.Apk.ApkUtilsTest.GetResource(apkResourceName));
        }
        
        internal static SigningServer.Android.IO.ByteBuffer GetAndroidManifest(byte[] apk)
        {
            return Com.Android.Apksig.Apk.ApkUtils.GetAndroidManifest(Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(apk)));
        }
        
        internal static byte[] GetResource(string resourceName)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(typeof(Com.Android.Apksig.ApkSigner), resourceName);
        }
        
    }
    
}
