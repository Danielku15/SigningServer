// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Asn1
{
    [TestClass]
    public class Asn1BerParserTest: SigningServer.Android.TestBase
    {
        [Test(Expected = typeof(System.NullReferenceException))]
        public virtual void TestNullInput()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence>((SigningServer.Android.IO.ByteBuffer)null);
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Internal.Asn1.Asn1DecodingException))]
        public virtual void TestEmptyInput()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence>("");
        }
        
        [Test]
        public virtual void TestEmptySequence()
        {
            SigningServer.Android.IO.ByteBuffer input = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode("300012345678"));
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence container = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence>(input);
            AssertNotNull(container);
            AssertEquals(2, input.Position());
        }
        
        [Test]
        public virtual void TestOctetString()
        {
            AssertEquals("123456", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithOctetString>("30050403123456").buf));
            AssertEquals("", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithOctetString>("30020400").buf));
        }
        
        [Test]
        public virtual void TestBitString()
        {
            AssertEquals("123456", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithBitString>("30050303123456").buf));
            AssertEquals("", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithBitString>("30020300").buf));
        }
        
        [Test]
        public virtual void TestBoolean()
        {
            AssertEquals(false, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithBoolean>("3003010100").value);
            AssertEquals(true, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithBoolean>("3003010101").value);
            AssertEquals(true, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithBoolean>("30030101FF").value);
        }
        
        [Test]
        public virtual void TestUTCTime()
        {
            AssertEquals("1212211221Z", SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithUTCTime>("300d170b313231323231313232315a").value);
            AssertEquals("9912312359Z", SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithUTCTime>("300d170b393931323331323335395a").value);
        }
        
        [Test]
        public virtual void TestGeneralizedTime()
        {
            AssertEquals("201212211220.999-07", SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithGeneralizedTime>("301518133230313231323231313232302e3939392d3037").value);
            AssertEquals("20380119031407.000+00", SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithGeneralizedTime>("3017181532303338303131393033313430372e3030302b3030").value);
        }
        
        [Test]
        public virtual void TestInteger()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithIntegers container = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithIntegers>("301e" + "0201ff" + "0207ff123456789abc" + "0200" + "020280ff" + "020a00000000000000001234");
            AssertEquals(-1, container.n1);
        }
        
        [Test]
        public virtual void TestOid()
        {
            try
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithOid>("30020600");
                Fail();
            }
            catch (Com.Android.Apksig.Internal.Asn1.Asn1DecodingException expected)
            {
            }
            AssertEquals("2.100.3", SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithOid>("30050603813403").oid);
            AssertEquals("2.16.840.1.101.3.4.2.1", SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithOid>("300b0609608648016503040201").oid);
        }
        
        [Test]
        public virtual void TestSequenceOf()
        {
            AssertEquals(2, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithSequenceOf>("3006300430003000").values.Size());
        }
        
        [Test]
        public virtual void TestSetOf()
        {
            AssertEquals(2, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithSetOf>("3006310430003000").values.Size());
        }
        
        [Test]
        public virtual void TestUnencodedContainer()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithSequenceOfUnencodedContainers seq = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithSequenceOfUnencodedContainers>("300C300A31023000310430003000");
            AssertEquals(2, seq.containers.Size());
            AssertEquals(1, seq.containers.Get(0).values.Size());
            AssertEquals(2, seq.containers.Get(1).values.Size());
        }
        
        [Test]
        public virtual void TestImplicitOptionalField()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithImplicitOptionalField seq = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithImplicitOptionalField>("300602010d02012a");
            AssertEquals(13, seq.f1.Value);
            AssertNull(seq.f2);
            AssertEquals(42, seq.f3.Value);
            seq = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithImplicitOptionalField>("300a02010da102ffff02012a");
            AssertEquals(13, seq.f1.Value);
            AssertEquals(-1, seq.f2.Value);
            AssertEquals(42, seq.f3.Value);
        }
        
        [Test]
        public virtual void TestExplicitOptionalField()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithExplicitOptionalField seq = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithExplicitOptionalField>("300602010d02012a");
            AssertEquals(13, seq.f1.Value);
            AssertNull(seq.f2);
            AssertEquals(42, seq.f3.Value);
            seq = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithExplicitOptionalField>("300c02010da1040202ffff02012a");
            AssertEquals(13, seq.f1.Value);
            AssertEquals(-1, seq.f2.Value);
            AssertEquals(42, seq.f3.Value);
        }
        
        [Test]
        public virtual void TestChoiceWithDifferentTypedOptions()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions>("0208ffffffffffffffff");
            AssertNull(c.oid);
            AssertEquals(-1, c.num.Value);
            c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions>("060100");
            AssertEquals("0.0", c.oid);
            AssertNull(c.num);
            try
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions>("");
                Fail();
            }
            catch (Com.Android.Apksig.Internal.Asn1.Asn1DecodingException expected)
            {
            }
            try
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions>("3000");
                Fail();
            }
            catch (Com.Android.Apksig.Internal.Asn1.Asn1DecodingException expected)
            {
            }
        }
        
        [Test]
        public virtual void TestChoiceWithSameTypedOptions()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithThreeSequenceOptions c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithThreeSequenceOptions>("3000");
            AssertNotNull(c.s1);
            AssertNull(c.s2);
            AssertNull(c.s3);
            c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithThreeSequenceOptions>("a000");
            AssertNull(c.s1);
            AssertNotNull(c.s2);
            AssertNull(c.s3);
            c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithThreeSequenceOptions>("a1023000");
            AssertNull(c.s1);
            AssertNull(c.s2);
            AssertNotNull(c.s3);
            try
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithThreeSequenceOptions>("02010a");
                Fail();
            }
            catch (Com.Android.Apksig.Internal.Asn1.Asn1DecodingException expected)
            {
            }
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Internal.Asn1.Asn1DecodingException))]
        public virtual void TestChoiceWithClashingOptions()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithClashingOptions>("0200");
        }
        
        [Test]
        public virtual void TestPrimitiveIndefiniteLengthEncodingWithGarbage()
        {
            SigningServer.Android.IO.ByteBuffer input = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode("0280020401000002010c"));
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions>(input);
            AssertEquals("02010c", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(input));
            AssertEquals(0x020401, c.num.Value);
            input = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode("0280028001000002010c"));
            c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.ChoiceWithTwoOptions>(input);
            AssertEquals("02010c", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(input));
            AssertEquals(0x028001, c.num.Value);
        }
        
        [Test]
        public virtual void TestConstructedIndefiniteLengthEncodingWithoutNestedIndefiniteLengthDataValues()
        {
            SigningServer.Android.IO.ByteBuffer input = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode("308002020000000002010c"));
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithAsn1Opaque c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithAsn1Opaque>(input);
            AssertEquals("02010c", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(input));
            AssertEquals("02020000", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(c.obj.GetEncoded()));
        }
        
        [Test]
        public virtual void TestConstructedIndefiniteLengthEncodingWithNestedIndefiniteLengthDataValues()
        {
            SigningServer.Android.IO.ByteBuffer input = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode("308002800300000280030000020103000002010c"));
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithAsn1Opaque c = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithAsn1Opaque>(input);
            AssertEquals("02010c", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(input));
            AssertEquals("0280030000", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(c.obj.GetEncoded()));
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Internal.Asn1.Asn1DecodingException))]
        public virtual void TestConstructedIndefiniteLengthEncodingWithGarbage()
        {
            SigningServer.Android.IO.ByteBuffer input = SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode("3080308002040000000002010c"));
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.SequenceWithAsn1Opaque>(input);
        }
        
        internal static T Parse<T>(string hexEncodedInput)
        {
            SigningServer.Android.IO.ByteBuffer input = (hexEncodedInput == null) ? null : SigningServer.Android.IO.ByteBuffer.Wrap(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Decode(hexEncodedInput));
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.Parse<T>(input);
        }
        
        internal static T Parse<T>(SigningServer.Android.IO.ByteBuffer input)
        {
            return Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Parse<T>(input);
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class EmptySequence: SigningServer.Android.TestBase
        {
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithIntegers: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 1, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int n1;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 2, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public long n2;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 3, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? n3;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 4, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public long? n4;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 5, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public SigningServer.Android.Math.BigInteger n5;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithOid: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 0, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.OBJECT_IDENTIFIER)]
            public string oid;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithImplicitOptionalField: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 1, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? f1;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 2, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER, Optional = true, Tagging = Com.Android.Apksig.Internal.Asn1.Asn1Tagging.IMPLICIT, TagNumber = 1)]
            public int? f2;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 3, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? f3;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithExplicitOptionalField: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 1, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? f1;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 2, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER, Optional = true, Tagging = Com.Android.Apksig.Internal.Asn1.Asn1Tagging.EXPLICIT, TagNumber = 1)]
            public int? f2;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 3, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? f3;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE)]
        public class ChoiceWithTwoOptions: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.OBJECT_IDENTIFIER)]
            public string oid;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? num;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE)]
        public class ChoiceWithThreeSequenceOptions: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
            public SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence s1;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE, Tagging = Com.Android.Apksig.Internal.Asn1.Asn1Tagging.IMPLICIT, TagNumber = 0)]
            public SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence s2;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE, Tagging = Com.Android.Apksig.Internal.Asn1.Asn1Tagging.EXPLICIT, TagNumber = 1)]
            public SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence s3;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE)]
        public class ChoiceWithClashingOptions: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int n1;
            
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER)]
            public int? n2;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithOctetString: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 0, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.OCTET_STRING)]
            public SigningServer.Android.IO.ByteBuffer buf;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithBitString: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 0, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.BIT_STRING)]
            public SigningServer.Android.IO.ByteBuffer buf;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithSequenceOf: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 0, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE_OF)]
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence> values;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithSetOf: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 0, Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SET_OF)]
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence> values;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithAsn1Opaque: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.ANY)]
            public Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject obj;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithSequenceOfUnencodedContainers: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE_OF)]
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.UnencodedContainerWithSetOf> containers;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.UNENCODED_CONTAINER)]
        public class UnencodedContainerWithSetOf: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SET_OF)]
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParserTest.EmptySequence> values;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithBoolean: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.BOOLEAN)]
            public bool value;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithUTCTime: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.UTC_TIME)]
            public string value;
            
        }
        
        [Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public class SequenceWithGeneralizedTime: SigningServer.Android.TestBase
        {
            [Com.Android.Apksig.Internal.Asn1.Asn1Field(Type = Com.Android.Apksig.Internal.Asn1.Asn1Type.GENERALIZED_TIME)]
            public string value;
            
        }
        
    }
    
}
