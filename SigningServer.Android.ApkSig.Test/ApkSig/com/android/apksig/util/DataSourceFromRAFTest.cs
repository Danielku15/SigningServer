// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SigningServer.Android.IO;

namespace SigningServer.Android.Com.Android.Apksig.Util
{
    /// <summary>
    /// Tests for the {@link DataSource} returned by
    /// {@link DataSources#asDataSource(java.io.RandomAccessFile)}.
    /// </summary>
    public abstract  class DataSourceFromRAFTestBase: SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase
    {
        public abstract Com.Android.Apksig.Util.DataSource Create(SigningServer.Android.IO.RandomAccessFile file);
        
        [Test]
        [Ignore("Concurrent file modification strangely leads to wait on file read which never returns")]
        public virtual void TestFileSizeChangesVisible()
        {
            using(SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.CloseableWithDataSource c = CreateDataSource("abcdefg"))
            {
                Com.Android.Apksig.Util.DataSource ds = c.GetDataSource();
                Com.Android.Apksig.Util.DataSource slice = ds.Slice(3, 2);
                System.IO.FileInfo f = ((SigningServer.Android.Com.Android.Apksig.Util.DataSourceFromRAFTestBase.TmpFileCloseable)c.GetCloseable()).GetFile();
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertGetByteBufferEquals("abcdefg", ds, 0, (int)ds.Size());
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertGetByteBufferEquals("de", slice, 0, (int)slice.Size());
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertFeedEquals("cdefg", ds, 2, 5);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertFeedEquals("e", slice, 1, 1);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertCopyToEquals("cdefg", ds, 2, 5);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertCopyToEquals("e", slice, 1, 1);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertSliceEquals("cdefg", ds, 2, 5);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertSliceEquals("e", slice, 1, 1);
                using(SigningServer.Android.IO.RandomAccessFile raf = new SigningServer.Android.IO.RandomAccessFile(f, "rw"))
                {
                    raf.Seek(7);
                    raf.Write("hijkl".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.UTF_8));
                }
                AssertEquals(12, ds.Size());
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertGetByteBufferEquals("abcdefghijkl", ds, 0, (int)ds.Size());
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertGetByteBufferEquals("de", slice, 0, (int)slice.Size());
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertFeedEquals("cdefg", ds, 2, 5);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertFeedEquals("fgh", ds, 5, 3);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertCopyToEquals("fgh", ds, 5, 3);
                SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.AssertSliceEquals("fgh", ds, 5, 3);
            }
        }
        
        protected override SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.CloseableWithDataSource CreateDataSource(byte[] contents)
        {
            System.IO.FileInfo tmp = CreateTemporaryFile(typeof(SigningServer.Android.Com.Android.Apksig.Util.DataSourceFromRAFTestBase).Name, ".bin");
            SigningServer.Android.IO.RandomAccessFile f = null;
            try
            {
                File.WriteAllBytes(tmp.FullName, contents);
                f = new SigningServer.Android.IO.RandomAccessFile(tmp, "r");
            }
            finally
            {
                if (f == null)
                {
                    tmp.Delete();
                }
            }
            return SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.CloseableWithDataSource.Of(Create(f), new SigningServer.Android.Com.Android.Apksig.Util.DataSourceFromRAFTestBase.TmpFileCloseable(tmp, f));
        }
        
        /// <summary>
        /// {@link Closeable} which closes the delegate {@code Closeable} and deletes the provided file.
        /// </summary>
        internal class TmpFileCloseable: SigningServer.Android.TestBase, System.IDisposable
        {
            internal readonly System.IO.FileInfo mFile;
            
            internal readonly System.IDisposable mDelegate;
            
            internal TmpFileCloseable(System.IO.FileInfo file, System.IDisposable closeable)
            {
                mFile = file;
                mDelegate = closeable;
            }
            
            public virtual System.IO.FileInfo GetFile()
            {
                return mFile;
            }
            
            public void Dispose()
            {
                try
                {
                    if (mDelegate != null)
                    {
                        mDelegate.Dispose();
                    }
                }
                finally
                {
                    if (mFile != null)
                    {
                        mFile.Delete();
                    }
                }
            }
            
        }
    }
    
    [TestClass]
    public class DataSourceFromRAFTest :DataSourceFromRAFTestBase
    {
        public override DataSource Create(RandomAccessFile file)
        {
            return DataSources.AsDataSource(file);
        }
    }
    
    [TestClass]
    public class DataSourceFromFileChannelTest :DataSourceFromRAFTestBase 
    {
        public override DataSource Create(RandomAccessFile file)
        {
            return DataSources.AsDataSource(file.GetChannel());
        }
    }
}
