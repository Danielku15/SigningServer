// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using System.Linq;

namespace SigningServer.Android.Com.Android.Apksig
{
    
    public class ApkVerifierTest: SigningServer.Android.TestBase
    {
        internal static readonly string[] DSA_KEY_NAMES = {"1024", "2048", "3072"};
        
        internal static readonly string[] DSA_KEY_NAMES_1024_AND_SMALLER = {"1024"};
        
        internal static readonly string[] DSA_KEY_NAMES_2048_AND_LARGER = {"2048", "3072"};
        
        internal static readonly string[] EC_KEY_NAMES = {"p256", "p384", "p521"};
        
        internal static readonly string[] RSA_KEY_NAMES = {"1024", "2048", "3072", "4096", "8192", "16384"};
        
        internal static readonly string[] RSA_KEY_NAMES_2048_AND_LARGER = {"2048", "3072", "4096", "8192", "16384"};
        
        internal static readonly string RSA_2048_CERT_SHA256_DIGEST = "fb5dbd3c669af9fc236c6991e6387b7f11ff0590997f22d0f5c74ff40e04fca8";
        
        internal static readonly string EC_P256_CERT_SHA256_DIGEST = "6a8b96e278e58f62cfe3584022cec1d0527fcb85a9e5d2e1694eb0405be5b599";
        
        [Test]
        public virtual void TestOriginalAccepted()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("original.apk"));
        }
        
        [Test]
        public virtual void TestV1OneSignerMD5withRSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-md5-1.2.840.113549.1.1.4-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA1withRSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.5-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA224withRSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha224-1.2.840.113549.1.1.14-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA256withRSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha256-1.2.840.113549.1.1.11-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA384withRSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha384-1.2.840.113549.1.1.12-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA512withRSAVerifies()
        {
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-rsa-pkcs1-sha512-1.2.840.113549.1.1.13-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA1withECDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-ecdsa-sha1-1.2.840.10045.2.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-ecdsa-sha1-1.2.840.10045.4.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA224withECDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-ecdsa-sha224-1.2.840.10045.2.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-ecdsa-sha224-1.2.840.10045.4.3.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA256withECDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA384withECDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-ecdsa-sha384-1.2.840.10045.2.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-ecdsa-sha384-1.2.840.10045.4.3.3-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA512withECDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-ecdsa-sha512-1.2.840.10045.2.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-ecdsa-sha512-1.2.840.10045.4.3.4-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA1withDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-dsa-sha1-1.2.840.10040.4.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_1024_AND_SMALLER);
            AssertVerifiedForEach("v1-only-with-dsa-sha1-1.2.840.10040.4.3-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_1024_AND_SMALLER);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA1withDSAAcceptedWithKeysTooLongForDigest()
        {
            SigningServer.Android.Security.PublicKey publicKey = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToCertificate(GetType(), "dsa-2048.x509.pem").GetPublicKey();
            SigningServer.Android.Security.Signature s = SigningServer.Android.Security.Signature.GetInstance("SHA1withDSA");
            try
            {
                s.InitVerify(publicKey);
            }
            catch (SigningServer.Android.Security.InvalidKeyException e)
            {
                AssumeNoException(e);
            }
            AssertVerifiedForEach("v1-only-with-dsa-sha1-1.2.840.10040.4.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_2048_AND_LARGER);
            AssertVerifiedForEach("v1-only-with-dsa-sha1-1.2.840.10040.4.3-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_2048_AND_LARGER);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA224withDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-dsa-sha224-1.2.840.10040.4.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_1024_AND_SMALLER);
            AssertVerifiedForEach("v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_1024_AND_SMALLER);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA224withDSAAcceptedWithKeysTooLongForDigest()
        {
            SigningServer.Android.Security.PublicKey publicKey = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToCertificate(GetType(), "dsa-2048.x509.pem").GetPublicKey();
            SigningServer.Android.Security.Signature s = SigningServer.Android.Security.Signature.GetInstance("SHA224withDSA");
            try
            {
                s.InitVerify(publicKey);
            }
            catch (SigningServer.Android.Security.InvalidKeyException e)
            {
                AssumeNoException(e);
            }
            AssertVerifiedForEach("v1-only-with-dsa-sha224-1.2.840.10040.4.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_2048_AND_LARGER);
            AssertVerifiedForEach("v1-only-with-dsa-sha224-2.16.840.1.101.3.4.3.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES_2048_AND_LARGER);
        }
        
        [Test]
        public virtual void TestV1OneSignerSHA256withDSAAccepted()
        {
            AssertVerifiedForEach("v1-only-with-dsa-sha256-1.2.840.10040.4.1-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES);
            AssertVerifiedForEach("v1-only-with-dsa-sha256-2.16.840.1.101.3.4.3.2-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES);
        }
        
        [Test]
        public virtual void TestV2StrippedRejected()
        {
            AssertVerificationFailure("v2-stripped.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_MISSING_APK_SIG_REFERENCED);
            AssertVerificationFailure("v2-stripped-with-ignorable-signing-schemes.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_MISSING_APK_SIG_REFERENCED);
        }
        
        [Test]
        public virtual void TestV3StrippedRejected()
        {
            AssertVerificationFailure("v3-stripped.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_MISSING_APK_SIG_REFERENCED);
        }
        
        [Test]
        public virtual void TestSignaturesIgnoredForMaxSDK()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion("v1v2v3-with-rsa-2048-lineage-3-signers.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.O));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion("v1v2v3-with-rsa-2048-lineage-3-signers.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.M));
        }
        
        [Test]
        public virtual void TestV2OneSignerOneSignatureAccepted()
        {
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-dsa-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-ecdsa-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-rsa-pkcs1-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-ecdsa-sha512-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-rsa-pkcs1-sha512-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
        }
        
        [Test]
        public virtual void TestV3OneSignerOneSignatureAccepted()
        {
            AssertVerifiedForEachForMinSdkVersion("v3-only-with-dsa-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.DSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P);
            AssertVerifiedForEachForMinSdkVersion("v3-only-with-ecdsa-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P);
            AssertVerifiedForEachForMinSdkVersion("v3-only-with-rsa-pkcs1-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P);
            AssertVerifiedForEachForMinSdkVersion("v3-only-with-ecdsa-sha512-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P);
            AssertVerifiedForEachForMinSdkVersion("v3-only-with-rsa-pkcs1-sha512-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P);
        }
        
        [Test]
        public virtual void TestV2OneSignerOneRsaPssSignatureAccepted()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssumeThatRsaPssAvailable();
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-rsa-pss-sha256-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
            AssertVerifiedForEachForMinSdkVersion("v2-only-with-rsa-pss-sha512-%s.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_KEY_NAMES_2048_AND_LARGER, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
        }
        
        [Test]
        public virtual void TestV2SignatureDoesNotMatchSignedDataRejected()
        {
            AssertVerificationFailure("v2-only-with-dsa-sha256-1024-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_DID_NOT_VERIFY);
            AssertVerificationFailure("v2-only-with-rsa-pkcs1-sha256-2048-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_DID_NOT_VERIFY);
            AssertVerificationFailure("v2-only-with-ecdsa-sha256-p256-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestV3SignatureDoesNotMatchSignedDataRejected()
        {
            // NOTE: Disabled because DSA Key is not in a valid group. (Bouncycastle validation)
            // AssertVerificationFailure("v3-only-with-dsa-sha256-2048-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_DID_NOT_VERIFY);
            AssertVerificationFailure("v3-only-with-rsa-pkcs1-sha256-3072-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_DID_NOT_VERIFY);
            AssertVerificationFailure("v3-only-with-ecdsa-sha512-p521-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestV2RsaPssSignatureDoesNotMatchSignedDataRejected()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssumeThatRsaPssAvailable();
            AssertVerificationFailure("v2-only-with-rsa-pss-sha256-2048-sig-does-not-verify.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestV2ContentDigestMismatchRejected()
        {
            Com.Android.Apksig.ApkVerifier.Issue error = Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_APK_DIGEST_DID_NOT_VERIFY;
            AssertVerificationFailure("v2-only-with-rsa-pkcs1-sha512-4096-digest-mismatch.apk", error);
            AssertVerificationFailure("v2-only-with-ecdsa-sha256-p256-digest-mismatch.apk", error);
        }
        
        [Test]
        public virtual void TestV3ContentDigestMismatchRejected()
        {
            AssertVerificationFailure("v3-only-with-rsa-pkcs1-sha512-8192-digest-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_APK_DIGEST_DID_NOT_VERIFY);
            AssertVerificationFailure("v3-only-with-dsa-sha256-3072-digest-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_APK_DIGEST_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestNoApkSignatureSchemeBlockRejected()
        {
            AssertVerificationFailure("v2-only-wrong-apk-sig-block-magic.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_NO_MANIFEST);
            AssertVerificationFailure("v2-only-garbage-between-cd-and-eocd.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_NO_MANIFEST);
            AssertVerificationFailure("v2-only-apk-sig-block-size-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_NO_MANIFEST);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-with-apk-sig-block-but-without-apk-sig-scheme-v2-block.apk"));
        }
        
        [Test]
        public virtual void TestNoV3ApkSignatureSchemeBlockRejected()
        {
            AssertVerificationFailure("v3-only-with-ecdsa-sha512-p384-wrong-apk-sig-block-magic.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_NO_MANIFEST);
            AssertVerificationFailure("v3-only-with-rsa-pkcs1-sha512-4096-apk-sig-block-size-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_NO_MANIFEST);
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Apk.ApkFormatException))]
        public virtual void TestTruncatedZipCentralDirectoryRejected()
        {
            Verify("v2-only-truncated-cd.apk");
        }
        
        [Test]
        public virtual void TestV2UnknownPairIgnoredInApkSigningBlock()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2-only-unknown-pair-in-apk-sig-block.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestV3UnknownPairIgnoredInApkSigningBlock()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v3-only-unknown-pair-in-apk-sig-block.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P));
        }
        
        [Test]
        public virtual void TestV2UnknownSignatureAlgorithmsIgnored()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2-only-with-ignorable-unsupported-sig-algs.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestV3UnknownSignatureAlgorithmsIgnored()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v3-only-with-ignorable-unsupported-sig-algs.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P));
        }
        
        [Test]
        public virtual void TestV3WithOnlyUnknownSignatureAlgorithmsRejected()
        {
            AssertVerificationFailure("v3-only-no-supported-sig-algs.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_NO_SUPPORTED_SIGNATURES);
        }
        
        [Test]
        public virtual void TestV2UnknownAdditionalAttributeIgnored()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2-only-unknown-additional-attr.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestV3UnknownAdditionalAttributeIgnored()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v3-only-unknown-additional-attr.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2v3-unknown-additional-attr.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P));
        }
        
        [Test]
        public virtual void TestV2MismatchBetweenSignaturesAndDigestsBlockRejected()
        {
            AssertVerificationFailure("v2-only-signatures-and-digests-block-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_SIG_ALG_MISMATCH_BETWEEN_SIGNATURES_AND_DIGESTS_RECORDS);
        }
        
        [Test]
        public virtual void TestV3MismatchBetweenSignaturesAndDigestsBlockRejected()
        {
            AssertVerificationFailure("v3-only-signatures-and-digests-block-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_SIG_ALG_MISMATCH_BETWEEN_SIGNATURES_AND_DIGESTS_RECORDS);
        }
        
        [Test]
        [Ignore("BouncyCastle validates the RSA modulus which causes a different error.")]
        public virtual void TestV2MismatchBetweenPublicKeyAndCertificateRejected()
        {
            AssertVerificationFailure("v2-only-cert-and-public-key-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_PUBLIC_KEY_MISMATCH_BETWEEN_CERTIFICATE_AND_SIGNATURES_RECORD);
        }
        
        [Test]
        [Ignore("BouncyCastle validates the RSA modulus which causes a different error.")]
        public virtual void TestV3MismatchBetweenPublicKeyAndCertificateRejected()
        {
            AssertVerificationFailure("v3-only-cert-and-public-key-mismatch.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_PUBLIC_KEY_MISMATCH_BETWEEN_CERTIFICATE_AND_SIGNATURES_RECORD);
        }
        
        [Test]
        public virtual void TestV2SignerBlockWithNoCertificatesRejected()
        {
            AssertVerificationFailure("v2-only-no-certs-in-sig.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_NO_CERTIFICATES);
        }
        
        [Test]
        public virtual void TestV3SignerBlockWithNoCertificatesRejected()
        {
            AssertVerificationFailure("v3-only-no-certs-in-sig.apk", Com.Android.Apksig.ApkVerifier.Issue.V3_SIG_NO_CERTIFICATES);
        }
        
        [Test]
        public virtual void TestTwoSignersAccepted()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("two-signers.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-only-two-signers.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2-only-two-signers.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestV2TwoSignersRejectedWhenOneBroken()
        {
            AssertVerificationFailure("two-signers-second-signer-v2-broken.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestV2TwoSignersRejectedWhenOneWithoutSignatures()
        {
            AssertVerificationFailure("v2-only-two-signers-second-signer-no-sig.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_NO_SIGNATURES);
        }
        
        [Test]
        public virtual void TestV2TwoSignersRejectedWhenOneWithoutSupportedSignatures()
        {
            AssertVerificationFailure("v2-only-two-signers-second-signer-no-supported-sig.apk", Com.Android.Apksig.ApkVerifier.Issue.V2_SIG_NO_SUPPORTED_SIGNATURES);
        }
        
        [Test]
        public virtual void TestCorrectCertUsedFromPkcs7SignedDataCertsSet()
        {
            Com.Android.Apksig.ApkVerifier.Result result = Verify("v1-only-pkcs7-cert-bag-first-cert-not-used.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(result);
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> signingCerts = result.GetSignerCertificates();
            AssertEquals(1, signingCerts.Size());
            AssertEquals("fb5dbd3c669af9fc236c6991e6387b7f11ff0590997f22d0f5c74ff40e04fca8", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.Sha256(signingCerts.Get(0).GetEncoded())));
        }
        
        [Test]
        public virtual void TestV1SchemeSignatureCertNotReencoded()
        {
            Com.Android.Apksig.ApkVerifier.Result result = Verify("v1-only-with-rsa-1024-cert-not-der.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(result);
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> signingCerts = result.GetSignerCertificates();
            AssertEquals(1, signingCerts.Size());
            AssertEquals("c5d4535a7e1c8111687a8374b2198da6f5ff8d811a7a25aa99ef060669342fa9", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.Sha256(signingCerts.Get(0).GetEncoded())));
        }
        
        [Test]
        public virtual void TestV1SchemeSignatureCertNotReencoded2()
        {
            Com.Android.Apksig.ApkVerifier.Result result = Verify("v1-only-with-rsa-1024-cert-not-der2.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(result);
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> signingCerts = result.GetSignerCertificates();
            AssertEquals(1, signingCerts.Size());
            AssertEquals("da3da398de674541313deed77218ce94798531ea5131bb9b1bb4063ba4548cfb", SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.Sha256(signingCerts.Get(0).GetEncoded())));
        }
        
        [Test]
        public virtual void TestMaxSizedZipEocdCommentAccepted()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-only-max-sized-eocd-comment.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2-only-max-sized-eocd-comment.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestEmptyApk()
        {
            try
            {
                VerifyForMinSdkVersion("empty-unsigned.apk", 1);
                Fail("ApkFormatException should've been thrown");
            }
            catch (Com.Android.Apksig.Apk.ApkFormatException expected)
            {
            }
            try
            {
                VerifyForMinSdkVersion("v1-only-empty.apk", 18);
                Fail("ApkFormatException should've been thrown");
            }
            catch (Com.Android.Apksig.Apk.ApkFormatException expected)
            {
            }
            try
            {
                VerifyForMinSdkVersion("v2-only-empty.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N);
                Fail("ApkFormatException should've been thrown");
            }
            catch (Com.Android.Apksig.Apk.ApkFormatException expected)
            {
            }
            try
            {
                VerifyForMinSdkVersion("v3-only-empty.apk", Com.Android.Apksig.Internal.Util.AndroidSdkVersion.P);
                Fail("ApkFormatException should've been thrown");
            }
            catch (Com.Android.Apksig.Apk.ApkFormatException expected)
            {
            }
        }
        
        [Test]
        public virtual void TestTargetSandboxVersion2AndHigher()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("targetSandboxVersion-2.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v2-only-targetSandboxVersion-2.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_NO_MANIFEST);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v2-only-targetSandboxVersion-2.apk", 24));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-only-targetSandboxVersion-2.apk"), Com.Android.Apksig.ApkVerifier.Issue.NO_SIG_FOR_TARGET_SANDBOX_VERSION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("unsigned-targetSandboxVersion-2.apk"), Com.Android.Apksig.ApkVerifier.Issue.NO_SIG_FOR_TARGET_SANDBOX_VERSION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v2-only-targetSandboxVersion-3.apk"));
        }
        
        [Test]
        public virtual void TestTargetSdkMinSchemeVersionNotMet()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-ec-p256-targetSdk-30.apk"), Com.Android.Apksig.ApkVerifier.Issue.MIN_SIG_SCHEME_FOR_TARGET_SDK_NOT_MET);
        }
        
        [Test]
        public virtual void TestTargetSdkMinSchemeVersionMet()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v2-ec-p256-targetSdk-30.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v3-ec-p256-targetSdk-30.apk"));
        }
        
        [Test]
        public virtual void TestTargetSdkMinSchemeVersionNotMetMaxLessThanTarget()
        {
            VerifyForMaxSdkVersion("v1-ec-p256-targetSdk-30.apk", 29);
        }
        
        [Test]
        public virtual void TestTargetSdkNoUsesSdkElement()
        {
            Verify("v1-only-no-uses-sdk.apk");
        }
        
        [Test]
        public virtual void TestV1MultipleDigestAlgsInManifestAndSignatureFile()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-sha1-sha256-manifest-and-sha1-sf.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-sha1-sha256-manifest-and-sf.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_ZIP_ENTRY_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk", 17), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_ZIP_ENTRY_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-manifest.apk", 18));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_MANIFEST_SECTION_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk", 17), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_MANIFEST_SECTION_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha1-wrong-in-sf.apk", 18));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_ZIP_ENTRY_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk", 18), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_ZIP_ENTRY_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-manifest.apk", 17));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_MANIFEST_SECTION_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk", 18), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_MANIFEST_SECTION_DIGEST_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion("v1-sha1-sha256-manifest-and-sf-with-sha256-wrong-in-sf.apk", 17));
        }
        
        [Test]
        public virtual void TestV1WithUnsupportedCharacterInZipEntryName()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-only-with-cr-in-entry-name.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_UNNNAMED_MANIFEST_SECTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify("v1-only-with-lf-in-entry-name.apk"), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_UNNNAMED_MANIFEST_SECTION);
        }
        
        [Test]
        public virtual void TestWeirdZipCompressionMethod()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("weird-compression-method.apk"));
        }
        
        [Test]
        public virtual void TestZipCompressionMethodMismatchBetweenLfhAndCd()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("mismatched-compression-method.apk"));
        }
        
        [Test]
        public virtual void TestV1SignedAttrs()
        {
            string apk = "v1-only-with-signed-attrs.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.JELLY_BEAN_MR2), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.KITKAT));
            apk = "v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.JELLY_BEAN_MR2), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.KITKAT));
        }
        
        [Test]
        public virtual void TestV1SignedAttrsNotInDerOrder()
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-only-with-signed-attrs-wrong-order.apk"));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify("v1-only-with-signed-attrs-signerInfo1-wrong-order-signerInfo2-good.apk"));
        }
        
        [Test]
        public virtual void TestV1SignedAttrsMissingContentType()
        {
            string apk = "v1-only-with-signed-attrs-missing-content-type.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify(apk), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
            apk = "v1-only-with-signed-attrs-signerInfo1-missing-content-type-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify(apk), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
        }
        
        [Test]
        public virtual void TestV1SignedAttrsWrongContentType()
        {
            string apk = "v1-only-with-signed-attrs-wrong-content-type.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify(apk), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            apk = "v1-only-with-signed-attrs-signerInfo1-wrong-content-type-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify(apk), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestV1SignedAttrsMissingDigest()
        {
            string apk = "v1-only-with-signed-attrs-missing-digest.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
            apk = "v1-only-with-signed-attrs-signerInfo1-missing-digest-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_VERIFY_EXCEPTION);
        }
        
        [Test]
        public virtual void TestV1SignedAttrsMultipleGoodDigests()
        {
            string apk = "v1-only-with-signed-attrs-multiple-good-digests.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_PARSE_EXCEPTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_PARSE_EXCEPTION);
            apk = "v1-only-with-signed-attrs-signerInfo1-multiple-good-digests-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_PARSE_EXCEPTION);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_PARSE_EXCEPTION);
        }
        
        [Test]
        public virtual void TestV1SignedAttrsWrongDigest()
        {
            string apk = "v1-only-with-signed-attrs-wrong-digest.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            apk = "v1-only-with-signed-attrs-signerInfo1-wrong-digest-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestV1SignedAttrsWrongSignature()
        {
            string apk = "v1-only-with-signed-attrs-wrong-signature.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            apk = "v1-only-with-signed-attrs-signerInfo1-wrong-signature-signerInfo2-good.apk";
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(VerifyForMaxSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N - 1), Com.Android.Apksig.ApkVerifier.Issue.JAR_SIG_DID_NOT_VERIFY);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(VerifyForMinSdkVersion(apk, Com.Android.Apksig.Internal.Util.AndroidSdkVersion.N));
        }
        
        [Test]
        public virtual void TestSourceStampBlock_correctSignature()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("valid-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            AssertTrue(verificationResult.IsSourceStampVerified());
        }
        
        [Test]
        public virtual void VerifySourceStamp_correctSignature()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("valid-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
            verificationResult = VerifySourceStamp("valid-stamp.apk", 18, 18);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
            verificationResult = VerifySourceStamp("valid-stamp.apk", 24, 24);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
            verificationResult = VerifySourceStamp("valid-stamp.apk", 28, 28);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_signatureMissing()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("stamp-without-block.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_SIG_MISSING);
        }
        
        [Test]
        public virtual void VerifySourceStamp_signatureMissing()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-without-block.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_NOT_VERIFIED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_SIG_MISSING);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_certificateMismatch()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("stamp-certificate-mismatch.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_CERTIFICATE_MISMATCH_BETWEEN_SIGNATURE_BLOCK_AND_APK);
        }
        
        [Test]
        public virtual void VerifySourceStamp_certificateMismatch()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-certificate-mismatch.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFICATION_FAILED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_CERTIFICATE_MISMATCH_BETWEEN_SIGNATURE_BLOCK_AND_APK);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_v1OnlySignatureValidStamp()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("v1-only-with-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            AssertTrue(verificationResult.IsSourceStampVerified());
        }
        
        [Test]
        public virtual void VerifySourceStamp_v1OnlySignatureValidStamp()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("v1-only-with-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
            verificationResult = VerifySourceStamp("v1-only-with-stamp.apk", 28, 28);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
            verificationResult = VerifySourceStamp("v1-only-with-stamp.apk", 24, 24);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_v2OnlySignatureValidStamp()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("v2-only-with-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            AssertTrue(verificationResult.IsSourceStampVerified());
        }
        
        [Test]
        public virtual void VerifySourceStamp_v2OnlySignatureValidStamp()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("v2-only-with-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
            verificationResult = VerifySourceStamp("v2-only-with-stamp.apk", 28, 28);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_v3OnlySignatureValidStamp()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("v3-only-with-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            AssertTrue(verificationResult.IsSourceStampVerified());
        }
        
        [Test]
        public virtual void VerifySourceStamp_v3OnlySignatureValidStamp()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("v3-only-with-stamp.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_apkHashMismatch_v1SignatureScheme()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("stamp-apk-hash-mismatch-v1.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void VerifySourceStamp_apkHashMismatch_v1SignatureScheme()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-apk-hash-mismatch-v1.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFICATION_FAILED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_apkHashMismatch_v2SignatureScheme()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("stamp-apk-hash-mismatch-v2.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void VerifySourceStamp_apkHashMismatch_v2SignatureScheme()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-apk-hash-mismatch-v2.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFICATION_FAILED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_apkHashMismatch_v3SignatureScheme()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("stamp-apk-hash-mismatch-v3.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void VerifySourceStamp_apkHashMismatch_v3SignatureScheme()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-apk-hash-mismatch-v3.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFICATION_FAILED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_DID_NOT_VERIFY);
        }
        
        [Test]
        public virtual void TestSourceStampBlock_malformedSignature()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = Verify("stamp-malformed-signature.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_MALFORMED_SIGNATURE);
        }
        
        [Test]
        public virtual void VerifySourceStamp_malformedSignature()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-malformed-signature.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFICATION_FAILED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_MALFORMED_SIGNATURE);
        }
        
        [Test]
        public virtual void VerifySourceStamp_expectedDigestMatchesActual()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("v3-only-with-stamp.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.RSA_2048_CERT_SHA256_DIGEST);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
        }
        
        [Test]
        public virtual void VerifySourceStamp_expectedDigestMismatch()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("v3-only-with-stamp.apk", SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.EC_P256_CERT_SHA256_DIGEST);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.CERT_DIGEST_MISMATCH);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_EXPECTED_DIGEST_MISMATCH);
        }
        
        [Test]
        public virtual void VerifySourceStamp_validStampLineage()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-lineage-valid.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(verificationResult);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFIED);
        }
        
        [Test]
        public virtual void VerifySourceStamp_invalidStampLineage()
        {
            Com.Android.Apksig.ApkVerifier.Result verificationResult = VerifySourceStamp("stamp-lineage-invalid.apk");
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationStatus(verificationResult, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus.STAMP_VERIFICATION_FAILED);
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertSourceStampVerificationFailure(verificationResult, Com.Android.Apksig.ApkVerifier.Issue.SOURCE_STAMP_POR_CERT_MISMATCH);
        }
        
        [Test]
        public virtual void ApkVerificationIssueAdapter_verifyAllBaseIssuesMapped()
        {
            var fields = typeof(Com.Android.Apksig.ApkVerificationIssue).GetFields();
            SigningServer.Android.Core.StringBuilder msg = new SigningServer.Android.Core.StringBuilder();
            foreach (var field in fields)
            {
                if (field.IsStatic && field.FieldType == typeof(int))
                {
                    if (!Com.Android.Apksig.ApkVerifier.ApkVerificationIssueAdapter.sVerificationIssueIdToIssue.ContainsKey((int)field.GetValue(null)))
                    {
                        if (msg.Length() > 0)
                        {
                            msg.Append('\n');
                        }
                        msg.Append("A mapping is required from ApkVerificationIssue." + field.Name + " to an ApkVerifier.Issue in ApkVerificationIssueAdapter");
                    }
                }
            }
            if (msg.Length() > 0)
            {
                Fail(msg.ToString());
            }
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result Verify(string apkFilenameInResources)
        {
            return Verify(apkFilenameInResources, null, null);
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result VerifyForMinSdkVersion(string apkFilenameInResources, int minSdkVersion)
        {
            return Verify(apkFilenameInResources, minSdkVersion, null);
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result VerifyForMaxSdkVersion(string apkFilenameInResources, int maxSdkVersion)
        {
            return Verify(apkFilenameInResources, null, maxSdkVersion);
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result Verify(string apkFilenameInResources, int? minSdkVersionOverride, int? maxSdkVersionOverride)
        {
            byte[] apkBytes = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(GetType(), apkFilenameInResources);
            Com.Android.Apksig.ApkVerifier.Builder builder = new Com.Android.Apksig.ApkVerifier.Builder(Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(apkBytes)));
            if (minSdkVersionOverride != null)
            {
                builder.SetMinCheckedPlatformVersion(minSdkVersionOverride.Value);
            }
            if (maxSdkVersionOverride != null)
            {
                builder.SetMaxCheckedPlatformVersion(maxSdkVersionOverride.Value);
            }
            return builder.Build().Verify();
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result VerifySourceStamp(string apkFilenameInResources)
        {
            return VerifySourceStamp(apkFilenameInResources, null, null, null);
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result VerifySourceStamp(string apkFilenameInResources, string expectedCertDigest)
        {
            return VerifySourceStamp(apkFilenameInResources, expectedCertDigest, null, null);
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result VerifySourceStamp(string apkFilenameInResources, int? minSdkVersionOverride, int? maxSdkVersionOverride)
        {
            return VerifySourceStamp(apkFilenameInResources, null, minSdkVersionOverride, maxSdkVersionOverride);
        }
        
        internal Com.Android.Apksig.ApkVerifier.Result VerifySourceStamp(string apkFilenameInResources, string expectedCertDigest, int? minSdkVersionOverride, int? maxSdkVersionOverride)
        {
            byte[] apkBytes = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(GetType(), apkFilenameInResources);
            Com.Android.Apksig.ApkVerifier.Builder builder = new Com.Android.Apksig.ApkVerifier.Builder(Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(apkBytes)));
            if (minSdkVersionOverride != null)
            {
                builder.SetMinCheckedPlatformVersion(minSdkVersionOverride.Value);
            }
            if (maxSdkVersionOverride != null)
            {
                builder.SetMaxCheckedPlatformVersion(maxSdkVersionOverride.Value);
            }
            return builder.Build().VerifySourceStamp(expectedCertDigest);
        }
        
        public static void AssertVerified(Com.Android.Apksig.ApkVerifier.Result result)
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(result, "APK");
        }
        
        public static void AssertVerified(Com.Android.Apksig.ApkVerifier.Result result, string apkId)
        {
            if (result.IsVerified())
            {
                return;
            }
            SigningServer.Android.Core.StringBuilder msg = new SigningServer.Android.Core.StringBuilder();
            foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in result.GetErrors())
            {
                if (msg.Length() > 0)
                {
                    msg.Append('\n');
                }
                msg.Append(issue);
            }
            foreach (Com.Android.Apksig.ApkVerifier.Result.V1SchemeSignerInfo signer in result.GetV1SchemeSigners())
            {
                string signerName = signer.GetName();
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in signer.GetErrors())
                {
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("JAR signer ").Append(signerName).Append(": ").Append(issue.GetIssue()).Append(": ").Append(issue);
                }
            }
            foreach (Com.Android.Apksig.ApkVerifier.Result.V2SchemeSignerInfo signer in result.GetV2SchemeSigners())
            {
                string signerName = "signer #" + (signer.GetIndex() + 1);
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in signer.GetErrors())
                {
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("APK Signature Scheme v2 signer ").Append(signerName).Append(": ").Append(issue.GetIssue()).Append(": ").Append(issue);
                }
            }
            foreach (Com.Android.Apksig.ApkVerifier.Result.V3SchemeSignerInfo signer in result.GetV3SchemeSigners())
            {
                string signerName = "signer #" + (signer.GetIndex() + 1);
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in signer.GetErrors())
                {
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("APK Signature Scheme v3 signer ").Append(signerName).Append(": ").Append(issue.GetIssue()).Append(": ").Append(issue);
                }
            }
            Fail(apkId + " did not verify: " + msg);
        }
        
        internal void AssertVerified(string apkFilenameInResources, int? minSdkVersionOverride, int? maxSdkVersionOverride)
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerified(Verify(apkFilenameInResources, minSdkVersionOverride, maxSdkVersionOverride), apkFilenameInResources);
        }
        
        public static void AssertVerificationFailure(Com.Android.Apksig.ApkVerifier.Result result, Com.Android.Apksig.ApkVerifier.Issue expectedIssue)
        {
            if (result.IsVerified())
            {
                Fail("APK verification succeeded instead of failing with " + expectedIssue);
                return;
            }
            SigningServer.Android.Core.StringBuilder msg = new SigningServer.Android.Core.StringBuilder();
            foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in result.GetErrors())
            {
                if (expectedIssue.Equals(issue.GetIssue()))
                {
                    return;
                }
                if (msg.Length() > 0)
                {
                    msg.Append('\n');
                }
                msg.Append(issue);
            }
            foreach (Com.Android.Apksig.ApkVerifier.Result.V1SchemeSignerInfo signer in result.GetV1SchemeSigners())
            {
                string signerName = signer.GetName();
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in signer.GetErrors())
                {
                    if (expectedIssue.Equals(issue.GetIssue()))
                    {
                        return;
                    }
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("JAR signer ").Append(signerName).Append(": ").Append(issue.GetIssue()).Append(" ").Append(issue);
                }
            }
            foreach (Com.Android.Apksig.ApkVerifier.Result.V2SchemeSignerInfo signer in result.GetV2SchemeSigners())
            {
                string signerName = "signer #" + (signer.GetIndex() + 1);
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in signer.GetErrors())
                {
                    if (expectedIssue.Equals(issue.GetIssue()))
                    {
                        return;
                    }
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("APK Signature Scheme v2 signer ").Append(signerName).Append(": ").Append(issue);
                }
            }
            foreach (Com.Android.Apksig.ApkVerifier.Result.V3SchemeSignerInfo signer in result.GetV3SchemeSigners())
            {
                string signerName = "signer #" + (signer.GetIndex() + 1);
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in signer.GetErrors())
                {
                    if (expectedIssue.Equals(issue.GetIssue()))
                    {
                        return;
                    }
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("APK Signature Scheme v3 signer ").Append(signerName).Append(": ").Append(issue);
                }
            }
            Fail("APK failed verification for the wrong reason" + ". Expected: " + expectedIssue + ", actual: " + msg);
        }
        
        internal static void AssertSourceStampVerificationFailure(Com.Android.Apksig.ApkVerifier.Result result, Com.Android.Apksig.ApkVerifier.Issue expectedIssue)
        {
            if (result.IsSourceStampVerified())
            {
                Fail("APK source stamp verification succeeded instead of failing with " + expectedIssue);
                return;
            }
            SigningServer.Android.Core.StringBuilder msg = new SigningServer.Android.Core.StringBuilder();
            var resultIssueWithParams = result.GetErrors().Concat(result.GetWarnings()).Where(i => i != null)
                .ToList();
            foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in resultIssueWithParams)
            {
                if (expectedIssue.Equals(issue.GetIssue()))
                {
                    return;
                }
                if (msg.Length() > 0)
                {
                    msg.Append('\n');
                }
                msg.Append(issue);
            }
            Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo signer = result.GetSourceStampInfo();
            if (signer != null)
            {
                var sourceStampIssueWithParams = signer.GetErrors().Concat(signer.GetWarnings()).Where(i => i != null).ToList();
                foreach (Com.Android.Apksig.ApkVerifier.IssueWithParams issue in sourceStampIssueWithParams)
                {
                    if (expectedIssue.Equals(issue.GetIssue()))
                    {
                        return;
                    }
                    if (msg.Length() > 0)
                    {
                        msg.Append('\n');
                    }
                    msg.Append("APK SourceStamp signer").Append(": ").Append(issue);
                }
            }
            Fail("APK source stamp failed verification for the wrong reason" + ". Expected: " + expectedIssue + ", actual: " + msg);
        }
        
        internal static void AssertSourceStampVerificationStatus(Com.Android.Apksig.ApkVerifier.Result result, Com.Android.Apksig.ApkVerifier.Result.SourceStampInfo.SourceStampVerificationStatus verificationStatus)
        {
            AssertEquals(verificationStatus, result.GetSourceStampInfo().GetSourceStampVerificationStatus());
        }
        
        internal void AssertVerificationFailure(string apkFilenameInResources, Com.Android.Apksig.ApkVerifier.Issue expectedIssue)
        {
            SigningServer.Android.Com.Android.Apksig.ApkVerifierTest.AssertVerificationFailure(Verify(apkFilenameInResources), expectedIssue);
        }
        
        internal void AssertVerifiedForEach(string apkFilenamePatternInResources, string[] args)
        {
            AssertVerifiedForEach(apkFilenamePatternInResources, args, null, null);
        }
        
        internal void AssertVerifiedForEach(string apkFilenamePatternInResources, string[] args, int? minSdkVersionOverride, int? maxSdkVersionOverride)
        {
            foreach (string arg in args)
            {
                string apkFilenameInResources = SigningServer.Android.Core.StringExtensions.Format(SigningServer.Android.Util.Locale.US, apkFilenamePatternInResources, arg);
                AssertVerified(apkFilenameInResources, minSdkVersionOverride, maxSdkVersionOverride);
            }
        }
        
        internal void AssertVerifiedForEachForMinSdkVersion(string apkFilenameInResources, string[] args, int minSdkVersion)
        {
            AssertVerifiedForEach(apkFilenameInResources, args, minSdkVersion, null);
        }
        
        internal static byte[] Sha256(byte[] msg)
        {
            try
            {
                return SigningServer.Android.Security.MessageDigest.GetInstance("SHA-256").Digest(msg);
            }
            catch (SigningServer.Android.Security.NoSuchAlgorithmException e)
            {
                throw new SigningServer.Android.Core.RuntimeException("Failed to create SHA-256 MessageDigest", e);
            }
        }
        
        internal static void AssumeThatRsaPssAvailable()
        {
            // Assume.AssumeTrue(SigningServer.Android.Security.Security.GetProviders("Signature.SHA256withRSA/PSS") != null);
        }
    }
}
