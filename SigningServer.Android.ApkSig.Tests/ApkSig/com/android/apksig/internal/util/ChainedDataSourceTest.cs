// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using NUnit.Framework;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    /// <summary>
    /// Unit tests for {@link ChainedDataSource}.
    /// </summary>
    
    public class ChainedDataSourceTest: SigningServer.Android.TestBase
    {
        internal static Com.Android.Apksig.Internal.Util.ChainedDataSource mChain;
        
        [SetUp]
        public void SetUp()
        {
            mChain = new Com.Android.Apksig.Internal.Util.ChainedDataSource(Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap("12".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII))), Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap("34567".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII))), Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap("".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII))), Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap("890".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII))), Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap("".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII))));
            AssertEquals(10, mChain.Size());
        }
        
        [Test]
        public virtual void FeedAllPossibleRanges()
        {
            for (int begin = 0;begin < mChain.Size();begin++)
            {
                for (int end = begin + 1;end < mChain.Size();end++)
                {
                    int size = end - begin;
                    Com.Android.Apksig.Util.ReadableDataSink sink = Com.Android.Apksig.Util.DataSinks.NewInMemoryDataSink(size);
                    mChain.Feed(begin, size, sink);
                    AssertByteBufferEquals(SigningServer.Android.IO.ByteBuffer.Wrap("1234567890".SubstringIndex(begin, end).GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII)), sink.GetByteBuffer(0, size));
                }
            }
        }
        
        [Test(Expected = typeof(System.IndexOutOfRangeException))]
        public virtual void FeedMoreThanAvailable()
        {
            mChain.Feed(0, mChain.Size() + 1, Com.Android.Apksig.Util.DataSinks.NewInMemoryDataSink(3));
        }
        
        [Test]
        public virtual void GetByteBufferFromAllPossibleRanges()
        {
            for (int begin = 0;begin < mChain.Size();begin++)
            {
                for (int end = begin + 1;end < mChain.Size();end++)
                {
                    int size = end - begin;
                    SigningServer.Android.IO.ByteBuffer buffer = mChain.GetByteBuffer(begin, size);
                    AssertByteBufferEquals(SigningServer.Android.IO.ByteBuffer.Wrap("1234567890".SubstringIndex(begin, end).GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII)), buffer);
                }
            }
        }
        
        [Test(Expected = typeof(System.IndexOutOfRangeException))]
        public virtual void GetByteBufferForMoreThanAvailable()
        {
            mChain.GetByteBuffer(0, (int)mChain.Size() + 1);
        }
        
        [Test]
        public virtual void CopyTo()
        {
            for (int begin = 0;begin < mChain.Size();begin++)
            {
                for (int end = begin + 1;end < mChain.Size();end++)
                {
                    int size = end - begin;
                    SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Allocate(size);
                    mChain.CopyTo(begin, size, buffer);
                    AssertEquals(size, buffer.Position());
                    buffer.Rewind();
                    AssertByteBufferEquals(SigningServer.Android.IO.ByteBuffer.Wrap("1234567890".SubstringIndex(begin, end).GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII)), buffer);
                }
            }
        }
        
        [Test]
        public virtual void Slice()
        {
            for (int begin = 0;begin < mChain.Size();begin++)
            {
                for (int end = begin + 1;end < mChain.Size();end++)
                {
                    int size = end - begin;
                    SigningServer.Android.IO.ByteBuffer buffer = mChain.Slice(begin, size).GetByteBuffer(0, size);
                    AssertByteBufferEquals(SigningServer.Android.IO.ByteBuffer.Wrap("1234567890".SubstringIndex(begin, end).GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.US_ASCII)), buffer);
                }
            }
        }
        
        internal void AssertByteBufferEquals(SigningServer.Android.IO.ByteBuffer buffer, SigningServer.Android.IO.ByteBuffer buffer2)
        {
            AssertTrue(buffer.ToString() + " vs " + buffer2.ToString() + ", byte array: " + SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(buffer.Array()) + " vs " + SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(buffer2.Array()), buffer.CompareTo(buffer2) == 0);
        }
        
    }
    
}
