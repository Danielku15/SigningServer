// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    
    public class X509CertificateUtilsTest: SigningServer.Android.TestBase
    {
        public static readonly string RSA_2048_VALID_PEM_ENCODING = "rsa-2048.x509.pem";
        
        public static readonly string RSA_2048_VALID_DER_ENCODING = "rsa-2048.x509.der";
        
        public static readonly string RSA_2048_VALID_DIGEST_HEX_ENCODING = "fb5dbd3c669af9fc236c6991e6387b7f11ff0590997f22d0f5c74ff40e04fca8";
        
        public static readonly string RSA_2048_REDUNDANT_LEN_BYTES_PEM_ENCODING = "rsa-2048-redun-len.x509.pem";
        
        public static readonly string RSA_2048_REDUNDANT_LEN_BYTES_DER_ENCODING = "rsa-2048-redun-len.x509.der";
        
        public static readonly string RSA_2048_REDUNDANT_LEN_DIGEST_HEX_ENCODING = "38481f124f8af6c36017abdfbefe375157ac304fb90adaa641ecba71b08dcd0f";
        
        public static readonly string RSA_2048_TWO_CERTS_PEM_ENCODING = "rsa-2048-2-certs.x509.pem";
        
        public static readonly string RSA_2048_TWO_CERTS_DER_ENCODING = "rsa-2048-2-certs.x509.der";
        
        [Test]
        public virtual void TestGenerateCertificateWithValidPEMEncoding()
        {
            AssertEquals(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_DIGEST_HEX_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfCertFromResources(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_PEM_ENCODING));
        }
        
        [Test]
        public virtual void TestGenerateCertificateWithRedundantLengthBytesInPEMEncoding()
        {
            AssertEquals(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_DIGEST_HEX_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfCertFromResources(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_BYTES_PEM_ENCODING));
        }
        
        [Test]
        public virtual void TestGenerateCertificateWithValidDEREncoding()
        {
            AssertEquals(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_DIGEST_HEX_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfCertFromResources(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_DER_ENCODING));
        }
        
        [Test]
        public virtual void TestGenerateCertificateWithRedundantLengthBytesInDERENcoding()
        {
            AssertEquals(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_DIGEST_HEX_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfCertFromResources(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_BYTES_DER_ENCODING));
        }
        
        [Test]
        public virtual void TestGenerateCertificatesWithTwoPEMEncodedCerts()
        {
            SigningServer.Android.Collections.List<string> encodedCerts = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestsOfCertsFromResources(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_TWO_CERTS_PEM_ENCODING);
            SigningServer.Android.Collections.Set<string> expectedEncodings = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.CreateSetOfValues(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_DIGEST_HEX_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_DIGEST_HEX_ENCODING);
            SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.AssertEncodingsMatchExpectedValues(encodedCerts, expectedEncodings);
        }
        
        [Test]
        public virtual void TestGenerateCertificatesWithTwoDEREncodedCerts()
        {
            SigningServer.Android.Collections.List<string> encodedCerts = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestsOfCertsFromResources(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_TWO_CERTS_DER_ENCODING);
            SigningServer.Android.Collections.Set<string> expectedEncodings = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.CreateSetOfValues(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_DIGEST_HEX_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_DIGEST_HEX_ENCODING);
            SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.AssertEncodingsMatchExpectedValues(encodedCerts, expectedEncodings);
        }
        
        [Test]
        public virtual void TestGenerateCertificateAndGenerateCertificatesReturnSameValues()
        {
            SigningServer.Android.Collections.List<string> certResources = SigningServer.Android.Collections.Arrays.AsList(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_PEM_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_VALID_DER_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_BYTES_PEM_ENCODING, SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.RSA_2048_REDUNDANT_LEN_BYTES_DER_ENCODING);
            foreach (string certResource in certResources)
            {
                string genCertValue = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfCertFromResources(certResource);
                SigningServer.Android.Collections.List<string> genCertsValues = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestsOfCertsFromResources(certResource);
                AssertEquals("The generateCertificates method should have returned a single certificate", 1, genCertsValues.Size());
                AssertEquals("The hex encoded digest of the certificate from generateCertificate does not " + "match the value from generateCertificates", genCertValue, genCertsValues.Get(0));
            }
        }
        
        [Test]
        public virtual void TestGenerateCertificatesWithEmptyInput()
        {
            AssertEquals("Zero certificates should be returned when passing an empty InputStream to " + "generateCertificates", 0, Com.Android.Apksig.Internal.Util.X509CertificateUtils.GenerateCertificates(new SigningServer.Android.IO.ByteArrayInputStream(new byte[0])).Size());
        }
        
        internal static SigningServer.Android.Collections.Set<string> CreateSetOfValues(params string[] values)
        {
            SigningServer.Android.Collections.Set<string> result = new SigningServer.Android.Collections.HashSet<string>();
            foreach (string value in values)
            {
                result.Add(value);
            }
            return result;
        }
        
        /// <summary>
        /// Returns a hex encoding of the digest of the specified certificate from the resources.
        /// </summary>
        internal static string GetHexEncodedDigestOfCertFromResources(string resourceName)
        {
            byte[] encodedForm = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToByteArray(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest), resourceName);
            SigningServer.Android.Security.Cert.X509Certificate cert = Com.Android.Apksig.Internal.Util.X509CertificateUtils.GenerateCertificate(encodedForm);
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfBytes(cert.GetEncoded());
        }
        
        /// <summary>
        /// Returns a list of hex encodings of the digests of the certificates in the specified resource.
        /// </summary>
        internal static SigningServer.Android.Collections.List<string> GetHexEncodedDigestsOfCertsFromResources(string resourceName)
        {
            SigningServer.Android.IO.InputStream input = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToInputStream(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest), resourceName);
            SigningServer.Android.Collections.Collection<SigningServer.Android.Security.Cert.Certificate> certs = Com.Android.Apksig.Internal.Util.X509CertificateUtils.GenerateCertificates(input);
            SigningServer.Android.Collections.List<string> encodedCerts = new SigningServer.Android.Collections.List<string>(certs.Size());
            foreach (SigningServer.Android.Security.Cert.Certificate cert in certs)
            {
                encodedCerts.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtilsTest.GetHexEncodedDigestOfBytes(cert.GetEncoded()));
            }
            return encodedCerts;
        }
        
        /// <summary>
        /// Returns the hex encoding of the digest of the specified bytes.
        /// </summary>
        internal static string GetHexEncodedDigestOfBytes(byte[] bytes)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(SigningServer.Android.Security.MessageDigest.GetInstance("SHA-256").Digest(bytes));
        }
        
        /// <summary>
        /// Asserts that the encoding of the provided certificates match the expected values.
        /// </summary>
        internal static void AssertEncodingsMatchExpectedValues(SigningServer.Android.Collections.List<string> encodedCerts, SigningServer.Android.Collections.Set<string> expectedValues)
        {
            AssertEquals("The number of encoded certificates does not match the expected number of values", expectedValues.Size(), encodedCerts.Size());
            foreach (string encodedCert in encodedCerts)
            {
                if (expectedValues.Contains(encodedCert))
                {
                    expectedValues.Remove(encodedCert);
                }
                else 
                {
                    Fail("An unexpected certificate with the following encoding was returned: " + encodedCert);
                }
            }
        }
        
    }
    
}
