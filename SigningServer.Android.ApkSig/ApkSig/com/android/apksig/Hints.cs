// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

/*
 * Copyright (C) 2022 Daniel Kuschny (C# port)
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;

namespace SigningServer.Android.Com.Android.Apksig
{
    public class Hints
    {
        /// <summary>
        /// Name of hint pattern asset file in APK.
        /// </summary>
        public static readonly string PIN_HINT_ASSET_ZIP_ENTRY_NAME = "assets/com.android.hints.pins.txt";
        
        /// <summary>
        /// Name of hint byte range data file in APK.  Keep in sync with PinnerService.java.
        /// </summary>
        public static readonly string PIN_BYTE_RANGE_ZIP_ENTRY_NAME = "pinlist.meta";
        
        internal static int ClampToInt(long value)
        {
            long b = global::System.Math.Min(value, int.MaxValue);
            return (int)global::System.Math.Max(0, b);
        }
        
        public class ByteRange
        {
            public readonly long start;
            
            public readonly long end;
            
            public ByteRange(long start, long end)
            {
                this.start = start;
                this.end = end;
            }
            
        }
        
        public class PatternWithRange
        {
            public readonly SigningServer.Android.Util.Regex.Pattern pattern;
            
            public readonly long offset;
            
            public readonly long size;
            
            public PatternWithRange(string pattern)
            {
                this.pattern = SigningServer.Android.Util.Regex.Pattern.Compile(pattern);
                this.offset = 0;
                this.size = long.MaxValue;
            }
            
            public PatternWithRange(string pattern, long offset, long size)
            {
                this.pattern = SigningServer.Android.Util.Regex.Pattern.Compile(pattern);
                this.offset = offset;
                this.size = size;
            }
            
            public virtual SigningServer.Android.Util.Regex.Matcher Matcher(string input)
            {
                return this.pattern.Matcher(input);
            }
            
            public virtual SigningServer.Android.Com.Android.Apksig.Hints.ByteRange ClampToAbsoluteByteRange(SigningServer.Android.Com.Android.Apksig.Hints.ByteRange rangeIn)
            {
                if (rangeIn.end - rangeIn.start < this.offset)
                {
                    return null;
                }
                long rangeOutStart = rangeIn.start + this.offset;
                long rangeOutSize = global::System.Math.Min(rangeIn.end - rangeOutStart, this.size);
                return new SigningServer.Android.Com.Android.Apksig.Hints.ByteRange(rangeOutStart, rangeOutStart + rangeOutSize);
            }
            
        }
        
        /// <summary>
        /// Create a blob of bytes that PinnerService understands as a
        /// sequence of byte ranges to pin.
        /// </summary>
        public static byte[] EncodeByteRangeList(SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Hints.ByteRange> pinByteRanges)
        {
            SigningServer.Android.IO.ByteArrayOutputStream bos = new SigningServer.Android.IO.ByteArrayOutputStream(pinByteRanges.Size() * 8);
            SigningServer.Android.IO.DataOutputStream output = new SigningServer.Android.IO.DataOutputStream(bos);
            try
            {
                foreach (SigningServer.Android.Com.Android.Apksig.Hints.ByteRange pinByteRange in pinByteRanges)
                {
                    output.WriteInt(SigningServer.Android.Com.Android.Apksig.Hints.ClampToInt(pinByteRange.start));
                    output.WriteInt(SigningServer.Android.Com.Android.Apksig.Hints.ClampToInt(pinByteRange.end - pinByteRange.start));
                }
            }
            catch (global::System.IO.IOException ex)
            {
                throw new SigningServer.Android.Core.AssertionError("impossible", ex);
            }
            return bos.ToByteArray();
        }
        
        public static SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Hints.PatternWithRange> ParsePinPatterns(byte[] patternBlob)
        {
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Hints.PatternWithRange> pinPatterns = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Hints.PatternWithRange>();
            try
            {
                foreach (string rawLine in SigningServer.Android.Core.StringExtensions.Create(patternBlob, "UTF-8").TrimEnd().Split("\n"))
                {
                    string line = rawLine.ReplaceFirst("#.*", "");
                    string[] fields = line.Split(" ");
                    if (fields.Length == 1)
                    {
                        pinPatterns.Add(new SigningServer.Android.Com.Android.Apksig.Hints.PatternWithRange(fields[0]));
                    }
                    else if (fields.Length == 3)
                    {
                        string s = fields[1];
                        long start = long.Parse(s);
                        string s1 = fields[2];
                        long end = long.Parse(s1);
                        pinPatterns.Add(new SigningServer.Android.Com.Android.Apksig.Hints.PatternWithRange(fields[0], start, end - start));
                    }
                    else 
                    {
                        throw new SigningServer.Android.Core.AssertionError("bad pin pattern line " + line);
                    }
                }
            }
            catch (SigningServer.Android.IO.UnsupportedEncodingException ex)
            {
                throw new SigningServer.Android.Core.RuntimeException("UTF-8 must be supported", ex);
            }
            return pinPatterns;
        }
        
    }
    
}
