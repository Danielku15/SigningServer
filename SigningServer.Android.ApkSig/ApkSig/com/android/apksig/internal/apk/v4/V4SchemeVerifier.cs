// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

/*
 * Copyright (C) 2022 Daniel Kuschny (C# port)
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4
{
    /// <summary>
    /// APK Signature Scheme V4 verifier.
    /// &lt;p&gt;
    /// Verifies the serialized V4Signature file against an APK.
    /// </summary>
    public abstract class V4SchemeVerifier
    {
        /// <summary>
        /// Hidden constructor to prevent instantiation.
        /// </summary>
        internal V4SchemeVerifier()
        {
        }
        
        /// <summary>
        /// &lt;p&gt;
        /// The main goals of the verifier are: 1) parse V4Signature file fields 2) verifies the PKCS7
        /// signature block against the raw root hash bytes in the proto field 3) verifies that the raw
        /// root hash matches with the actual hash tree root of the give APK 4) if the file contains a
        /// verity tree, verifies that it matches with the actual verity tree computed from the given
        /// APK.
        /// &lt;/p&gt;
        /// </summary>
        public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result Verify(SigningServer.Android.Com.Android.Apksig.Util.DataSource apk, System.IO.FileInfo v4SignatureFile)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature signature;
            byte[] tree;
            using(SigningServer.Android.IO.InputStream input = new SigningServer.Android.IO.FileInputStream(v4SignatureFile))
            {
                signature = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadFrom(input);
                tree = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(input);
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result result = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V4);
            if (signature == null)
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_NO_SIGNATURES, "Signature file does not contain a v4 signature.");
                return result;
            }
            if (signature.version != SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.CURRENT_VERSION)
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_VERSION_NOT_CURRENT, signature.version, SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.CURRENT_VERSION);
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.HashingInfo hashingInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.HashingInfo.FromByteArray(signature.hashingInfo);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.SigningInfo signingInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.SigningInfo.FromByteArray(signature.signingInfo);
            byte[] signedData = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.GetSignedData(apk.Size(), hashingInfo, signingInfo);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4SchemeVerifier.ParseAndVerifySignatureBlock(signingInfo, signedData);
            result.signers.Add(signerInfo);
            if (result.ContainsErrors())
            {
                return result;
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4SchemeVerifier.VerifyRootHashAndTree(apk, signerInfo, hashingInfo.rawRootHash, tree);
            if (!result.ContainsErrors())
            {
                result.verified = true;
            }
            return result;
        }
        
        /// <summary>
        /// Parses the provided signature block and populates the {@code result}.
        /// &lt;p&gt;
        /// This verifies {@signingInfo} over {@code signedData}, as well as parsing the certificate
        /// contained in the signature block. This method adds one or more errors to the {@code result}.
        /// </summary>
        internal static SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo ParseAndVerifySignatureBlock(SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.SigningInfo signingInfo, byte[] signedData)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo result = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo();
            result.index = 0;
            int sigAlgorithmId = signingInfo.signatureAlgorithmId;
            byte[] sigBytes = signingInfo.signature;
            result.signatures.Add(new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo.Signature(sigAlgorithmId, sigBytes));
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.SignatureAlgorithm signatureAlgorithm = SigningServer.Android.Com.Android.Apksig.Internal.Apk.SignatureAlgorithm.FindById(sigAlgorithmId);
            if (signatureAlgorithm == null)
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_UNKNOWN_SIG_ALGORITHM, sigAlgorithmId);
                return result;
            }
            string jcaSignatureAlgorithm = signatureAlgorithm.GetJcaSignatureAlgorithmAndParams().GetFirst();
            SigningServer.Android.Security.Spec.AlgorithmParameterSpec jcaSignatureAlgorithmParams = signatureAlgorithm.GetJcaSignatureAlgorithmAndParams().GetSecond();
            string keyAlgorithm = signatureAlgorithm.GetJcaKeyAlgorithm();
            byte[] publicKeyBytes = signingInfo.publicKey;
            SigningServer.Android.Security.PublicKey publicKey;
            try
            {
                publicKey = SigningServer.Android.Security.KeyFactory.GetInstance(keyAlgorithm).GeneratePublic(new SigningServer.Android.Security.Spec.X509EncodedKeySpec(publicKeyBytes));
            }
            catch (System.Exception e)
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_MALFORMED_PUBLIC_KEY, e);
                return result;
            }
            try
            {
                SigningServer.Android.Security.Signature sig = SigningServer.Android.Security.Signature.GetInstance(jcaSignatureAlgorithm);
                sig.InitVerify(publicKey);
                if (jcaSignatureAlgorithmParams != null)
                {
                    sig.SetParameter(jcaSignatureAlgorithmParams);
                }
                sig.Update(signedData);
                if (!sig.Verify(sigBytes))
                {
                    result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_DID_NOT_VERIFY, signatureAlgorithm);
                    return result;
                }
                result.verifiedSignatures.Put(signatureAlgorithm, sigBytes);
            }
            catch (System.Exception e) when ( e is SigningServer.Android.Security.InvalidKeyException || e is SigningServer.Android.Security.InvalidAlgorithmParameterException || e is SigningServer.Android.Security.SignatureException)
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_VERIFY_EXCEPTION, signatureAlgorithm, e);
                return result;
            }
            if (signingInfo.certificate == null)
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_NO_CERTIFICATE);
                return result;
            }
            SigningServer.Android.Security.Cert.X509Certificate certificate;
            try
            {
                certificate = new SigningServer.Android.Com.Android.Apksig.Internal.Util.GuaranteedEncodedFormX509Certificate(SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtils.GenerateCertificate(signingInfo.certificate), signingInfo.certificate);
            }
            catch (SigningServer.Android.Security.Cert.CertificateException e)
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_MALFORMED_CERTIFICATE, e);
                return result;
            }
            result.certs.Add(certificate);
            byte[] certificatePublicKeyBytes;
            try
            {
                certificatePublicKeyBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodePublicKey(certificate.GetPublicKey());
            }
            catch (SigningServer.Android.Security.InvalidKeyException e)
            {
                Console.WriteLine("Caught an exception encoding the public key: " + e);
                e.PrintStackTrace();
                certificatePublicKeyBytes = certificate.GetPublicKey().GetEncoded();
            }
            if (!SigningServer.Android.Collections.Arrays.Equals(publicKeyBytes, certificatePublicKeyBytes))
            {
                result.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_PUBLIC_KEY_MISMATCH_BETWEEN_CERTIFICATE_AND_SIGNATURES_RECORD, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ToHex(certificatePublicKeyBytes), SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ToHex(publicKeyBytes));
                return result;
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo.ContentDigest contentDigest = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo.ContentDigest(0, signingInfo.apkDigest);
            result.contentDigests.Add(contentDigest);
            return result;
        }
        
        internal static void VerifyRootHashAndTree(SigningServer.Android.Com.Android.Apksig.Util.DataSource apkContent, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo, byte[] expectedDigest, byte[] expectedTree)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VerityTreeAndDigest actualContentDigestInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ComputeChunkVerityTreeAndDigest(apkContent);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm algorithm = actualContentDigestInfo.contentDigestAlgorithm;
            byte[] actualDigest = actualContentDigestInfo.rootHash;
            byte[] actualTree = actualContentDigestInfo.tree;
            if (!SigningServer.Android.Collections.Arrays.Equals(expectedDigest, actualDigest))
            {
                signerInfo.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_APK_ROOT_DID_NOT_VERIFY, algorithm, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ToHex(expectedDigest), SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ToHex(actualDigest));
                return;
            }
            if (expectedTree != null && !SigningServer.Android.Collections.Arrays.Equals(expectedTree, actualTree))
            {
                signerInfo.AddError(SigningServer.Android.Com.Android.Apksig.ApkVerifier.Issue.V4_SIG_APK_TREE_DID_NOT_VERIFY, algorithm, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ToHex(expectedDigest), SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ToHex(actualDigest));
                return;
            }
            signerInfo.verifiedContentDigests.Put(algorithm, actualDigest);
        }
        
    }
    
}
