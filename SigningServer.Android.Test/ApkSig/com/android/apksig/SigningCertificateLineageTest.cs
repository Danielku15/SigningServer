// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SigningServer.Android.Com.Android.Apksig
{
    public class SigningCertificateLineageTest: SigningServer.Android.TestBase
    {
        internal SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig> mSigners;
        
        internal static readonly string FIRST_RSA_1024_SIGNER_RESOURCE_NAME = "rsa-1024";
        
        internal static readonly string SECOND_RSA_1024_SIGNER_RESOURCE_NAME = "rsa-1024_2";
        
        internal static readonly string FIRST_RSA_2048_SIGNER_RESOURCE_NAME = "rsa-2048";
        
        internal static readonly string SECOND_RSA_2048_SIGNER_RESOURCE_NAME = "rsa-2048_2";
        
        internal static readonly string THIRD_RSA_2048_SIGNER_RESOURCE_NAME = "rsa-2048_3";
        
        [TestInitialize]
        public virtual void SetUp()
        {
            mSigners = new SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig>();
        }
        
        [Test]
        public virtual void TestFirstRotationContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            AssertLineageContainsExpectedSigners(lineage, mSigners);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig unknownSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            AssertFalse("The signer " + unknownSigner.GetCertificate().GetSubjectDN() + " should not be in the lineage", lineage.IsSignerInLineage(unknownSigner));
        }
        
        [Test]
        public virtual void TestRotationWithExistingLineageContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            lineage = UpdateLineageWithSignerFromResources(lineage, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            AssertLineageContainsExpectedSigners(lineage, mSigners);
        }
        
        [Test]
        public virtual void TestLineageFromBytesContainsExpectedSigners()
        {
            Com.Android.Apksig.Util.DataSource lineageDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "rsa-2048-lineage-3-signers");
            Com.Android.Apksig.SigningCertificateLineage lineage = Com.Android.Apksig.SigningCertificateLineage.ReadFromBytes(lineageDataSource.GetByteBuffer(0, (int)lineageDataSource.Size()).Array());
            SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig> signers = new SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig>(3);
            signers.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            signers.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            signers.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertLineageContainsExpectedSigners(lineage, signers);
        }
        
        [Test]
        public virtual void TestLineageFromFileContainsExpectedSigners()
        {
            Com.Android.Apksig.Util.DataSource lineageDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "rsa-2048-lineage-3-signers");
            Com.Android.Apksig.SigningCertificateLineage lineage = Com.Android.Apksig.SigningCertificateLineage.ReadFromDataSource(lineageDataSource);
            SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig> signers = new SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig>(3);
            signers.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME));
            signers.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            signers.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME));
            AssertLineageContainsExpectedSigners(lineage, signers);
        }
        
        [Test]
        public virtual void TestLineageFromFileDoesNotContainUnknownSigner()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), "rsa-2048-lineage-2-signers");
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig unknownSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            AssertFalse("The signer " + unknownSigner.GetCertificate().GetSubjectDN() + " should not be in the lineage", lineage.IsSignerInLineage(unknownSigner));
        }
        
        [Test(Expected = typeof(System.ArgumentException))]
        public virtual void TestLineageFromFileWithInvalidMagicFails()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), "rsa-2048-lineage-invalid-magic");
        }
        
        [Test(Expected = typeof(System.ArgumentException))]
        public virtual void TestLineageFromFileWithInvalidVersionFails()
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), "rsa-2048-lineage-invalid-version");
        }
        
        [Test]
        public virtual void TestLineageWrittenToBytesContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            lineage = UpdateLineageWithSignerFromResources(lineage, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            sbyte[] lineageBytes = lineage.GetBytes();
            lineage = Com.Android.Apksig.SigningCertificateLineage.ReadFromBytes(lineageBytes);
            AssertLineageContainsExpectedSigners(lineage, mSigners);
        }
        
        [Test]
        public virtual void TestLineageWrittenToFileContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            lineage = UpdateLineageWithSignerFromResources(lineage, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            System.IO.FileInfo lineageFile = CreateTemporaryFile(GetType().Name, ".bin");
            try
            {
                lineage.WriteToFile(lineageFile);
                lineage = Com.Android.Apksig.SigningCertificateLineage.ReadFromFile(lineageFile);
                AssertLineageContainsExpectedSigners(lineage, mSigners);

            }
            finally
            {
                if (lineageFile.Exists)
                {
                    lineageFile.Delete();
                }
            }
        }
        
        [Test]
        public virtual void TestUpdatedCapabilitiesInLineage()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSignerConfig = mSigners.Get(0);
            SigningServer.Android.Collections.List<bool> expectedCapabilityValues = SigningServer.Android.Collections.Arrays.AsList(false, false, false, false, false);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities newCapabilities = BuildSignerCapabilities(expectedCapabilityValues);
            lineage.UpdateSignerCapabilities(oldSignerConfig, newCapabilities);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities updatedCapabilities = lineage.GetSignerCapabilities(oldSignerConfig);
            AssertExpectedCapabilityValues(updatedCapabilities, expectedCapabilityValues);
        }
        
        [Test]
        public virtual void TestUpdatedCapabilitiesInLineageWrittenToFile()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSignerConfig = mSigners.Get(0);
            SigningServer.Android.Collections.List<bool> expectedCapabilityValues = SigningServer.Android.Collections.Arrays.AsList(false, false, false, false, false);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities newCapabilities = BuildSignerCapabilities(expectedCapabilityValues);
            lineage.UpdateSignerCapabilities(oldSignerConfig, newCapabilities);
            System.IO.FileInfo lineageFile = CreateTemporaryFile(GetType().Name, ".bin");
            try
            {
                lineage.WriteToFile(lineageFile);
                lineage = Com.Android.Apksig.SigningCertificateLineage.ReadFromFile(lineageFile);
                Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities updatedCapabilities = lineage.GetSignerCapabilities(oldSignerConfig);
                AssertExpectedCapabilityValues(updatedCapabilities, expectedCapabilityValues);
            }
            finally
            {
                if (lineageFile.Exists)
                {
                    lineageFile.Delete();
                }
            }
        }
        
        [Test]
        public virtual void TestCapabilitiesAreNotUpdatedWithDefaultValues()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToSigningCertificateLineage(GetType(), "rsa-2048-lineage-no-capabilities-first-signer");
            SigningServer.Android.Collections.List<bool> expectedCapabilityValues = SigningServer.Android.Collections.Arrays.AsList(false, false, false, false, false);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSignerConfig = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities oldSignerCapabilities = lineage.GetSignerCapabilities(oldSignerConfig);
            AssertExpectedCapabilityValues(oldSignerCapabilities, expectedCapabilityValues);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities newCapabilities = new Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities.Builder().Build();
            lineage.UpdateSignerCapabilities(oldSignerConfig, newCapabilities);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities updatedCapabilities = lineage.GetSignerCapabilities(oldSignerConfig);
            AssertExpectedCapabilityValues(updatedCapabilities, expectedCapabilityValues);
        }
        
        [Test]
        public virtual void TestFirstRotationWitNonDefaultCapabilitiesForSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig newSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<bool> oldSignerCapabilityValues = SigningServer.Android.Collections.Arrays.AsList(false, false, false, false, false);
            SigningServer.Android.Collections.List<bool> newSignerCapabilityValues = SigningServer.Android.Collections.Arrays.AsList(false, true, false, false, false);
            Com.Android.Apksig.SigningCertificateLineage lineage = new Com.Android.Apksig.SigningCertificateLineage.Builder(oldSigner, newSigner).SetOriginalCapabilities(BuildSignerCapabilities(oldSignerCapabilityValues)).SetNewCapabilities(BuildSignerCapabilities(newSignerCapabilityValues)).Build();
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities oldSignerCapabilities = lineage.GetSignerCapabilities(oldSigner);
            AssertExpectedCapabilityValues(oldSignerCapabilities, oldSignerCapabilityValues);
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities newSignerCapabilities = lineage.GetSignerCapabilities(newSigner);
            AssertExpectedCapabilityValues(newSignerCapabilities, newSignerCapabilityValues);
        }
        
        [Test]
        public virtual void TestRotationWithExitingLineageAndNonDefaultCapabilitiesForNewSigner()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSigner = mSigners.Get(mSigners.Size() - 1);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig newSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<bool> newSignerCapabilityValues = SigningServer.Android.Collections.Arrays.AsList(false, false, false, false, false);
            lineage = lineage.SpawnDescendant(oldSigner, newSigner, BuildSignerCapabilities(newSignerCapabilityValues));
            Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities newSignerCapabilities = lineage.GetSignerCapabilities(newSigner);
            AssertExpectedCapabilityValues(newSignerCapabilities, newSignerCapabilityValues);
        }
        
        [Test(Expected = typeof(System.ArgumentException))]
        public virtual void TestRotationWithExistingLineageUsingNonParentSignerFails()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldestSigner = mSigners.Get(0);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig newSigner = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            lineage.SpawnDescendant(oldestSigner, newSigner);
        }
        
        [Test]
        public virtual void TestLineageFromV3SignerAttribute()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.IO.ByteBuffer v3SignerAttribute = SigningServer.Android.IO.ByteBuffer.Wrap(Com.Android.Apksig.Internal.Apk.V3.V3SchemeSigner.GenerateV3SignerAttribute(lineage));
            v3SignerAttribute.Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
            SigningServer.Android.IO.ByteBuffer attribute = Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GetLengthPrefixedSlice(v3SignerAttribute);
            int id = attribute.GetInt();
            AssertEquals("The ID of the v3SignerAttribute ByteBuffer is not the expected " + "PROOF_OF_ROTATION_ATTR_ID", Com.Android.Apksig.Internal.Apk.V3.V3SchemeConstants.PROOF_OF_ROTATION_ATTR_ID, id);
            lineage = Com.Android.Apksig.SigningCertificateLineage.ReadFromV3AttributeValue(Com.Android.Apksig.Internal.Util.ByteBufferUtils.ToByteArray(attribute));
            AssertLineageContainsExpectedSigners(lineage, mSigners);
        }
        
        [Test]
        public virtual void TestSortedSignerConfigsAreInSortedOrder()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig oldSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetApkSignerEngineSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig newSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetApkSignerEngineSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig> signers = SigningServer.Android.Collections.Arrays.AsList(newSigner, oldSigner);
            SigningServer.Android.Collections.List<Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig> sortedSigners = lineage.SortSignerConfigs(signers);
            AssertEquals("The sorted signer list does not contain the expected number of elements", signers.Size(), sortedSigners.Size());
            AssertEquals("The first element in the sorted list should be the first signer", oldSigner, sortedSigners.Get(0));
            AssertEquals("The second element in the sorted list should be the second signer", newSigner, sortedSigners.Get(1));
        }
        
        [Test(Expected = typeof(System.ArgumentException))]
        public virtual void TestSortedSignerConfigsWithUnknownSignerFails()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig oldSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetApkSignerEngineSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig newSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetApkSignerEngineSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig unknownSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetApkSignerEngineSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig> signers = SigningServer.Android.Collections.Arrays.AsList(newSigner, oldSigner, unknownSigner);
            lineage.SortSignerConfigs(signers);
        }
        
        [Test]
        public virtual void TestAllExpectedCertificatesAreInLineage()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            lineage = UpdateLineageWithSignerFromResources(lineage, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.Set<SigningServer.Android.Security.Cert.X509Certificate> expectedCertSet = new SigningServer.Android.Collections.HashSet<SigningServer.Android.Security.Cert.X509Certificate>();
            for (int i = 0;i < mSigners.Size();i++)
            {
                expectedCertSet.Add(mSigners.Get(i).GetCertificate());
            }
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> certs = lineage.GetCertificatesInLineage();
            AssertEquals("The number of elements in the certificate list from the lineage does not equal " + "the expected number", expectedCertSet.Size(), certs.Size());
            foreach (SigningServer.Android.Security.Cert.X509Certificate cert in certs)
            {
                AssertTrue("An unexpected certificate, " + cert.GetSubjectDN() + ", is in the lineage", expectedCertSet.Remove(cert));
            }
        }
        
        [Test]
        public virtual void TestSublineageContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            lineage = UpdateLineageWithSignerFromResources(lineage, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig> subList = mSigners.SubList(0, 2);
            SigningServer.Android.Security.Cert.X509Certificate cert = subList.Get(1).GetCertificate();
            Com.Android.Apksig.SigningCertificateLineage subLineage = lineage.GetSubLineage(cert);
            AssertLineageContainsExpectedSigners(subLineage, subList);
        }
        
        [Test]
        public virtual void TestConsolidatedLineageContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage lineage = CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage updatedLineage = UpdateLineageWithSignerFromResources(lineage, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage> lineages = SigningServer.Android.Collections.Arrays.AsList(lineage, updatedLineage);
            Com.Android.Apksig.SigningCertificateLineage consolidatedLineage = Com.Android.Apksig.SigningCertificateLineage.ConsolidateLineages(lineages);
            AssertLineageContainsExpectedSigners(consolidatedLineage, mSigners);
        }
        
        [Test(Expected = typeof(System.ArgumentException))]
        public virtual void TestConsolidatedLineageWithDisjointLineagesFail()
        {
            SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage> lineages = new SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage>();
            lineages.Add(CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_1024_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_1024_SIGNER_RESOURCE_NAME));
            lineages.Add(CreateLineageWithSignersFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME, SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME));
            Com.Android.Apksig.SigningCertificateLineage.ConsolidateLineages(lineages);
        }
        
        [Test]
        public virtual void TestLineageFromAPKContainsExpectedSigners()
        {
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig firstSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.FIRST_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig secondSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.SECOND_RSA_2048_SIGNER_RESOURCE_NAME);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig thirdSigner = SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.GetSignerConfigFromResources(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest.THIRD_RSA_2048_SIGNER_RESOURCE_NAME);
            SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig> expectedSigners = SigningServer.Android.Collections.Arrays.AsList(firstSigner, secondSigner, thirdSigner);
            Com.Android.Apksig.Util.DataSource apkDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "v1v2v3-with-rsa-2048-lineage-3-signers.apk");
            Com.Android.Apksig.SigningCertificateLineage lineageFromApk = Com.Android.Apksig.SigningCertificateLineage.ReadFromApkDataSource(apkDataSource);
            AssertLineageContainsExpectedSigners(lineageFromApk, expectedSigners);
        }
        
        [Test(Expected = typeof(Com.Android.Apksig.Apk.ApkFormatException))]
        public virtual void TestLineageFromAPKWithInvalidZipCDSizeFails()
        {
            Com.Android.Apksig.Util.DataSource apkDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "v1v2v3-with-rsa-2048-lineage-3-signers-invalid-zip.apk");
            Com.Android.Apksig.SigningCertificateLineage.ReadFromApkDataSource(apkDataSource);
        }
        
        [Test]
        public virtual void TestLineageFromAPKWithNoLineageFails()
        {
            Com.Android.Apksig.Util.DataSource apkDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "golden-aligned-v1v2-out.apk");
            try
            {
                Com.Android.Apksig.SigningCertificateLineage.ReadFromApkDataSource(apkDataSource);
                Fail("A failure should have been reported due to the APK not containing a V3 signing " + "block");
            }
            catch (System.ArgumentException expected)
            {
            }
            apkDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "golden-aligned-v1v2v3-out.apk");
            try
            {
                Com.Android.Apksig.SigningCertificateLineage.ReadFromApkDataSource(apkDataSource);
                Fail("A failure should have been reported due to the APK containing a V3 signing " + "block without the lineage attribute");
            }
            catch (System.ArgumentException expected)
            {
            }
            apkDataSource = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToDataSource(GetType(), "v1v2v3-with-rsa-2048-lineage-3-signers-invalid-lineage-attr.apk");
            try
            {
                Com.Android.Apksig.SigningCertificateLineage.ReadFromApkDataSource(apkDataSource);
                Fail("A failure should have been reported due to the APK containing a V3 signing " + "block with a modified lineage attribute ID");
            }
            catch (System.ArgumentException expected)
            {
            }
        }
        
        /// <summary>
        /// Builds a new {@code SigningCertificateLinage.SignerCapabilities} object using the values in
        /// the provided {@code List}. The {@code List} should contain {@code boolean} values to be
        /// passed to the following methods in the
        /// {@code SigningCertificateLineage.SignerCapabilities.Builder} (if a value is not provided the
        /// noted default is used):
        /// 
        ///  {@code SigningCertificateLineage.SignerCapabilities.Builder.setInstalledData} [{@code true}]
        ///  {@code SigningCertificateLineage.SignerCapabilities.Builder.setSharedUid} [{@code true}]
        ///  {@code SigningCertificateLineage.SignerCapabilities.Builder.setPermission} [{@code true}]
        ///  {@code SigningCertificateLineage.SignerCapabilities.Builder.setRollback} [{@code false}]
        ///  {@code SigningCertificateLineage.SignerCapabilities.Builder.setAuth} [{@code true}]
        /// 
        /// This method should not be used when testing caller configured capabilities since the setXX
        /// method for each capability is called.
        /// </summary>
        internal Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities BuildSignerCapabilities(SigningServer.Android.Collections.List<bool> capabilityValues)
        {
            return new Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities.Builder().SetInstalledData(capabilityValues.Size() > 0 ? capabilityValues.Get(0) : true).SetSharedUid(capabilityValues.Size() > 1 ? capabilityValues.Get(1) : true).SetPermission(capabilityValues.Size() > 2 ? capabilityValues.Get(2) : true).SetRollback(capabilityValues.Size() > 3 ? capabilityValues.Get(3) : false).SetAuth(capabilityValues.Size() > 4 ? capabilityValues.Get(4) : true).Build();
        }
        
        /// <summary>
        /// Verifies the specified {@code SigningCertificateLinage.SignerCapabilities} contains the
        /// expected values from the provided {@code List}. The {@code List} should contain
        /// {@code boolean} values to be verified against the
        /// {@code SigningCertificateLinage.SignerCapabilities} methods in the following order:
        /// 
        ///  {@mcode SigningCertificateLineage.SignerCapabilities.hasInstalledData}
        ///  {@mcode SigningCertificateLineage.SignerCapabilities.hasSharedUid}
        ///  {@mcode SigningCertificateLineage.SignerCapabilities.hasPermission}
        ///  {@mcode SigningCertificateLineage.SignerCapabilities.hasRollback}
        ///  {@mcode SigningCertificateLineage.SignerCapabilities.hasAuth}
        /// </summary>
        internal void AssertExpectedCapabilityValues(Com.Android.Apksig.SigningCertificateLineage.SignerCapabilities capabilities, SigningServer.Android.Collections.List<bool> expectedCapabilityValues)
        {
            AssertTrue("The expectedCapabilityValues do not contain the expected number of elements", expectedCapabilityValues.Size() >= 5);
            AssertEquals("The installed data capability is not set to the expected value", expectedCapabilityValues.Get(0), capabilities.HasInstalledData());
            AssertEquals("The shared UID capability is not set to the expected value", expectedCapabilityValues.Get(1), capabilities.HasSharedUid());
            AssertEquals("The permission capability is not set to the expected value", expectedCapabilityValues.Get(2), capabilities.HasPermission());
            AssertEquals("The rollback capability is not set to the expected value", expectedCapabilityValues.Get(3), capabilities.HasRollback());
            AssertEquals("The auth capability is not set to the expected value", expectedCapabilityValues.Get(4), capabilities.HasAuth());
        }
        
        /// <summary>
        /// Creates a new {@code SigningCertificateLineage} with the specified signers from the
        /// resources. {@code mSigners} will be updated with the
        /// {@code SigningCertificateLineage.SignerConfig} for each signer added to the lineage.
        /// </summary>
        internal Com.Android.Apksig.SigningCertificateLineage CreateLineageWithSignersFromResources(string oldSignerResourceName, string newSignerResourceName)
        {
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSignerConfig = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), oldSignerResourceName);
            mSigners.Add(oldSignerConfig);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig newSignerConfig = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), newSignerResourceName);
            mSigners.Add(newSignerConfig);
            return new Com.Android.Apksig.SigningCertificateLineage.Builder(oldSignerConfig, newSignerConfig).Build();
        }
        
        /// <summary>
        /// Updates the specified {@code SigningCertificateLineage} with the signer from the resources.
        /// Requires that the {@code mSigners} list contains the previous signers in the lineage since
        /// the most recent signer must be specified when adding a new signer to the lineage.
        /// </summary>
        internal Com.Android.Apksig.SigningCertificateLineage UpdateLineageWithSignerFromResources(Com.Android.Apksig.SigningCertificateLineage lineage, string newSignerResourceName)
        {
            AssertTrue("The mSigners list did not contain the expected signers to update the lineage", mSigners.Size() >= 2);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig oldSignerConfig = mSigners.Get(mSigners.Size() - 1);
            Com.Android.Apksig.SigningCertificateLineage.SignerConfig newSignerConfig = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToLineageSignerConfig(GetType(), newSignerResourceName);
            mSigners.Add(newSignerConfig);
            return lineage.SpawnDescendant(oldSignerConfig, newSignerConfig);
        }
        
        internal void AssertLineageContainsExpectedSigners(Com.Android.Apksig.SigningCertificateLineage lineage, SigningServer.Android.Collections.List<Com.Android.Apksig.SigningCertificateLineage.SignerConfig> signers)
        {
            AssertEquals("The lineage does not contain the expected number of signers", signers.Size(), lineage.Size());
            foreach (Com.Android.Apksig.SigningCertificateLineage.SignerConfig signer in signers)
            {
                AssertTrue("The signer " + signer.GetCertificate().GetSubjectDN() + " is expected to be in the lineage", lineage.IsSignerInLineage(signer));
            }
        }
        
        internal static Com.Android.Apksig.SigningCertificateLineage.SignerConfig GetSignerConfigFromResources(string resourcePrefix)
        {
            SigningServer.Android.Security.PrivateKey privateKey = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToPrivateKey(typeof(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest), resourcePrefix + ".pk8");
            SigningServer.Android.Security.Cert.X509Certificate cert = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToCertificate(typeof(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest), resourcePrefix + ".x509.pem");
            return new Com.Android.Apksig.SigningCertificateLineage.SignerConfig.Builder(privateKey, cert).Build();
        }
        
        internal static Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig GetApkSignerEngineSignerConfigFromResources(string resourcePrefix)
        {
            SigningServer.Android.Security.PrivateKey privateKey = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToPrivateKey(typeof(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest), resourcePrefix + ".pk8");
            SigningServer.Android.Security.Cert.X509Certificate cert = SigningServer.Android.Com.Android.Apksig.Internal.Util.Resources.ToCertificate(typeof(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineageTest), resourcePrefix + ".x509.pem");
            return new Com.Android.Apksig.DefaultApkSignerEngine.SignerConfig.Builder(resourcePrefix, privateKey, SigningServer.Android.Util.Collections.SingletonList<SigningServer.Android.Security.Cert.X509Certificate>(cert)).Build();
        }
        
    }
    
}
