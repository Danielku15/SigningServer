// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk
{
    public class ApkSigningBlockUtilsTest: SigningServer.Android.TestBase
    {
        [Rule]
        public var temporaryFolder = .Create();
        
        internal static readonly int BASE = 255;
        
        public Com.Android.Apksig.Util.DataSource[] dataSource;
        
        public readonly SigningServer.Android.Collections.Set<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm> algos = SigningServer.Android.Util.EnumSet.Of<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm>(Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm.CHUNKED_SHA512);
        
        [Before]
        public virtual void SetUp()
        {
            sbyte[] part1 = new sbyte[80 * 1024 * 1024 + 12345];
            for (int i = 0;i < part1.Length;++i)
            {
                part1[i] = (sbyte)(i % SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsTest.BASE);
            }
            System.IO.FileInfo dataFile = temporaryFolder.NewFile("fake.apk");
            using(SigningServer.Android.IO.FileOutputStream fos = new SigningServer.Android.IO.FileOutputStream(dataFile))
            {
                fos.Write(part1);
            }
            SigningServer.Android.IO.RandomAccessFile raf = new SigningServer.Android.IO.RandomAccessFile(dataFile, "r");
            sbyte[] part2 = new sbyte[1_500_000];
            for (int i = 0;i < part2.Length;++i)
            {
                part2[i] = (sbyte)(i % SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsTest.BASE);
            }
            sbyte[] part3 = new sbyte[30_000];
            for (int i = 0;i < part3.Length;++i)
            {
                part3[i] = (sbyte)(i % SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsTest.BASE);
            }
            dataSource = new Com.Android.Apksig.Util.DataSource[]{
                Com.Android.Apksig.Util.DataSources.AsDataSource(raf), Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(part2)), Com.Android.Apksig.Util.DataSources.AsDataSource(SigningServer.Android.IO.ByteBuffer.Wrap(part3))}
            ;
        }
        
        [Test]
        public virtual void TestNewVersionMatchesOld()
        {
            SigningServer.Android.Collections.Map<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> outputContentDigestsOld = new SigningServer.Android.Collections.EnumMap<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>(typeof(Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm));
            SigningServer.Android.Collections.Map<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> outputContentDigestsNew = new SigningServer.Android.Collections.EnumMap<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>(typeof(Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm));
            Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ComputeOneMbChunkContentDigests(algos, dataSource, outputContentDigestsOld);
            Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ComputeOneMbChunkContentDigests(Com.Android.Apksig.Util.RunnablesExecutor.SINGLE_THREADED, algos, dataSource, outputContentDigestsNew);
            AssertEqualDigests(outputContentDigestsOld, outputContentDigestsNew);
        }
        
        [Test]
        public virtual void TestMultithreadedVersionMatchesSinglethreaded()
        {
            SigningServer.Android.Collections.Map<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> outputContentDigests = new SigningServer.Android.Collections.EnumMap<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>(typeof(Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm));
            SigningServer.Android.Collections.Map<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> outputContentDigestsMultithreaded = new SigningServer.Android.Collections.EnumMap<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>(typeof(Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm));
            Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ComputeOneMbChunkContentDigests(Com.Android.Apksig.Util.RunnablesExecutor.SINGLE_THREADED, algos, dataSource, outputContentDigests);
            Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.ComputeOneMbChunkContentDigests((Com.Android.Apksig.Util.RunnablesProvider provider) => {
                SigningServer.Android.Util.Concurrent.ForkJoinPool forkJoinPool = SigningServer.Android.Util.Concurrent.ForkJoinPool.CommonPool();
                int jobCount = forkJoinPool.GetParallelism();
                SigningServer.Android.Collections.List<SigningServer.Android.Util.Concurrent.Future<object>> jobs = new SigningServer.Android.Collections.List<SigningServer.Android.Util.Concurrent.Future<object>>(jobCount);
                for (int i = 0;i < jobCount;i++)
                {
                    jobs.Add(forkJoinPool.Submit(provider.CreateRunnable()));
                }
                try
                {
                    foreach (SigningServer.Android.Util.Concurrent.Future<object> future in jobs)
                    {
                        future.Get();
                    }
                }
                catch (SigningServer.Android.Core.InterruptedException e)
                {
                    SigningServer.Android.Core.Thread.CurrentThread().Interrupt();
                    throw new SigningServer.Android.Core.RuntimeException(e);
                }
                catch (SigningServer.Android.Util.Concurrent.ExecutionException e)
                {
                    throw new SigningServer.Android.Core.RuntimeException(e);
                }
            }
            , algos, dataSource, outputContentDigestsMultithreaded);
            AssertEqualDigests(outputContentDigestsMultithreaded, outputContentDigests);
        }
        
        internal void AssertEqualDigests(SigningServer.Android.Collections.Map<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> d1, SigningServer.Android.Collections.Map<Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> d2)
        {
            AssertEquals(d1.KeySet(), d2.KeySet());
            foreach (Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm algo in d1.KeySet())
            {
                sbyte[] digest1 = d1.Get(algo);
                sbyte[] digest2 = d2.Get(algo);
                AssertArrayEquals(digest1, digest2);
            }
        }
        
    }
    
}
