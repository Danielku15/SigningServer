// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    public class FileChannelDataSourceTest: SigningServer.Android.TestBase
    {
        [Rule]
        public var temporaryFolder = .Create();
        
        [Test]
        public virtual void TestFeedsCorrectData_whenFilePartiallyReadFromBeginning()
        {
            sbyte[] fullFileContent = SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSourceTest.CreateFileContent(1024 * 1024 + 987654);
            SigningServer.Android.IO.RandomAccessFile raf = CreateRaf(fullFileContent);
            Com.Android.Apksig.Util.DataSource rafDataSource = new Com.Android.Apksig.Internal.Util.FileChannelDataSource(raf.GetChannel());
            Com.Android.Apksig.Internal.Util.ByteArrayDataSink dataSink = new Com.Android.Apksig.Internal.Util.ByteArrayDataSink();
            int bytesToFeed = 1024 * 1024 + 12345;
            rafDataSource.Feed(0, bytesToFeed, dataSink);
            sbyte[] expectedBytes = SigningServer.Android.Collections.Arrays.CopyOf(fullFileContent, bytesToFeed);
            sbyte[] resultBytes = SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSourceTest.GetDataSinkBytes(dataSink);
            AssertArrayEquals(expectedBytes, resultBytes);
        }
        
        [Test]
        public virtual void TestFeedsCorrectData_whenFilePartiallyReadWithOffset()
        {
            sbyte[] fullFileContent = SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSourceTest.CreateFileContent(1024 * 1024 + 987654);
            SigningServer.Android.IO.RandomAccessFile raf = CreateRaf(fullFileContent);
            Com.Android.Apksig.Util.DataSource rafDataSource = new Com.Android.Apksig.Internal.Util.FileChannelDataSource(raf.GetChannel());
            Com.Android.Apksig.Internal.Util.ByteArrayDataSink dataSink = new Com.Android.Apksig.Internal.Util.ByteArrayDataSink();
            int offset = 23456;
            int bytesToFeed = 1024 * 1024 + 12345;
            rafDataSource.Feed(offset, bytesToFeed, dataSink);
            sbyte[] expectedBytes = SigningServer.Android.Collections.Arrays.CopyOfRange(fullFileContent, offset, offset + bytesToFeed);
            sbyte[] resultBytes = SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSourceTest.GetDataSinkBytes(dataSink);
            AssertArrayEquals(expectedBytes, resultBytes);
        }
        
        [Test]
        public virtual void TestFeedsCorrectData_whenSeveralMbRead()
        {
            sbyte[] fullFileContent = SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSourceTest.CreateFileContent(3 * 1024 * 1024 + 987654);
            SigningServer.Android.IO.RandomAccessFile raf = CreateRaf(fullFileContent);
            Com.Android.Apksig.Util.DataSource rafDataSource = new Com.Android.Apksig.Internal.Util.FileChannelDataSource(raf.GetChannel());
            Com.Android.Apksig.Internal.Util.ByteArrayDataSink dataSink = new Com.Android.Apksig.Internal.Util.ByteArrayDataSink();
            int offset = 23456;
            int bytesToFeed = 2 * 1024 * 1024 + 12345;
            rafDataSource.Feed(offset, bytesToFeed, dataSink);
            sbyte[] expectedBytes = SigningServer.Android.Collections.Arrays.CopyOfRange(fullFileContent, offset, offset + bytesToFeed);
            sbyte[] resultBytes = SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSourceTest.GetDataSinkBytes(dataSink);
            AssertArrayEquals(expectedBytes, resultBytes);
        }
        
        internal static sbyte[] GetDataSinkBytes(Com.Android.Apksig.Internal.Util.ByteArrayDataSink dataSink)
        {
            SigningServer.Android.IO.ByteBuffer result = dataSink.GetByteBuffer(0, (int)dataSink.Size());
            sbyte[] resultBytes = new sbyte[result.Limit()];
            result.Get(resultBytes);
            return resultBytes;
        }
        
        internal static sbyte[] CreateFileContent(int fileSize)
        {
            sbyte[] fullFileContent = new sbyte[fileSize];
            for (int i = 0;i < fileSize;++i)
            {
                fullFileContent[i] = (sbyte)(i % 255);
            }
            return fullFileContent;
        }
        
        internal SigningServer.Android.IO.RandomAccessFile CreateRaf(sbyte[] content)
        {
            System.IO.FileInfo dataFile = temporaryFolder.NewFile();
            using(SigningServer.Android.IO.FileOutputStream fos = new SigningServer.Android.IO.FileOutputStream(dataFile))
            {
                fos.Write(content);
            }
            return new SigningServer.Android.IO.RandomAccessFile(dataFile, "r");
        }
        
    }
    
}
