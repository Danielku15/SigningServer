// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    /// <summary>
    /// Hexadecimal encoding where each byte is represented by two hexadecimal digits.
    /// </summary>
    public class HexEncoding
    {
        /// <summary>
        /// Hidden constructor to prevent instantiation.
        /// </summary>
        internal HexEncoding()
        {
        }
        
        internal static readonly char[] HEX_DIGITS = "0123456789abcdef".ToCharArray();
        
        /// <summary>
        /// Encodes the provided data as a hexadecimal string.
        /// </summary>
        public static string Encode(sbyte[] data)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(data, 0, data.Length);
        }
        
        /// <summary>
        /// Encodes the provided data as a hexadecimal string.
        /// </summary>
        public static string Encode(sbyte[] data, int offset, int len)
        {
            SigningServer.Android.Core.StringBuilder result = new SigningServer.Android.Core.StringBuilder(len * 2);
            for (int i = 0;i < len;i++)
            {
                sbyte b = data[offset + i];
                result.Append(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.HEX_DIGITS[(SigningServer.Android.TypeUtils.UnsignedRightShift(b, 4)) & 0x0f]);
                result.Append(SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.HEX_DIGITS[b & 0x0f]);
            }
            return result.ToString();
        }
        
        /// <summary>
        /// Encodes the provided data as a hexadecimal string.
        /// </summary>
        public static string Encode(SigningServer.Android.IO.ByteBuffer buf)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.Encode(buf.Array(), buf.ArrayOffset() + buf.Position(), buf.Remaining());
        }
        
        /// <summary>
        /// Decodes the provided hexadecimal string into an array of bytes.
        /// </summary>
        public static sbyte[] Decode(string encoded)
        {
            int resultLengthBytes = (encoded.Length() + 1) / 2;
            sbyte[] result = new sbyte[resultLengthBytes];
            int resultOffset = 0;
            int encodedCharOffset = 0;
            if ((encoded.Length() % 2) != 0)
            {
                result[resultOffset++] = (sbyte)SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.GetHexadecimalDigitValue(encoded.CharAt(encodedCharOffset));
                encodedCharOffset++;
            }
            for (int len = encoded.Length();encodedCharOffset < len;encodedCharOffset += 2)
            {
                result[resultOffset++] = (sbyte)((SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.GetHexadecimalDigitValue(encoded.CharAt(encodedCharOffset)) << 4) | SigningServer.Android.Com.Android.Apksig.Internal.Util.HexEncoding.GetHexadecimalDigitValue(encoded.CharAt(encodedCharOffset + 1)));
            }
            return result;
        }
        
        internal static int GetHexadecimalDigitValue(char c)
        {
            if ((c >= 'a') && (c <= 'f'))
            {
                return (c - 'a') + 0x0a;
            }
            else if ((c >= 'A') && (c <= 'F'))
            {
                return (c - 'A') + 0x0a;
            }
            else if ((c >= '0') && (c <= '9'))
            {
                return c - '0';
            }
            else 
            {
                throw new System.ArgumentException("Invalid hexadecimal digit at position : '" + c + "' (0x" + SigningServer.Android.Core.IntExtensions.ToHexString(c) + ")");
            }
        }
        
    }
    
}
