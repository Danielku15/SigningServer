// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Util
{
    /// <summary>
    /// Base class for testing implementations of {@link DataSink}. This class tests the contract of
    /// {@code DataSink}.
    /// 
    /// &lt;p&gt;To subclass, provide an implementation of {@link #createDataSink()} which returns the
    /// implementation of {@code DataSink} you want to test.
    /// </summary>
    public abstract class DataSinkTestBase<T>: SigningServer.Android.TestBase where T: DataSink
    {
        /// <summary>
        /// Returns a new {@link DataSink}.
        /// </summary>
        protected abstract SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink CreateDataSink();
        
        /// <summary>
        /// Returns the contents of the data sink.
        /// </summary>
        protected abstract SigningServer.Android.IO.ByteBuffer GetContents(T dataSink);
        
        [Test]
        public virtual void TestConsumeFromArray()
        {
            using(SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink c = CreateDataSink())
            {
                T sink = c.GetDataSink();
                sbyte[] input = "abcdefg".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.UTF_8);
                sink.Consume(input, 2, 3);
                sink.Consume(input, 0, 1);
                AssertContentsEquals("cdea", sink);
                sink.Consume(input, 0, 0);
                sink.Consume(input, 1, 0);
                sink.Consume(input, input.Length - 2, 0);
                sink.Consume(input, input.Length - 1, 0);
                sink.Consume(input, input.Length, 0);
                SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.AssertConsumeArrayThrowsIOOB(sink, input, -1, 0);
                SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.AssertConsumeArrayThrowsIOOB(sink, input, -1, 3);
                SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.AssertConsumeArrayThrowsIOOB(sink, input, 0, input.Length + 1);
                SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.AssertConsumeArrayThrowsIOOB(sink, input, input.Length - 2, 4);
                SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.AssertConsumeArrayThrowsIOOB(sink, input, input.Length + 1, 0);
                SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.AssertConsumeArrayThrowsIOOB(sink, input, input.Length + 1, 1);
                AssertContentsEquals("cdea", sink);
            }
        }
        
        [Test]
        public virtual void TestConsumeFromByteBuffer()
        {
            using(SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink c = CreateDataSink())
            {
                T sink = c.GetDataSink();
                SigningServer.Android.IO.ByteBuffer input = SigningServer.Android.IO.ByteBuffer.Wrap("abcdefg".GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.UTF_8));
                input.Position(2);
                input.Limit(5);
                sink.Consume(input);
                AssertEquals(5, input.Position());
                AssertEquals(5, input.Limit());
                input.Position(0);
                input.Limit(1);
                sink.Consume(input);
                AssertContentsEquals("cdea", sink);
                sink.Consume(input);
                AssertContentsEquals("cdea", sink);
                input = SigningServer.Android.IO.ByteBuffer.AllocateDirect(2);
                input.Put((sbyte)'X');
                input.Put((sbyte)'Z');
                input.Flip();
                sink.Consume(input);
                AssertContentsEquals("cdeaXZ", sink);
                AssertEquals(2, input.Position());
                AssertEquals(2, input.Limit());
                sink.Consume(input);
                AssertContentsEquals("cdeaXZ", sink);
            }
        }
        
        /// <summary>
        /// Returns the contents of the provided buffer as a string. The buffer's position and limit
        /// remain unchanged.
        /// </summary>
        internal static string ToString(SigningServer.Android.IO.ByteBuffer buf)
        {
            return SigningServer.Android.Com.Android.Apksig.Util.DataSourceTestBase.ToString(buf);
        }
        
        internal void AssertContentsEquals(string expectedContents, T sink)
        {
            SigningServer.Android.IO.ByteBuffer actual = GetContents(sink);
            AssertEquals(expectedContents, SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.ToString(actual));
        }
        
        internal static void AssertConsumeArrayThrowsIOOB(Com.Android.Apksig.Util.DataSink sink, sbyte[] arr, int offset, int length)
        {
            try
            {
                sink.Consume(arr, offset, length);
                Fail();
            }
            catch (System.IndexOutOfRangeException expected)
            {
            }
        }
        
        public class CloseableWithDataSink: SigningServer.Android.TestBase, System.IDisposable
        {
            internal readonly T mDataSink;
            
            internal readonly System.IDisposable mCloseable;
            
            internal CloseableWithDataSink(T dataSink, System.IDisposable closeable)
            {
                mDataSink = dataSink;
                mCloseable = closeable;
            }
            
            public static SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink Of(T dataSink)
            {
                return new SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink(dataSink, null);
            }
            
            public static SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink Of(T dataSink, System.IDisposable closeable)
            {
                return new SigningServer.Android.Com.Android.Apksig.Util.DataSinkTestBase<T>.CloseableWithDataSink(dataSink, closeable);
            }
            
            public virtual T GetDataSink()
            {
                return mDataSink;
            }
            
            public virtual System.IDisposable GetCloseable()
            {
                return mCloseable;
            }
            
            public void Dispose()
            {
                if (mCloseable != null)
                {
                    mCloseable.Dispose();
                }
            }
            
        }
        
    }
    
}
