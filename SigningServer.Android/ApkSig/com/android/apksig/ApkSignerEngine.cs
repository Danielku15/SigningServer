// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig
{
    /// <summary>
    /// APK signing logic which is independent of how input and output APKs are stored, parsed, and
    /// generated.
    /// 
    /// &lt;p&gt;&lt;h3&gt;Operating Model&lt;/h3&gt;
    /// 
    /// The abstract operating model is that there is an input APK which is being signed, thus producing
    /// an output APK. In reality, there may be just an output APK being built from scratch, or the input
    /// APK and the output APK may be the same file. Because this engine does not deal with reading and
    /// writing files, it can handle all of these scenarios.
    /// 
    /// &lt;p&gt;The engine is stateful and thus cannot be used for signing multiple APKs. However, once
    /// the engine signed an APK, the engine can be used to re-sign the APK after it has been modified.
    /// This may be more efficient than signing the APK using a new instance of the engine. See
    /// &lt;a href="#incremental"&gt;Incremental Operation&lt;/a&gt;.
    /// 
    /// &lt;p&gt;In the engine's operating model, a signed APK is produced as follows.
    /// &lt;ol&gt;
    /// &lt;li&gt;JAR entries to be signed are output,&lt;/li&gt;
    /// &lt;li&gt;JAR archive is signed using JAR signing, thus adding the so-called v1 signature to the
    ///     output,&lt;/li&gt;
    /// &lt;li&gt;JAR archive is signed using APK Signature Scheme v2, thus adding the so-called v2 signature
    ///     to the output.&lt;/li&gt;
    /// &lt;/ol&gt;
    /// 
    /// &lt;p&gt;The input APK may contain JAR entries which, depending on the engine's configuration, may or
    /// may not be output (e.g., existing signatures may need to be preserved or stripped) or which the
    /// engine will overwrite as part of signing. The engine thus offers {@link #inputJarEntry(String)}
    /// which tells the client whether the input JAR entry needs to be output. This avoids the need for
    /// the client to hard-code the aspects of APK signing which determine which parts of input must be
    /// ignored. Similarly, the engine offers {@link #inputApkSigningBlock(DataSource)} to help the
    /// client avoid dealing with preserving or stripping APK Signature Scheme v2 signature of the input
    /// APK.
    /// 
    /// &lt;p&gt;To use the engine to sign an input APK (or a collection of JAR entries), follow these
    /// steps:
    /// &lt;ol&gt;
    /// &lt;li&gt;Obtain a new instance of the engine -- engine instances are stateful and thus cannot be used
    ///     for signing multiple APKs.&lt;/li&gt;
    /// &lt;li&gt;Locate the input APK's APK Signing Block and provide it to
    ///     {@link #inputApkSigningBlock(DataSource)}.&lt;/li&gt;
    /// &lt;li&gt;For each JAR entry in the input APK, invoke {@link #inputJarEntry(String)} to determine
    ///     whether this entry should be output. The engine may request to inspect the entry.&lt;/li&gt;
    /// &lt;li&gt;For each output JAR entry, invoke {@link #outputJarEntry(String)} which may request to
    ///     inspect the entry.&lt;/li&gt;
    /// &lt;li&gt;Once all JAR entries have been output, invoke {@link #outputJarEntries()} which may request
    ///     that additional JAR entries are output. These entries comprise the output APK's JAR
    ///     signature.&lt;/li&gt;
    /// &lt;li&gt;Locate the ZIP Central Directory and ZIP End of Central Directory sections in the output and
    ///     invoke {@link #outputZipSections2(DataSource, DataSource, DataSource)} which may request that
    ///     an APK Signature Block is inserted before the ZIP Central Directory. The block contains the
    ///     output APK's APK Signature Scheme v2 signature.&lt;/li&gt;
    /// &lt;li&gt;Invoke {@link #outputDone()} to signal that the APK was output in full. The engine will
    ///     confirm that the output APK is signed.&lt;/li&gt;
    /// &lt;li&gt;Invoke {@link #close()} to signal that the engine will no longer be used. This lets the
    ///     engine free any resources it no longer needs.
    /// &lt;/ol&gt;
    /// 
    /// &lt;p&gt;Some invocations of the engine may provide the client with a task to perform. The client is
    /// expected to perform all requested tasks before proceeding to the next stage of signing. See
    /// documentation of each method about the deadlines for performing the tasks requested by the
    /// method.
    /// 
    /// &lt;p&gt;&lt;h3 id="incremental"&gt;Incremental Operation&lt;/h3&gt;&lt;/a&gt;
    /// 
    /// The engine supports incremental operation where a signed APK is produced, then modified and
    /// re-signed. This may be useful for IDEs, where an app is frequently re-signed after small changes
    /// by the developer. Re-signing may be more efficient than signing from scratch.
    /// 
    /// &lt;p&gt;To use the engine in incremental mode, keep notifying the engine of changes to the APK through
    /// {@link #inputApkSigningBlock(DataSource)}, {@link #inputJarEntry(String)},
    /// {@link #inputJarEntryRemoved(String)}, {@link #outputJarEntry(String)},
    /// and {@link #outputJarEntryRemoved(String)}, perform the tasks requested by the engine through
    /// these methods, and, when a new signed APK is desired, run through steps 5 onwards to re-sign the
    /// APK.
    /// 
    /// &lt;p&gt;&lt;h3&gt;Output-only Operation&lt;/h3&gt;
    /// 
    /// The engine's abstract operating model consists of an input APK and an output APK. However, it is
    /// possible to use the engine in output-only mode where the engine's {@code input...} methods are
    /// not invoked. In this mode, the engine has less control over output because it cannot request that
    /// some JAR entries are not output. Nevertheless, the engine will attempt to make the output APK
    /// signed and will report an error if cannot do so.
    /// 
    /// @see &lt;a href="https://source.android.com/security/apksigning/index.html"&gt;Application Signing&lt;/a&gt;
    /// </summary>
    public interface ApkSignerEngine: System.IDisposable
    {
        public void SetExecutor(SigningServer.Android.Com.Android.Apksig.Util.RunnablesExecutor executor);
        
        /// <summary>
        /// Initializes the signer engine with the data already present in the apk (if any). There
        /// might already be data that can be reused if the entries has not been changed.
        /// 
        /// @param manifestBytes
        /// @param entryNames
        /// @return set of entry names which were processed by the engine during the initialization, a
        ///         subset of entryNames
        /// </summary>
        public SigningServer.Android.Collections.Set<string> InitWith(sbyte[] manifestBytes, SigningServer.Android.Collections.Set<string> entryNames);
        
        /// <summary>
        /// Indicates to this engine that the input APK contains the provided APK Signing Block. The
        /// block may contain signatures of the input APK, such as APK Signature Scheme v2 signatures.
        /// 
        /// @param apkSigningBlock APK signing block of the input APK. The provided data source is
        ///        guaranteed to not be used by the engine after this method terminates.
        /// @throws IOException if an I/O error occurs while reading the APK Signing Block
        /// @throws ApkFormatException if the APK Signing Block is malformed
        /// @throws IllegalStateException if this engine is closed
        /// </summary>
        public void InputApkSigningBlock(SigningServer.Android.Com.Android.Apksig.Util.DataSource apkSigningBlock);
        
        /// <summary>
        /// Indicates to this engine that the specified JAR entry was encountered in the input APK.
        /// 
        /// &lt;p&gt;When an input entry is updated/changed, it's OK to not invoke
        /// {@link #inputJarEntryRemoved(String)} before invoking this method.
        /// 
        /// @return instructions about how to proceed with this entry
        /// @throws IllegalStateException if this engine is closed
        /// </summary>
        public SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InputJarEntryInstructions InputJarEntry(string entryName);
        
        /// <summary>
        /// Indicates to this engine that the specified JAR entry was output.
        /// 
        /// &lt;p&gt;It is unnecessary to invoke this method for entries added to output by this engine (e.g.,
        /// requested by {@link #outputJarEntries()}) provided the entries were output with exactly the
        /// data requested by the engine.
        /// 
        /// &lt;p&gt;When an already output entry is updated/changed, it's OK to not invoke
        /// {@link #outputJarEntryRemoved(String)} before invoking this method.
        /// 
        /// @return request to inspect the entry or {@code null} if the engine does not need to inspect
        ///         the entry. The request must be fulfilled before {@link #outputJarEntries()} is
        ///         invoked.
        /// @throws IllegalStateException if this engine is closed
        /// </summary>
        public SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InspectJarEntryRequest OutputJarEntry(string entryName);
        
        /// <summary>
        /// Indicates to this engine that the specified JAR entry was removed from the input. It's safe
        /// to invoke this for entries for which {@link #inputJarEntry(String)} hasn't been invoked.
        /// 
        /// @return output policy of this JAR entry. The policy indicates how this input entry affects
        ///         the output APK. The client of this engine should use this information to determine
        ///         how the removal of this input APK's JAR entry affects the output APK.
        /// @throws IllegalStateException if this engine is closed
        /// </summary>
        public SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InputJarEntryInstructions.OutputPolicy InputJarEntryRemoved(string entryName);
        
        /// <summary>
        /// Indicates to this engine that the specified JAR entry was removed from the output. It's safe
        /// to invoke this for entries for which {@link #outputJarEntry(String)} hasn't been invoked.
        /// 
        /// @throws IllegalStateException if this engine is closed
        /// </summary>
        public void OutputJarEntryRemoved(string entryName);
        
        /// <summary>
        /// Indicates to this engine that all JAR entries have been output.
        /// 
        /// @return request to add JAR signature to the output or {@code null} if there is no need to add
        ///         a JAR signature. The request will contain additional JAR entries to be output. The
        ///         request must be fulfilled before
        ///         {@link #outputZipSections2(DataSource, DataSource, DataSource)} is invoked.
        /// @throws ApkFormatException if the APK is malformed in a way which is preventing this engine
        ///         from producing a valid signature. For example, if the engine uses the provided
        ///         {@code META-INF/MANIFEST.MF} as a template and the file is malformed.
        /// @throws NoSuchAlgorithmException if a signature could not be generated because a required
        ///         cryptographic algorithm implementation is missing
        /// @throws InvalidKeyException if a signature could not be generated because a signing key is
        ///         not suitable for generating the signature
        /// @throws SignatureException if an error occurred while generating a signature
        /// @throws IllegalStateException if there are unfulfilled requests, such as to inspect some JAR
        ///         entries, or if the engine is closed
        /// </summary>
        public SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.OutputJarSignatureRequest OutputJarEntries();
        
        /// <summary>
        /// Indicates to this engine that the ZIP sections comprising the output APK have been output.
        /// 
        /// &lt;p&gt;The provided data sources are guaranteed to not be used by the engine after this method
        /// terminates.
        /// 
        /// @deprecated This is now superseded by {@link #outputZipSections2(DataSource, DataSource,
        /// DataSource)}.
        /// @param zipEntries the section of ZIP archive containing Local File Header records and data of
        ///        the ZIP entries. In a well-formed archive, this section starts at the start of the
        ///        archive and extends all the way to the ZIP Central Directory.
        /// @param zipCentralDirectory ZIP Central Directory section
        /// @param zipEocd ZIP End of Central Directory (EoCD) record
        /// @return request to add an APK Signing Block to the output or {@code null} if the output must
        ///         not contain an APK Signing Block. The request must be fulfilled before
        ///         {@link #outputDone()} is invoked.
        /// @throws IOException if an I/O error occurs while reading the provided ZIP sections
        /// @throws ApkFormatException if the provided APK is malformed in a way which prevents this
        ///         engine from producing a valid signature. For example, if the APK Signing Block
        ///         provided to the engine is malformed.
        /// @throws NoSuchAlgorithmException if a signature could not be generated because a required
        ///         cryptographic algorithm implementation is missing
        /// @throws InvalidKeyException if a signature could not be generated because a signing key is
        ///         not suitable for generating the signature
        /// @throws SignatureException if an error occurred while generating a signature
        /// @throws IllegalStateException if there are unfulfilled requests, such as to inspect some JAR
        ///         entries or to output JAR signature, or if the engine is closed
        /// </summary>
        [Obsolete]
        public SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.OutputApkSigningBlockRequest OutputZipSections(SigningServer.Android.Com.Android.Apksig.Util.DataSource zipEntries, SigningServer.Android.Com.Android.Apksig.Util.DataSource zipCentralDirectory, SigningServer.Android.Com.Android.Apksig.Util.DataSource zipEocd);
        
        /// <summary>
        /// Indicates to this engine that the ZIP sections comprising the output APK have been output.
        /// 
        /// &lt;p&gt;The provided data sources are guaranteed to not be used by the engine after this method
        /// terminates.
        /// 
        /// @param zipEntries the section of ZIP archive containing Local File Header records and data of
        ///        the ZIP entries. In a well-formed archive, this section starts at the start of the
        ///        archive and extends all the way to the ZIP Central Directory.
        /// @param zipCentralDirectory ZIP Central Directory section
        /// @param zipEocd ZIP End of Central Directory (EoCD) record
        /// @return request to add an APK Signing Block to the output or {@code null} if the output must
        ///         not contain an APK Signing Block. The request must be fulfilled before
        ///         {@link #outputDone()} is invoked.
        /// @throws IOException if an I/O error occurs while reading the provided ZIP sections
        /// @throws ApkFormatException if the provided APK is malformed in a way which prevents this
        ///         engine from producing a valid signature. For example, if the APK Signing Block
        ///         provided to the engine is malformed.
        /// @throws NoSuchAlgorithmException if a signature could not be generated because a required
        ///         cryptographic algorithm implementation is missing
        /// @throws InvalidKeyException if a signature could not be generated because a signing key is
        ///         not suitable for generating the signature
        /// @throws SignatureException if an error occurred while generating a signature
        /// @throws IllegalStateException if there are unfulfilled requests, such as to inspect some JAR
        ///         entries or to output JAR signature, or if the engine is closed
        /// </summary>
        public SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.OutputApkSigningBlockRequest2 OutputZipSections2(SigningServer.Android.Com.Android.Apksig.Util.DataSource zipEntries, SigningServer.Android.Com.Android.Apksig.Util.DataSource zipCentralDirectory, SigningServer.Android.Com.Android.Apksig.Util.DataSource zipEocd);
        
        /// <summary>
        /// Indicates to this engine that the signed APK was output.
        /// 
        /// &lt;p&gt;This does not change the output APK. The method helps the client confirm that the current
        /// output is signed.
        /// 
        /// @throws IllegalStateException if there are unfulfilled requests, such as to inspect some JAR
        ///         entries or to output signatures, or if the engine is closed
        /// </summary>
        public void OutputDone();
        
        /// <summary>
        /// Generates a V4 signature proto and write to output file.
        /// 
        /// @param data Input data to calculate a verity hash tree and hash root
        /// @param outputFile To store the serialized V4 Signature.
        /// @param ignoreFailures Whether any failures will be silently ignored.
        /// @throws InvalidKeyException if a signature could not be generated because a signing key is
        ///         not suitable for generating the signature
        /// @throws NoSuchAlgorithmException if a signature could not be generated because a required
        ///         cryptographic algorithm implementation is missing
        /// @throws SignatureException if an error occurred while generating a signature
        /// @throws IOException if protobuf fails to be serialized and written to file
        /// </summary>
        public void SignV4(SigningServer.Android.Com.Android.Apksig.Util.DataSource data, System.IO.FileInfo outputFile, bool ignoreFailures);
        
        /// <summary>
        /// Checks if the signing configuration provided to the engine is capable of creating a
        /// SourceStamp.
        /// </summary>
        public bool IsEligibleForSourceStamp();
        
        /// <summary>
        /// Generates the digest of the certificate used to sign the source stamp.
        /// </summary>
        public sbyte[] GenerateSourceStampCertificateDigest();
        
        /// <summary>
        /// Instructions about how to handle an input APK's JAR entry.
        /// 
        /// &lt;p&gt;The instructions indicate whether to output the entry (see {@link #getOutputPolicy()}) and
        /// may contain a request to inspect the entry (see {@link #getInspectJarEntryRequest()}), in
        /// which case the request must be fulfilled before {@link ApkSignerEngine#outputJarEntries()} is
        /// invoked.
        /// </summary>
        public class InputJarEntryInstructions
        {
            internal readonly SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InputJarEntryInstructions.OutputPolicy mOutputPolicy;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InspectJarEntryRequest mInspectJarEntryRequest;
            
            /// <summary>
            /// Constructs a new {@code InputJarEntryInstructions} instance with the provided entry
            /// output policy and without a request to inspect the entry.
            /// </summary>
            public InputJarEntryInstructions(SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InputJarEntryInstructions.OutputPolicy outputPolicy)
                : this (outputPolicy, null)
            {
                ;
            }
            
            /// <summary>
            /// Constructs a new {@code InputJarEntryInstructions} instance with the provided entry
            /// output mode and with the provided request to inspect the entry.
            /// 
            /// @param inspectJarEntryRequest request to inspect the entry or {@code null} if there's no
            ///        need to inspect the entry.
            /// </summary>
            public InputJarEntryInstructions(SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InputJarEntryInstructions.OutputPolicy outputPolicy, SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InspectJarEntryRequest inspectJarEntryRequest)
            {
                mOutputPolicy = outputPolicy;
                mInspectJarEntryRequest = inspectJarEntryRequest;
            }
            
            /// <summary>
            /// Returns the output policy for this entry.
            /// </summary>
            public virtual SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InputJarEntryInstructions.OutputPolicy GetOutputPolicy()
            {
                return mOutputPolicy;
            }
            
            /// <summary>
            /// Returns the request to inspect the JAR entry or {@code null} if there is no need to
            /// inspect the entry.
            /// </summary>
            public virtual SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.InspectJarEntryRequest GetInspectJarEntryRequest()
            {
                return mInspectJarEntryRequest;
            }
            
            /// <summary>
            /// Output policy for an input APK's JAR entry.
            /// </summary>
            public enum OutputPolicy
            {
                /// <summary>
                /// Entry must not be output.
                /// </summary>
                SKIP,
                /// <summary>
                /// Entry should be output.
                /// </summary>
                OUTPUT,
                /// <summary>
                /// Entry will be output by the engine. The client can thus ignore this input entry.
                /// </summary>
                OUTPUT_BY_ENGINE,
            }
            
        }
        
        /// <summary>
        /// Request to inspect the specified JAR entry.
        /// 
        /// &lt;p&gt;The entry's uncompressed data must be provided to the data sink returned by
        /// {@link #getDataSink()}. Once the entry's data has been provided to the sink, {@link #done()}
        /// must be invoked.
        /// </summary>
        public interface InspectJarEntryRequest
        {
            /// <summary>
            /// Returns the data sink into which the entry's uncompressed data should be sent.
            /// </summary>
            public SigningServer.Android.Com.Android.Apksig.Util.DataSink GetDataSink();
            
            /// <summary>
            /// Indicates that entry's data has been provided in full.
            /// </summary>
            public void Done();
            
            /// <summary>
            /// Returns the name of the JAR entry.
            /// </summary>
            public string GetEntryName();
            
        }
        
        /// <summary>
        /// Request to add JAR signature (aka v1 signature) to the output APK.
        /// 
        /// &lt;p&gt;Entries listed in {@link #getAdditionalJarEntries()} must be added to the output APK after
        /// which {@link #done()} must be invoked.
        /// </summary>
        public interface OutputJarSignatureRequest
        {
            /// <summary>
            /// Returns JAR entries that must be added to the output APK.
            /// </summary>
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.ApkSignerEngine.OutputJarSignatureRequest.JarEntry> GetAdditionalJarEntries();
            
            /// <summary>
            /// Indicates that the JAR entries contained in this request were added to the output APK.
            /// </summary>
            public void Done();
            
            /// <summary>
            /// JAR entry.
            /// </summary>
            public class JarEntry
            {
                internal readonly string mName;
                
                internal readonly sbyte[] mData;
                
                /// <summary>
                /// Constructs a new {@code JarEntry} with the provided name and data.
                /// 
                /// @param data uncompressed data of the entry. Changes to this array will not be
                ///        reflected in {@link #getData()}.
                /// </summary>
                public JarEntry(string name, sbyte[] data)
                {
                    mName = name;
                    mData = (sbyte[])data.Clone();
                }
                
                /// <summary>
                /// Returns the name of this ZIP entry.
                /// </summary>
                public virtual string GetName()
                {
                    return mName;
                }
                
                /// <summary>
                /// Returns the uncompressed data of this JAR entry.
                /// </summary>
                public virtual sbyte[] GetData()
                {
                    return (sbyte[])mData.Clone();
                }
                
            }
            
        }
        
        /// <summary>
        /// Request to add the specified APK Signing Block to the output APK. APK Signature Scheme v2
        /// signature(s) of the APK are contained in this block.
        /// 
        /// &lt;p&gt;The APK Signing Block returned by {@link #getApkSigningBlock()} must be placed into the
        /// output APK such that the block is immediately before the ZIP Central Directory, the offset of
        /// ZIP Central Directory in the ZIP End of Central Directory record must be adjusted
        /// accordingly, and then {@link #done()} must be invoked.
        /// 
        /// &lt;p&gt;If the output contains an APK Signing Block, that block must be replaced by the block
        /// contained in this request.
        /// 
        /// @deprecated This is now superseded by {@link OutputApkSigningBlockRequest2}.
        /// </summary>
        public interface OutputApkSigningBlockRequest
        {
            /// <summary>
            /// Returns the APK Signing Block.
            /// </summary>
            public sbyte[] GetApkSigningBlock();
            
            /// <summary>
            /// Indicates that the APK Signing Block was output as requested.
            /// </summary>
            public void Done();
            
        }
        
        /// <summary>
        /// Request to add the specified APK Signing Block to the output APK. APK Signature Scheme v2
        /// signature(s) of the APK are contained in this block.
        /// 
        /// &lt;p&gt;The APK Signing Block returned by {@link #getApkSigningBlock()} must be placed into the
        /// output APK such that the block is immediately before the ZIP Central Directory. Immediately
        /// before the APK Signing Block must be padding consists of the number of 0x00 bytes returned by
        /// {@link #getPaddingSizeBeforeApkSigningBlock()}. The offset of ZIP Central Directory in the
        /// ZIP End of Central Directory record must be adjusted accordingly, and then {@link #done()}
        /// must be invoked.
        /// 
        /// &lt;p&gt;If the output contains an APK Signing Block, that block must be replaced by the block
        /// contained in this request.
        /// </summary>
        public interface OutputApkSigningBlockRequest2
        {
            /// <summary>
            /// Returns the APK Signing Block.
            /// </summary>
            public sbyte[] GetApkSigningBlock();
            
            /// <summary>
            /// Indicates that the APK Signing Block was output as requested.
            /// </summary>
            public void Done();
            
            /// <summary>
            /// Returns the number of 0x00 bytes the caller must place immediately before APK Signing
            /// Block.
            /// </summary>
            public int GetPaddingSizeBeforeApkSigningBlock();
            
        }
        
    }
    
}
