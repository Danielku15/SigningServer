// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk
{
    /// <summary>
    /// XML pull style parser of Android binary XML resources, such as {@code AndroidManifest.xml}.
    /// 
    /// &lt;p&gt;For an input document, the parser outputs an event stream (see {@code EVENT_... constants} via
    /// {@link #getEventType()} and {@link #next()} methods. Additional information about the current
    /// event can be obtained via an assortment of getters, for example, {@link #getName()} or
    /// {@link #getAttributeNameResourceId(int)}.
    /// </summary>
    public class AndroidBinXmlParser
    {
        /// <summary>
        /// Event: start of document.
        /// </summary>
        public static readonly int EVENT_START_DOCUMENT = 1;
        
        /// <summary>
        /// Event: end of document.
        /// </summary>
        public static readonly int EVENT_END_DOCUMENT = 2;
        
        /// <summary>
        /// Event: start of an element.
        /// </summary>
        public static readonly int EVENT_START_ELEMENT = 3;
        
        /// <summary>
        /// Event: end of an document.
        /// </summary>
        public static readonly int EVENT_END_ELEMENT = 4;
        
        /// <summary>
        /// Attribute value type is not supported by this parser.
        /// </summary>
        public static readonly int VALUE_TYPE_UNSUPPORTED = 0;
        
        /// <summary>
        /// Attribute value is a string. Use {@link #getAttributeStringValue(int)} to obtain it.
        /// </summary>
        public const int VALUE_TYPE_STRING = 1;
        
        /// <summary>
        /// Attribute value is an integer. Use {@link #getAttributeIntValue(int)} to obtain it.
        /// </summary>
        public const int VALUE_TYPE_INT = 2;
        
        /// <summary>
        /// Attribute value is a resource reference. Use {@link #getAttributeIntValue(int)} to obtain it.
        /// </summary>
        public const int VALUE_TYPE_REFERENCE = 3;
        
        /// <summary>
        /// Attribute value is a boolean. Use {@link #getAttributeBooleanValue(int)} to obtain it.
        /// </summary>
        public const int VALUE_TYPE_BOOLEAN = 4;
        
        internal static readonly long NO_NAMESPACE = 0xffffffffL;
        
        internal readonly SigningServer.Android.IO.ByteBuffer mXml;
        
        internal SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool mStringPool;
        
        internal SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.ResourceMap mResourceMap;
        
        internal int mDepth;
        
        internal int mCurrentEvent = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_START_DOCUMENT;
        
        internal string mCurrentElementName;
        
        internal string mCurrentElementNamespace;
        
        internal int mCurrentElementAttributeCount;
        
        internal SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute> mCurrentElementAttributes;
        
        internal SigningServer.Android.IO.ByteBuffer mCurrentElementAttributesContents;
        
        internal int mCurrentElementAttrSizeBytes;
        
        /// <summary>
        /// Constructs a new parser for the provided document.
        /// </summary>
        public AndroidBinXmlParser(SigningServer.Android.IO.ByteBuffer xml)
        {
            xml.Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk resXmlChunk = null;
            while (xml.HasRemaining())
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk chunk = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.Get(xml);
                if (chunk == null)
                {
                    break;
                }
                if (chunk.GetType() == SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.TYPE_RES_XML)
                {
                    resXmlChunk = chunk;
                    break;
                }
            }
            if (resXmlChunk == null)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("No XML chunk in file");
            }
            mXml = resXmlChunk.GetContents();
        }
        
        /// <summary>
        /// Returns the depth of the current element. Outside of the root of the document the depth is
        /// {@code 0}. The depth is incremented by {@code 1} before each {@code start element} event and
        /// is decremented by {@code 1} after each {@code end element} event.
        /// </summary>
        public virtual int GetDepth()
        {
            return mDepth;
        }
        
        /// <summary>
        /// Returns the type of the current event. See {@code EVENT_...} constants.
        /// </summary>
        public virtual int GetEventType()
        {
            return mCurrentEvent;
        }
        
        /// <summary>
        /// Returns the local name of the current element or {@code null} if the current event does not
        /// pertain to an element.
        /// </summary>
        public virtual string GetName()
        {
            if ((mCurrentEvent != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_START_ELEMENT) && (mCurrentEvent != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_END_ELEMENT))
            {
                return null;
            }
            return mCurrentElementName;
        }
        
        /// <summary>
        /// Returns the namespace of the current element or {@code null} if the current event does not
        /// pertain to an element. Returns an empty string if the element is not associated with a
        /// namespace.
        /// </summary>
        public virtual string GetNamespace()
        {
            if ((mCurrentEvent != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_START_ELEMENT) && (mCurrentEvent != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_END_ELEMENT))
            {
                return null;
            }
            return mCurrentElementNamespace;
        }
        
        /// <summary>
        /// Returns the number of attributes of the element associated with the current event or
        /// {@code -1} if no element is associated with the current event.
        /// </summary>
        public virtual int GetAttributeCount()
        {
            if (mCurrentEvent != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_START_ELEMENT)
            {
                return -1;
            }
            return mCurrentElementAttributeCount;
        }
        
        /// <summary>
        /// Returns the resource ID corresponding to the name of the specified attribute of the current
        /// element or {@code 0} if the name is not associated with a resource ID.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual int GetAttributeNameResourceId(int index)
        {
            return GetAttribute(index).GetNameResourceId();
        }
        
        /// <summary>
        /// Returns the name of the specified attribute of the current element.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual string GetAttributeName(int index)
        {
            return GetAttribute(index).GetName();
        }
        
        /// <summary>
        /// Returns the name of the specified attribute of the current element or an empty string if
        /// the attribute is not associated with a namespace.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual string GetAttributeNamespace(int index)
        {
            return GetAttribute(index).GetNamespace();
        }
        
        /// <summary>
        /// Returns the value type of the specified attribute of the current element. See
        /// {@code VALUE_TYPE_...} constants.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual int GetAttributeValueType(int index)
        {
            int type = GetAttribute(index).GetValueType();
            switch (type)
            {
                case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_STRING:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.VALUE_TYPE_STRING;
                case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_DEC:
                case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_HEX:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.VALUE_TYPE_INT;
                case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_REFERENCE:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.VALUE_TYPE_REFERENCE;
                case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_BOOLEAN:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.VALUE_TYPE_BOOLEAN;
                default:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.VALUE_TYPE_UNSUPPORTED;
            }
        }
        
        /// <summary>
        /// Returns the integer value of the specified attribute of the current element. See
        /// {@code VALUE_TYPE_...} constants.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event.
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual int GetAttributeIntValue(int index)
        {
            return GetAttribute(index).GetIntValue();
        }
        
        /// <summary>
        /// Returns the boolean value of the specified attribute of the current element. See
        /// {@code VALUE_TYPE_...} constants.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event.
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual bool GetAttributeBooleanValue(int index)
        {
            return GetAttribute(index).GetBooleanValue();
        }
        
        /// <summary>
        /// Returns the string value of the specified attribute of the current element. See
        /// {@code VALUE_TYPE_...} constants.
        /// 
        /// @throws IndexOutOfBoundsException if the index is out of range or the current event is not a
        ///         {@code start element} event.
        /// @throws XmlParserException if a parsing error is occurred
        /// </summary>
        public virtual string GetAttributeStringValue(int index)
        {
            return GetAttribute(index).GetStringValue();
        }
        
        internal SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute GetAttribute(int index)
        {
            if (mCurrentEvent != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_START_ELEMENT)
            {
                throw new System.IndexOutOfRangeException("Current event not a START_ELEMENT");
            }
            if (index < 0)
            {
                throw new System.IndexOutOfRangeException("index must be >= 0");
            }
            if (index >= mCurrentElementAttributeCount)
            {
                throw new System.IndexOutOfRangeException("index must be <= attr count (" + mCurrentElementAttributeCount + ")");
            }
            ParseCurrentElementAttributesIfNotParsed();
            return mCurrentElementAttributes.Get(index);
        }
        
        /// <summary>
        /// Advances to the next parsing event and returns its type. See {@code EVENT_...} constants.
        /// </summary>
        public virtual int Next()
        {
            if (mCurrentEvent == SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_END_ELEMENT)
            {
                mDepth--;
            }
            while (mXml.HasRemaining())
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk chunk = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.Get(mXml);
                if (chunk == null)
                {
                    break;
                }
                switch (chunk.GetType())
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.TYPE_STRING_POOL:
                        if (mStringPool != null)
                        {
                            throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Multiple string pools not supported");
                        }
                        mStringPool = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool(chunk);
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.RES_XML_TYPE_START_ELEMENT:
                        {
                            if (mStringPool == null)
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Named element encountered before string pool");
                            }
                            SigningServer.Android.IO.ByteBuffer contents = chunk.GetContents();
                            if (contents.Remaining() < 20)
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Start element chunk too short. Need at least 20 bytes. Available: " + contents.Remaining() + " bytes");
                            }
                            long nsId = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(contents);
                            long nameId = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(contents);
                            int attrStartOffset = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(contents);
                            int attrSizeBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(contents);
                            int attrCount = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(contents);
                            long attrEndOffset = attrStartOffset + ((long)attrCount) * attrSizeBytes;
                            contents.Position(0);
                            if (attrStartOffset > contents.Remaining())
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Attributes start offset out of bounds: " + attrStartOffset + ", max: " + contents.Remaining());
                            }
                            if (attrEndOffset > contents.Remaining())
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Attributes end offset out of bounds: " + attrEndOffset + ", max: " + contents.Remaining());
                            }
                            mCurrentElementName = mStringPool.GetString(nameId);
                            mCurrentElementNamespace = (nsId == SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.NO_NAMESPACE) ? "" : mStringPool.GetString(nsId);
                            mCurrentElementAttributeCount = attrCount;
                            mCurrentElementAttributes = null;
                            mCurrentElementAttrSizeBytes = attrSizeBytes;
                            mCurrentElementAttributesContents = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.SliceFromTo(contents, attrStartOffset, attrEndOffset);
                            mDepth++;
                            mCurrentEvent = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_START_ELEMENT;
                            return mCurrentEvent;
                        }
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.RES_XML_TYPE_END_ELEMENT:
                        {
                            if (mStringPool == null)
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Named element encountered before string pool");
                            }
                            SigningServer.Android.IO.ByteBuffer contents = chunk.GetContents();
                            if (contents.Remaining() < 8)
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("End element chunk too short. Need at least 8 bytes. Available: " + contents.Remaining() + " bytes");
                            }
                            long nsId = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(contents);
                            long nameId = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(contents);
                            mCurrentElementName = mStringPool.GetString(nameId);
                            mCurrentElementNamespace = (nsId == SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.NO_NAMESPACE) ? "" : mStringPool.GetString(nsId);
                            mCurrentEvent = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_END_ELEMENT;
                            mCurrentElementAttributes = null;
                            mCurrentElementAttributesContents = null;
                            return mCurrentEvent;
                        }
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.RES_XML_TYPE_RESOURCE_MAP:
                        if (mResourceMap != null)
                        {
                            throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Multiple resource maps not supported");
                        }
                        mResourceMap = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.ResourceMap(chunk);
                        break;
                    default:
                        break;
                }
            }
            mCurrentEvent = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.EVENT_END_DOCUMENT;
            return mCurrentEvent;
        }
        
        internal void ParseCurrentElementAttributesIfNotParsed()
        {
            if (mCurrentElementAttributes != null)
            {
                return;
            }
            mCurrentElementAttributes = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute>(mCurrentElementAttributeCount);
            for (int i = 0;i < mCurrentElementAttributeCount;i++)
            {
                int startPosition = i * mCurrentElementAttrSizeBytes;
                SigningServer.Android.IO.ByteBuffer attr = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.SliceFromTo(mCurrentElementAttributesContents, startPosition, startPosition + mCurrentElementAttrSizeBytes);
                long nsId = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(attr);
                long nameId = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(attr);
                attr.Position(attr.Position() + 7);
                int valueType = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt8(attr);
                long valueData = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(attr);
                mCurrentElementAttributes.Add(new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute(nsId, nameId, valueType, (int)valueData, mStringPool, mResourceMap));
            }
        }
        
        internal class Attribute
        {
            internal const int TYPE_REFERENCE = 1;
            
            internal const int TYPE_STRING = 3;
            
            internal const int TYPE_INT_DEC = 0x10;
            
            internal const int TYPE_INT_HEX = 0x11;
            
            internal const int TYPE_INT_BOOLEAN = 0x12;
            
            internal readonly long mNsId;
            
            internal readonly long mNameId;
            
            internal readonly int mValueType;
            
            internal readonly int mValueData;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool mStringPool;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.ResourceMap mResourceMap;
            
            internal Attribute(long nsId, long nameId, int valueType, int valueData, SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool stringPool, SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.ResourceMap resourceMap)
            {
                mNsId = nsId;
                mNameId = nameId;
                mValueType = valueType;
                mValueData = valueData;
                mStringPool = stringPool;
                mResourceMap = resourceMap;
            }
            
            public virtual int GetNameResourceId()
            {
                return (mResourceMap != null) ? mResourceMap.GetResourceId(mNameId) : 0;
            }
            
            public virtual string GetName()
            {
                return mStringPool.GetString(mNameId);
            }
            
            public virtual string GetNamespace()
            {
                return (mNsId != SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.NO_NAMESPACE) ? mStringPool.GetString(mNsId) : "";
            }
            
            public virtual int GetValueType()
            {
                return mValueType;
            }
            
            public virtual int GetIntValue()
            {
                switch (mValueType)
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_REFERENCE:
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_DEC:
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_HEX:
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_BOOLEAN:
                        return mValueData;
                    default:
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Cannot coerce to int: value type " + mValueType);
                }
            }
            
            public virtual bool GetBooleanValue()
            {
                switch (mValueType)
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_BOOLEAN:
                        return mValueData != 0;
                    default:
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Cannot coerce to boolean: value type " + mValueType);
                }
            }
            
            public virtual string GetStringValue()
            {
                switch (mValueType)
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_STRING:
                        return mStringPool.GetString(mValueData & 0xffffffffL);
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_DEC:
                        return SigningServer.Android.Core.IntExtensions.ToString(mValueData);
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_HEX:
                        return "0x" + SigningServer.Android.Core.IntExtensions.ToHexString(mValueData);
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_INT_BOOLEAN:
                        return SigningServer.Android.Core.BoolExtensions.ToString(mValueData != 0);
                    case SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Attribute.TYPE_REFERENCE:
                        return "@" + SigningServer.Android.Core.IntExtensions.ToHexString(mValueData);
                    default:
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Cannot coerce to string: value type " + mValueType);
                }
            }
            
        }
        
        /// <summary>
        /// Chunk of a document. Each chunk is tagged with a type and consists of a header followed by
        /// contents.
        /// </summary>
        internal class Chunk
        {
            public const int TYPE_STRING_POOL = 1;
            
            public static readonly int TYPE_RES_XML = 3;
            
            public const int RES_XML_TYPE_START_ELEMENT = 0x0102;
            
            public const int RES_XML_TYPE_END_ELEMENT = 0x0103;
            
            public const int RES_XML_TYPE_RESOURCE_MAP = 0x0180;
            
            public static readonly int HEADER_MIN_SIZE_BYTES = 8;
            
            internal readonly int mType;
            
            internal readonly SigningServer.Android.IO.ByteBuffer mHeader;
            
            internal readonly SigningServer.Android.IO.ByteBuffer mContents;
            
            public Chunk(int type, SigningServer.Android.IO.ByteBuffer header, SigningServer.Android.IO.ByteBuffer contents)
            {
                mType = type;
                mHeader = header;
                mContents = contents;
            }
            
            public virtual SigningServer.Android.IO.ByteBuffer GetContents()
            {
                SigningServer.Android.IO.ByteBuffer result = mContents.Slice();
                result.Order(mContents.Order());
                return result;
            }
            
            public virtual SigningServer.Android.IO.ByteBuffer GetHeader()
            {
                SigningServer.Android.IO.ByteBuffer result = mHeader.Slice();
                result.Order(mHeader.Order());
                return result;
            }
            
            public virtual int GetType()
            {
                return mType;
            }
            
            /// <summary>
            /// Consumes the chunk located at the current position of the input and returns the chunk
            /// or {@code null} if there is no chunk left in the input.
            /// 
            /// @throws XmlParserException if the chunk is malformed
            /// </summary>
            public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk Get(SigningServer.Android.IO.ByteBuffer input)
            {
                if (input.Remaining() < SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.HEADER_MIN_SIZE_BYTES)
                {
                    input.Position(input.Limit());
                    return null;
                }
                int originalPosition = input.Position();
                int type = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(input);
                int headerSize = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(input);
                long chunkSize = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(input);
                long chunkRemaining = chunkSize - 8;
                if (chunkRemaining > input.Remaining())
                {
                    input.Position(input.Limit());
                    return null;
                }
                if (headerSize < SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.HEADER_MIN_SIZE_BYTES)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Malformed chunk: header too short: " + headerSize + " bytes");
                }
                else if (headerSize > chunkSize)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Malformed chunk: header too long: " + headerSize + " bytes. Chunk size: " + chunkSize + " bytes");
                }
                int contentStartPosition = originalPosition + headerSize;
                long chunkEndPosition = originalPosition + chunkSize;
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk chunk = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk(type, SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.SliceFromTo(input, originalPosition, contentStartPosition), SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.SliceFromTo(input, contentStartPosition, chunkEndPosition));
                input.Position((int)chunkEndPosition);
                return chunk;
            }
            
        }
        
        /// <summary>
        /// String pool of a document. Strings are referenced by their {@code 0}-based index in the pool.
        /// </summary>
        internal class StringPool
        {
            internal static readonly int FLAG_UTF8 = 1 << 8;
            
            internal readonly SigningServer.Android.IO.ByteBuffer mChunkContents;
            
            internal readonly SigningServer.Android.IO.ByteBuffer mStringsSection;
            
            internal readonly int mStringCount;
            
            internal readonly bool mUtf8Encoded;
            
            internal readonly SigningServer.Android.Collections.Map<int?, string> mCachedStrings = new SigningServer.Android.Collections.HashMap<int?, string>();
            
            /// <summary>
            /// Constructs a new string pool from the provided chunk.
            /// 
            /// @throws XmlParserException if a parsing error occurred
            /// </summary>
            public StringPool(SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk chunk)
            {
                SigningServer.Android.IO.ByteBuffer header = chunk.GetHeader();
                int headerSizeBytes = header.Remaining();
                header.Position(SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk.HEADER_MIN_SIZE_BYTES);
                if (header.Remaining() < 20)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("XML chunk's header too short. Required at least 20 bytes. Available: " + header.Remaining() + " bytes");
                }
                long stringCount = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(header);
                if (stringCount > SigningServer.Android.Core.IntExtensions.MaxValue)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Too many strings: " + stringCount);
                }
                mStringCount = (int)stringCount;
                long styleCount = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(header);
                if (styleCount > SigningServer.Android.Core.IntExtensions.MaxValue)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Too many styles: " + styleCount);
                }
                long flags = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(header);
                long stringsStartOffset = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(header);
                long stylesStartOffset = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(header);
                SigningServer.Android.IO.ByteBuffer contents = chunk.GetContents();
                if (mStringCount > 0)
                {
                    int stringsSectionStartOffsetInContents = (int)(stringsStartOffset - headerSizeBytes);
                    int stringsSectionEndOffsetInContents;
                    if (styleCount > 0)
                    {
                        if (stylesStartOffset < stringsStartOffset)
                        {
                            throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Styles offset (" + stylesStartOffset + ") < strings offset (" + stringsStartOffset + ")");
                        }
                        stringsSectionEndOffsetInContents = (int)(stylesStartOffset - headerSizeBytes);
                    }
                    else 
                    {
                        stringsSectionEndOffsetInContents = contents.Remaining();
                    }
                    mStringsSection = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.SliceFromTo(contents, stringsSectionStartOffsetInContents, stringsSectionEndOffsetInContents);
                }
                else 
                {
                    mStringsSection = SigningServer.Android.IO.ByteBuffer.Allocate(0);
                }
                mUtf8Encoded = (flags & SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool.FLAG_UTF8) != 0;
                mChunkContents = contents;
            }
            
            /// <summary>
            /// Returns the string located at the specified {@code 0}-based index in this pool.
            /// 
            /// @throws XmlParserException if the string does not exist or cannot be decoded
            /// </summary>
            public virtual string GetString(long index)
            {
                if (index < 0)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Unsuported string index: " + index);
                }
                else if (index >= mStringCount)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Unsuported string index: " + index + ", max: " + (mStringCount - 1));
                }
                int idx = (int)index;
                string result = mCachedStrings.Get(idx);
                if (result != null)
                {
                    return result;
                }
                long offsetInStringsSection = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt32(mChunkContents, idx * 4);
                if (offsetInStringsSection >= mStringsSection.Capacity())
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("Offset of string idx " + idx + " out of bounds: " + offsetInStringsSection + ", max: " + (mStringsSection.Capacity() - 1));
                }
                mStringsSection.Position((int)offsetInStringsSection);
                result = (mUtf8Encoded) ? SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool.GetLengthPrefixedUtf8EncodedString(mStringsSection) : SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.StringPool.GetLengthPrefixedUtf16EncodedString(mStringsSection);
                mCachedStrings.Put(idx, result);
                return result;
            }
            
            internal static string GetLengthPrefixedUtf16EncodedString(SigningServer.Android.IO.ByteBuffer encoded)
            {
                int lengthChars = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(encoded);
                if ((lengthChars & 0x8000) != 0)
                {
                    lengthChars = ((lengthChars & 0x7fff) << 16) | SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt16(encoded);
                }
                if (lengthChars > SigningServer.Android.Core.IntExtensions.MaxValue / 2)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("String too long: " + lengthChars + " uint16s");
                }
                int lengthBytes = lengthChars * 2;
                sbyte[] arr;
                int arrOffset;
                if (encoded.HasArray())
                {
                    arr = encoded.Array();
                    arrOffset = encoded.ArrayOffset() + encoded.Position();
                    encoded.Position(encoded.Position() + lengthBytes);
                }
                else 
                {
                    arr = new sbyte[lengthBytes];
                    arrOffset = 0;
                    encoded.Get(arr);
                }
                if ((arr[arrOffset + lengthBytes] != 0) || (arr[arrOffset + lengthBytes + 1] != 0))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("UTF-16 encoded form of string not NULL terminated");
                }
                try
                {
                    return SigningServer.Android.Core.StringExtensions.Create(arr, arrOffset, lengthBytes, "UTF-16LE");
                }
                catch (SigningServer.Android.IO.UnsupportedEncodingException e)
                {
                    throw new SigningServer.Android.Core.RuntimeException("UTF-16LE character encoding not supported", e);
                }
            }
            
            internal static string GetLengthPrefixedUtf8EncodedString(SigningServer.Android.IO.ByteBuffer encoded)
            {
                int lengthBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt8(encoded);
                if ((lengthBytes & 0x80) != 0)
                {
                    lengthBytes = ((lengthBytes & 0x7f) << 8) | SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt8(encoded);
                }
                lengthBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt8(encoded);
                if ((lengthBytes & 0x80) != 0)
                {
                    lengthBytes = ((lengthBytes & 0x7f) << 8) | SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.GetUnsignedInt8(encoded);
                }
                sbyte[] arr;
                int arrOffset;
                if (encoded.HasArray())
                {
                    arr = encoded.Array();
                    arrOffset = encoded.ArrayOffset() + encoded.Position();
                    encoded.Position(encoded.Position() + lengthBytes);
                }
                else 
                {
                    arr = new sbyte[lengthBytes];
                    arrOffset = 0;
                    encoded.Get(arr);
                }
                if (arr[arrOffset + lengthBytes] != 0)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.XmlParserException("UTF-8 encoded form of string not NULL terminated");
                }
                try
                {
                    return SigningServer.Android.Core.StringExtensions.Create(arr, arrOffset, lengthBytes, "UTF-8");
                }
                catch (SigningServer.Android.IO.UnsupportedEncodingException e)
                {
                    throw new SigningServer.Android.Core.RuntimeException("UTF-8 character encoding not supported", e);
                }
            }
            
        }
        
        /// <summary>
        /// Resource map of a document. Resource IDs are referenced by their {@code 0}-based index in the
        /// map.
        /// </summary>
        internal class ResourceMap
        {
            internal readonly SigningServer.Android.IO.ByteBuffer mChunkContents;
            
            internal readonly int mEntryCount;
            
            /// <summary>
            /// Constructs a new resource map from the provided chunk.
            /// 
            /// @throws XmlParserException if a parsing error occurred
            /// </summary>
            public ResourceMap(SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.Chunk chunk)
            {
                mChunkContents = chunk.GetContents().Slice();
                mChunkContents.Order(chunk.GetContents().Order());
                mEntryCount = mChunkContents.Remaining() / 4;
            }
            
            /// <summary>
            /// Returns the resource ID located at the specified {@code 0}-based index in this pool or
            /// {@code 0} if the index is out of range.
            /// </summary>
            public virtual int GetResourceId(long index)
            {
                if ((index < 0) || (index >= mEntryCount))
                {
                    return 0;
                }
                int idx = (int)index;
                return mChunkContents.GetInt(idx * 4);
            }
            
        }
        
        /// <summary>
        /// Returns new byte buffer whose content is a shared subsequence of this buffer's content
        /// between the specified start (inclusive) and end (exclusive) positions. As opposed to
        /// {@link ByteBuffer#slice()}, the returned buffer's byte order is the same as the source
        /// buffer's byte order.
        /// </summary>
        internal static SigningServer.Android.IO.ByteBuffer SliceFromTo(SigningServer.Android.IO.ByteBuffer source, long start, long end)
        {
            if (start < 0)
            {
                throw new System.ArgumentException("start: " + start);
            }
            if (end < start)
            {
                throw new System.ArgumentException("end < start: " + end + " < " + start);
            }
            int capacity = source.Capacity();
            if (end > source.Capacity())
            {
                throw new System.ArgumentException("end > capacity: " + end + " > " + capacity);
            }
            return SigningServer.Android.Com.Android.Apksig.Internal.Apk.AndroidBinXmlParser.SliceFromTo(source, (int)start, (int)end);
        }
        
        /// <summary>
        /// Returns new byte buffer whose content is a shared subsequence of this buffer's content
        /// between the specified start (inclusive) and end (exclusive) positions. As opposed to
        /// {@link ByteBuffer#slice()}, the returned buffer's byte order is the same as the source
        /// buffer's byte order.
        /// </summary>
        internal static SigningServer.Android.IO.ByteBuffer SliceFromTo(SigningServer.Android.IO.ByteBuffer source, int start, int end)
        {
            if (start < 0)
            {
                throw new System.ArgumentException("start: " + start);
            }
            if (end < start)
            {
                throw new System.ArgumentException("end < start: " + end + " < " + start);
            }
            int capacity = source.Capacity();
            if (end > source.Capacity())
            {
                throw new System.ArgumentException("end > capacity: " + end + " > " + capacity);
            }
            int originalLimit = source.Limit();
            int originalPosition = source.Position();
            try
            {
                source.Position(0);
                source.Limit(end);
                source.Position(start);
                SigningServer.Android.IO.ByteBuffer result = source.Slice();
                result.Order(source.Order());
                return result;
            }
            finally
            {
                source.Position(0);
                source.Limit(originalLimit);
                source.Position(originalPosition);
            }
        }
        
        internal static int GetUnsignedInt8(SigningServer.Android.IO.ByteBuffer buffer)
        {
            return buffer.Get() & 0xff;
        }
        
        internal static int GetUnsignedInt16(SigningServer.Android.IO.ByteBuffer buffer)
        {
            return buffer.GetShort() & 0xffff;
        }
        
        internal static long GetUnsignedInt32(SigningServer.Android.IO.ByteBuffer buffer)
        {
            return buffer.GetInt() & 0xffffffffL;
        }
        
        internal static long GetUnsignedInt32(SigningServer.Android.IO.ByteBuffer buffer, int position)
        {
            return buffer.GetInt(position) & 0xffffffffL;
        }
        
        /// <summary>
        /// Indicates that an error occurred while parsing a document.
        /// </summary>
        public class XmlParserException: System.Exception
        {
            internal static readonly long serialVersionUID = 1L;
            
            public XmlParserException(string message)
                : base (message)
            {
                ;
            }
            
            public XmlParserException(string message, System.Exception cause)
                : base (message, cause)
            {
                ;
            }
            
        }
        
    }
    
}
