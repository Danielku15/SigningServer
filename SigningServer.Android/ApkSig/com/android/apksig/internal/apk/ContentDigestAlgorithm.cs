// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk
{
    /// <summary>
    /// APK Signature Scheme v2 content digest algorithm.
    /// </summary>
    public class ContentDigestAlgorithm
    {
        public static readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm CHUNKED_SHA256 = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm(1, "SHA-256", 256 / 8, 0);
        
        public const int CHUNKED_SHA256_CASE = 0;
        
        public static readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm CHUNKED_SHA512 = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm(2, "SHA-512", 512 / 8, 1);
        
        public const int CHUNKED_SHA512_CASE = 1;
        
        public static readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm VERITY_CHUNKED_SHA256 = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm(3, "SHA-256", 256 / 8, 2);
        
        public const int VERITY_CHUNKED_SHA256_CASE = 2;
        
        public static readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm SHA256 = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm(4, "SHA-256", 256 / 8, 3);
        
        public const int SHA256_CASE = 3;
        
        internal readonly int mId;
        
        internal readonly string mJcaMessageDigestAlgorithm;
        
        internal readonly int mChunkDigestOutputSizeBytes;
        
        internal ContentDigestAlgorithm(int id, string jcaMessageDigestAlgorithm, int chunkDigestOutputSizeBytes, int caseValue)
        {
            mId = id;
            mJcaMessageDigestAlgorithm = jcaMessageDigestAlgorithm;
            mChunkDigestOutputSizeBytes = chunkDigestOutputSizeBytes;
            Case = caseValue;
        }
        
        /// <summary>
        /// Returns the ID of the digest algorithm used on the APK.
        /// </summary>
        public virtual int GetId()
        {
            return mId;
        }
        
        /// <summary>
        /// Returns the {@link java.security.MessageDigest} algorithm used for computing digests of
        /// chunks by this content digest algorithm.
        /// </summary>
        public virtual string GetJcaMessageDigestAlgorithm()
        {
            return mJcaMessageDigestAlgorithm;
        }
        
        /// <summary>
        /// Returns the size (in bytes) of the digest of a chunk of content.
        /// </summary>
        public virtual int GetChunkDigestOutputSizeBytes()
        {
            return mChunkDigestOutputSizeBytes;
        }
        
        public int Case
        {
            get;
        }
        
        internal static readonly SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm[] _values = {CHUNKED_SHA256, CHUNKED_SHA512, VERITY_CHUNKED_SHA256, SHA256};
        
        public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm[] Values()
        {
            return _values;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(obj, this))
            {
                return true;
            }

            if (!(obj is ContentDigestAlgorithm d))
            {
                return false;
            }

            return Case == d.Case;
        }

        public override int GetHashCode()
        {
            return Case;
        }
    }
    
}
