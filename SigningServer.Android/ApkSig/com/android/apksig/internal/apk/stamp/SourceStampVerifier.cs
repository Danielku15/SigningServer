// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp
{
    /// <summary>
    /// Source Stamp verifier.
    /// 
    /// &lt;p&gt;SourceStamp improves traceability of apps with respect to unauthorized distribution.
    /// 
    /// &lt;p&gt;The stamp is part of the APK that is protected by the signing block.
    /// 
    /// &lt;p&gt;The APK contents hash is signed using the stamp key, and is saved as part of the signing
    /// block.
    /// </summary>
    internal class SourceStampVerifier
    {
        /// <summary>
        /// Hidden constructor to prevent instantiation.
        /// </summary>
        internal SourceStampVerifier()
        {
        }
        
        /// <summary>
        /// Parses the SourceStamp block and populates the {@code result}.
        /// 
        /// &lt;p&gt;This verifies signatures over digest provided.
        /// 
        /// &lt;p&gt;This method adds one or more errors to the {@code result} if a verification error is
        /// expected to be encountered on an Android platform version in the {@code [minSdkVersion,
        /// maxSdkVersion]} range.
        /// </summary>
        public static void VerifyV1SourceStamp(SigningServer.Android.IO.ByteBuffer sourceStampBlockData, SigningServer.Android.Security.Cert.CertificateFactory certFactory, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo result, sbyte[] apkDigest, sbyte[] sourceStampCertificateDigest, int minSdkVersion, int maxSdkVersion)
        {
            SigningServer.Android.Security.Cert.X509Certificate sourceStampCertificate = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.VerifySourceStampCertificate(sourceStampBlockData, certFactory, sourceStampCertificateDigest, result);
            if (result.ContainsWarnings() || result.ContainsErrors())
            {
                return;
            }
            SigningServer.Android.IO.ByteBuffer apkDigestSignatures = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(sourceStampBlockData);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.VerifySourceStampSignature(
                apkDigest
                , 
                minSdkVersion
                , 
                maxSdkVersion
                , 
                sourceStampCertificate
                , 
                apkDigestSignatures
                , 
                result
            
            );
        }
        
        /// <summary>
        /// Parses the SourceStamp block and populates the {@code result}.
        /// 
        /// &lt;p&gt;This verifies signatures over digest of multiple signature schemes provided.
        /// 
        /// &lt;p&gt;This method adds one or more errors to the {@code result} if a verification error is
        /// expected to be encountered on an Android platform version in the {@code [minSdkVersion,
        /// maxSdkVersion]} range.
        /// </summary>
        public static void VerifyV2SourceStamp(SigningServer.Android.IO.ByteBuffer sourceStampBlockData, SigningServer.Android.Security.Cert.CertificateFactory certFactory, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo result, SigningServer.Android.Collections.Map<int, sbyte[]> signatureSchemeApkDigests, sbyte[] sourceStampCertificateDigest, int minSdkVersion, int maxSdkVersion)
        {
            SigningServer.Android.Security.Cert.X509Certificate sourceStampCertificate = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.VerifySourceStampCertificate(sourceStampBlockData, certFactory, sourceStampCertificateDigest, result);
            if (result.ContainsWarnings() || result.ContainsErrors())
            {
                return;
            }
            SigningServer.Android.IO.ByteBuffer signedSignatureSchemes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(sourceStampBlockData);
            SigningServer.Android.Collections.Map<int?, SigningServer.Android.IO.ByteBuffer> signedSignatureSchemeData = new SigningServer.Android.Collections.HashMap<int?, SigningServer.Android.IO.ByteBuffer>();
            while (signedSignatureSchemes.HasRemaining())
            {
                SigningServer.Android.IO.ByteBuffer signedSignatureScheme = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(signedSignatureSchemes);
                int signatureSchemeId = signedSignatureScheme.GetInt();
                SigningServer.Android.IO.ByteBuffer apkDigestSignatures = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(signedSignatureScheme);
                signedSignatureSchemeData.Put(signatureSchemeId, apkDigestSignatures);
            }
            foreach (SigningServer.Android.Collections.MapEntry<int, sbyte[]> signatureSchemeApkDigest in signatureSchemeApkDigests.EntrySet())
            {
                if (!signedSignatureSchemeData.ContainsKey(signatureSchemeApkDigest.GetKey()))
                {
                    result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_NO_SIGNATURE);
                    return;
                }
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.VerifySourceStampSignature(
                    signatureSchemeApkDigest.GetValue()
                    , 
                    minSdkVersion
                    , 
                    maxSdkVersion
                    , 
                    sourceStampCertificate
                    , 
                    signedSignatureSchemeData.Get(signatureSchemeApkDigest.GetKey())
                    , 
                    result
                
                );
                if (result.ContainsWarnings() || result.ContainsErrors())
                {
                    return;
                }
            }
            if (sourceStampBlockData.HasRemaining())
            {
                SigningServer.Android.IO.ByteBuffer stampAttributeData = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(sourceStampBlockData);
                SigningServer.Android.IO.ByteBuffer stampAttributeDataSignatures = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(sourceStampBlockData);
                sbyte[] stampAttributeBytes = new sbyte[stampAttributeData.Remaining()];
                stampAttributeData.Get(stampAttributeBytes);
                stampAttributeData.Flip();
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.VerifySourceStampSignature(
                    stampAttributeBytes
                    , 
                    minSdkVersion
                    , 
                    maxSdkVersion
                    , 
                    sourceStampCertificate
                    , 
                    stampAttributeDataSignatures
                    , 
                    result
                
                );
                if (result.ContainsErrors() || result.ContainsWarnings())
                {
                    return;
                }
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.ParseStampAttributes(stampAttributeData, sourceStampCertificate, result);
            }
        }
        
        internal static SigningServer.Android.Security.Cert.X509Certificate VerifySourceStampCertificate(SigningServer.Android.IO.ByteBuffer sourceStampBlockData, SigningServer.Android.Security.Cert.CertificateFactory certFactory, sbyte[] sourceStampCertificateDigest, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo result)
        {
            sbyte[] sourceStampEncodedCertificate = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.ReadLengthPrefixedByteArray(sourceStampBlockData);
            SigningServer.Android.Security.Cert.X509Certificate sourceStampCertificate;
            try
            {
                sourceStampCertificate = (SigningServer.Android.Security.Cert.X509Certificate)certFactory.GenerateCertificate(new SigningServer.Android.IO.ByteArrayInputStream(sourceStampEncodedCertificate));
            }
            catch (SigningServer.Android.Security.Cert.CertificateException e)
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_MALFORMED_CERTIFICATE, e);
                return null;
            }
            sourceStampCertificate = new SigningServer.Android.Com.Android.Apksig.Internal.Util.GuaranteedEncodedFormX509Certificate(sourceStampCertificate, sourceStampEncodedCertificate);
            result.certs.Add(sourceStampCertificate);
            SigningServer.Android.Security.MessageDigest messageDigest = SigningServer.Android.Security.MessageDigest.GetInstance("SHA-256");
            messageDigest.Update(sourceStampEncodedCertificate);
            sbyte[] sourceStampBlockCertificateDigest = messageDigest.Digest();
            if (!SigningServer.Android.Collections.Arrays.Equals(sourceStampCertificateDigest, sourceStampBlockCertificateDigest))
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_CERTIFICATE_MISMATCH_BETWEEN_SIGNATURE_BLOCK_AND_APK, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.ToHex(sourceStampBlockCertificateDigest), SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.ToHex(sourceStampCertificateDigest));
                return null;
            }
            return sourceStampCertificate;
        }
        
        internal static void VerifySourceStampSignature(sbyte[] data, int minSdkVersion, int maxSdkVersion, SigningServer.Android.Security.Cert.X509Certificate sourceStampCertificate, SigningServer.Android.IO.ByteBuffer signatures, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo result)
        {
            int signatureCount = 0;
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSupportedSignature> supportedSignatures = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSupportedSignature>(1);
            while (signatures.HasRemaining())
            {
                signatureCount++;
                try
                {
                    SigningServer.Android.IO.ByteBuffer signature = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(signatures);
                    int sigAlgorithmId = signature.GetInt();
                    sbyte[] sigBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.ReadLengthPrefixedByteArray(signature);
                    SigningServer.Android.Com.Android.Apksig.Internal.Apk.SignatureAlgorithm signatureAlgorithm = SigningServer.Android.Com.Android.Apksig.Internal.Apk.SignatureAlgorithm.FindById(sigAlgorithmId);
                    if (signatureAlgorithm == null)
                    {
                        result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_UNKNOWN_SIG_ALGORITHM, sigAlgorithmId);
                        continue;
                    }
                    supportedSignatures.Add(new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSupportedSignature(signatureAlgorithm, sigBytes));
                }
                catch (System.Exception e) when ( e is SigningServer.Android.Com.Android.Apksig.Apk.ApkFormatException || e is SigningServer.Android.IO.BufferUnderflowException)
                {
                    result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_MALFORMED_SIGNATURE, signatureCount);
                    return;
                }
            }
            if (supportedSignatures.IsEmpty())
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_NO_SIGNATURE);
                return;
            }
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSupportedSignature> signaturesToVerify;
            try
            {
                signaturesToVerify = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetSignaturesToVerify(supportedSignatures, minSdkVersion, maxSdkVersion, true);
            }
            catch (SigningServer.Android.Com.Android.Apksig.Internal.Apk.NoApkSupportedSignaturesException e)
            {
                SigningServer.Android.Core.StringBuilder signatureAlgorithms = new SigningServer.Android.Core.StringBuilder();
                foreach (SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSupportedSignature supportedSignature in supportedSignatures)
                {
                    if (signatureAlgorithms.Length() > 0)
                    {
                        signatureAlgorithms.Append(", ");
                    }
                    signatureAlgorithms.Append(supportedSignature.algorithm);
                }
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_NO_SUPPORTED_SIGNATURE, signatureAlgorithms.ToString(), e);
                return;
            }
            foreach (SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSupportedSignature signature in signaturesToVerify)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.SignatureAlgorithm signatureAlgorithm = signature.algorithm;
                string jcaSignatureAlgorithm = signatureAlgorithm.GetJcaSignatureAlgorithmAndParams().GetFirst();
                SigningServer.Android.Security.Spec.AlgorithmParameterSpec jcaSignatureAlgorithmParams = signatureAlgorithm.GetJcaSignatureAlgorithmAndParams().GetSecond();
                SigningServer.Android.Security.PublicKey publicKey = sourceStampCertificate.GetPublicKey();
                try
                {
                    SigningServer.Android.Security.Signature sig = SigningServer.Android.Security.Signature.GetInstance(jcaSignatureAlgorithm);
                    sig.InitVerify(publicKey);
                    if (jcaSignatureAlgorithmParams != null)
                    {
                        sig.SetParameter(jcaSignatureAlgorithmParams);
                    }
                    sig.Update(data);
                    sbyte[] sigBytes = signature.signature;
                    if (!sig.Verify(sigBytes))
                    {
                        result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_DID_NOT_VERIFY, signatureAlgorithm);
                        return;
                    }
                }
                catch (System.Exception e) when ( e is SigningServer.Android.Security.InvalidKeyException || e is SigningServer.Android.Security.InvalidAlgorithmParameterException || e is SigningServer.Android.Security.SignatureException || e is SigningServer.Android.Security.NoSuchAlgorithmException)
                {
                    result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_VERIFY_EXCEPTION, signatureAlgorithm, e);
                    return;
                }
            }
        }
        
        internal static void ParseStampAttributes(SigningServer.Android.IO.ByteBuffer stampAttributeData, SigningServer.Android.Security.Cert.X509Certificate sourceStampCertificate, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo result)
        {
            SigningServer.Android.IO.ByteBuffer stampAttributes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(stampAttributeData);
            int stampAttributeCount = 0;
            while (stampAttributes.HasRemaining())
            {
                stampAttributeCount++;
                try
                {
                    SigningServer.Android.IO.ByteBuffer attribute = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(stampAttributes);
                    int id = attribute.GetInt();
                    sbyte[] value = SigningServer.Android.Com.Android.Apksig.Internal.Util.ByteBufferUtils.ToByteArray(attribute);
                    if (id == SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.PROOF_OF_ROTATION_ATTR_ID)
                    {
                        SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.ReadStampCertificateLineage(value, sourceStampCertificate, result);
                    }
                    else 
                    {
                        result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_UNKNOWN_ATTRIBUTE, id);
                    }
                }
                catch (System.Exception e) when ( e is SigningServer.Android.Com.Android.Apksig.Apk.ApkFormatException || e is SigningServer.Android.IO.BufferUnderflowException)
                {
                    result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_MALFORMED_ATTRIBUTE, stampAttributeCount);
                    return;
                }
            }
        }
        
        internal static void ReadStampCertificateLineage(sbyte[] lineageBytes, SigningServer.Android.Security.Cert.X509Certificate sourceStampCertificate, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo result)
        {
            try
            {
                SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampCertificateLineage.SigningCertificateNode> nodes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampCertificateLineage.ReadSigningCertificateLineage(SigningServer.Android.IO.ByteBuffer.Wrap(lineageBytes).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN));
                for (int i = 0;i < nodes.Size();i++)
                {
                    result.certificateLineage.Add(nodes.Get(i).signingCert);
                }
                if (!sourceStampCertificate.Equals(result.certificateLineage.Get(result.certificateLineage.Size() - 1)))
                {
                    result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_POR_CERT_MISMATCH);
                }
            }
            catch (SigningServer.Android.Core.SecurityException e)
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_POR_DID_NOT_VERIFY);
            }
            catch (System.ArgumentException e)
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_POR_CERT_MISMATCH);
            }
            catch (System.Exception e)
            {
                result.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_MALFORMED_LINEAGE);
            }
        }
        
    }
    
}
