// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp
{
    /// <summary>
    /// SourceStamp signer.
    /// 
    /// &lt;p&gt;SourceStamp improves traceability of apps with respect to unauthorized distribution.
    /// 
    /// &lt;p&gt;The stamp is part of the APK that is protected by the signing block.
    /// 
    /// &lt;p&gt;The APK contents hash is signed using the stamp key, and is saved as part of the signing
    /// block.
    /// 
    /// &lt;p&gt;V1 of the source stamp allows signing the digest of at most one signature scheme only.
    /// </summary>
    public abstract class V1SourceStampSigner
    {
        public static readonly int V1_SOURCE_STAMP_BLOCK_ID = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.V1_SOURCE_STAMP_BLOCK_ID;
        
        /// <summary>
        /// Hidden constructor to prevent instantiation.
        /// </summary>
        internal V1SourceStampSigner()
        {
        }
        
        public static SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<sbyte[], int?> GenerateSourceStampBlock(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.SignerConfig sourceStampSignerConfig, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> digestInfo)
        {
            if (sourceStampSignerConfig.certificates.IsEmpty())
            {
                throw new SigningServer.Android.Security.SignatureException("No certificates configured for signer");
            }
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>> digests = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>>();
            foreach (SigningServer.Android.Collections.MapEntry<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> digest in digestInfo.EntrySet())
            {
                digests.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of(digest.GetKey().GetId(), digest.GetValue()));
            }
            SigningServer.Android.Util.Collections.Sort(digests, System.Collections.Generic.IComparer.Comparing(SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.getFirst));
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V1SourceStampSigner.SourceStampBlock sourceStampBlock = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V1SourceStampSigner.SourceStampBlock();
            try
            {
                sourceStampBlock.stampCertificate = sourceStampSignerConfig.certificates.Get(0).GetEncoded();
            }
            catch (SigningServer.Android.Security.Cert.CertificateEncodingException e)
            {
                throw new SigningServer.Android.Security.SignatureException("Retrieving the encoded form of the stamp certificate failed", e);
            }
            sbyte[] digestBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(digests);
            sourceStampBlock.signedDigests = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GenerateSignaturesOverData(sourceStampSignerConfig, digestBytes);
            sbyte[] sourceStampSignerBlock = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedElements(new sbyte[]{
                sourceStampBlock.stampCertificate, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(sourceStampBlock.signedDigests)}
            );
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsLengthPrefixedElement(sourceStampSignerBlock), SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.V1_SOURCE_STAMP_BLOCK_ID);
        }
        
        internal class SourceStampBlock
        {
            public sbyte[] stampCertificate;
            
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>> signedDigests;
            
        }
        
    }
    
}
