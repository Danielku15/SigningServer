// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp
{
    /// <summary>
    /// SourceStamp signer.
    /// 
    /// &lt;p&gt;SourceStamp improves traceability of apps with respect to unauthorized distribution.
    /// 
    /// &lt;p&gt;The stamp is part of the APK that is protected by the signing block.
    /// 
    /// &lt;p&gt;The APK contents hash is signed using the stamp key, and is saved as part of the signing
    /// block.
    /// 
    /// &lt;p&gt;V2 of the source stamp allows signing the digests of more than one signature schemes.
    /// </summary>
    public abstract class V2SourceStampSigner
    {
        public static readonly int V2_SOURCE_STAMP_BLOCK_ID = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.V2_SOURCE_STAMP_BLOCK_ID;
        
        /// <summary>
        /// Hidden constructor to prevent instantiation.
        /// </summary>
        internal V2SourceStampSigner()
        {
        }
        
        public static SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<sbyte[], int> GenerateSourceStampBlock(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.SignerConfig sourceStampSignerConfig, SigningServer.Android.Collections.Map<int, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>> signatureSchemeDigestInfos)
        {
            if (sourceStampSignerConfig.certificates.IsEmpty())
            {
                throw new SigningServer.Android.Security.SignatureException("No certificates configured for signer");
            }
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>> signatureSchemeDigests = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>>();
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.GetSignedDigestsFor(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3, signatureSchemeDigestInfos, sourceStampSignerConfig, signatureSchemeDigests);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.GetSignedDigestsFor(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2, signatureSchemeDigestInfos, sourceStampSignerConfig, signatureSchemeDigests);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.GetSignedDigestsFor(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.VERSION_JAR_SIGNATURE_SCHEME, signatureSchemeDigestInfos, sourceStampSignerConfig, signatureSchemeDigests);
            SigningServer.Android.Util.Collections.Sort(signatureSchemeDigests,
                (a, b) => a.GetFirst().CompareTo(b.GetFirst()));
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.SourceStampBlock sourceStampBlock = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.SourceStampBlock();
            try
            {
                sourceStampBlock.stampCertificate = sourceStampSignerConfig.certificates.Get(0).GetEncoded();
            }
            catch (SigningServer.Android.Security.Cert.CertificateEncodingException e)
            {
                throw new SigningServer.Android.Security.SignatureException("Retrieving the encoded form of the stamp certificate failed", e);
            }
            sourceStampBlock.signedDigests = signatureSchemeDigests;
            sourceStampBlock.stampAttributes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.EncodeStampAttributes(SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampSigner.GenerateStampAttributes(sourceStampSignerConfig.mSigningCertificateLineage));
            sourceStampBlock.signedStampAttributes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GenerateSignaturesOverData(sourceStampSignerConfig, sourceStampBlock.stampAttributes);
            sbyte[] sourceStampSignerBlock = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedElements(new sbyte[][]{
                sourceStampBlock.stampCertificate, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(sourceStampBlock.signedDigests), sourceStampBlock.stampAttributes, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(sourceStampBlock.signedStampAttributes)}
            );
            return SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of<sbyte[], int>(SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsLengthPrefixedElement(sourceStampSignerBlock), SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.V2_SOURCE_STAMP_BLOCK_ID);
        }
        
        internal static void GetSignedDigestsFor(int signatureSchemeVersion, SigningServer.Android.Collections.Map<int, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>> signatureSchemeDigestInfos, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.SignerConfig sourceStampSignerConfig, SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>> signatureSchemeDigests)
        {
            if (!signatureSchemeDigestInfos.ContainsKey(signatureSchemeVersion))
            {
                return;
            }
            SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> digestInfo = signatureSchemeDigestInfos.Get(signatureSchemeVersion);
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>> digests = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>>();
            foreach (SigningServer.Android.Collections.MapEntry<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> digest in digestInfo.EntrySet())
            {
                digests.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of<int, sbyte[]>(digest.GetKey().GetId(), digest.GetValue()));
            }

            SigningServer.Android.Util.Collections.Sort(digests, (a, b) => a.GetFirst().CompareTo(b.GetFirst()));
            sbyte[] digestBytes = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(digests);
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>> signedDigest = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.GenerateSignaturesOverData(sourceStampSignerConfig, digestBytes);
            signatureSchemeDigests.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of<int, sbyte[]>(signatureSchemeVersion, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtils.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(signedDigest)));
        }
        
        internal static sbyte[] EncodeStampAttributes(SigningServer.Android.Collections.Map<int, sbyte[]> stampAttributes)
        {
            int payloadSize = 0;
            foreach (sbyte[] attributeValue in stampAttributes.Values())
            {
                payloadSize += 4 + 4 + attributeValue.Length;
            }
            SigningServer.Android.IO.ByteBuffer result = SigningServer.Android.IO.ByteBuffer.Allocate(4 + payloadSize);
            result.Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
            result.PutInt(payloadSize);
            foreach (SigningServer.Android.Collections.MapEntry<int, sbyte[]> stampAttribute in stampAttributes.EntrySet())
            {
                result.PutInt(4 + stampAttribute.GetValue().Length);
                result.PutInt(stampAttribute.GetKey());
                result.Put(stampAttribute.GetValue());
            }
            return result.Array();
        }
        
        internal static SigningServer.Android.Collections.Map<int, sbyte[]> GenerateStampAttributes(SigningServer.Android.Com.Android.Apksig.SigningCertificateLineage lineage)
        {
            SigningServer.Android.Collections.HashMap<int, sbyte[]> stampAttributes = new SigningServer.Android.Collections.HashMap<int, sbyte[]>();
            if (lineage != null)
            {
                stampAttributes.Put(SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.PROOF_OF_ROTATION_ATTR_ID, lineage.EncodeSigningCertificateLineage());
            }
            return stampAttributes;
        }
        
        internal class SourceStampBlock
        {
            public sbyte[] stampCertificate;
            
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>> signedDigests;
            
            public sbyte[] stampAttributes;
            
            public SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int, sbyte[]>> signedStampAttributes;
            
        }
        
    }
    
}
