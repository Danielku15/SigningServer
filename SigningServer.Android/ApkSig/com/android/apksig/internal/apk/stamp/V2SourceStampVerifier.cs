// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp
{
    /// <summary>
    /// Source Stamp verifier.
    /// 
    /// &lt;p&gt;V2 of the source stamp verifies the stamp signature of more than one signature schemes.
    /// </summary>
    public abstract class V2SourceStampVerifier
    {
        /// <summary>
        /// Hidden constructor to prevent instantiation.
        /// </summary>
        internal V2SourceStampVerifier()
        {
        }
        
        /// <summary>
        /// Verifies the provided APK's SourceStamp signatures and returns the result of verification.
        /// The APK must be considered verified only if {@link ApkSigResult#verified} is
        /// {@code true}. If verification fails, the result will contain errors -- see {@link
        /// ApkSigResult#getErrors()}.
        /// 
        /// @throws NoSuchAlgorithmException if the APK's signatures cannot be verified because a
        ///     required cryptographic algorithm implementation is missing
        /// @throws SignatureNotFoundException if no SourceStamp signatures are
        ///     found
        /// @throws IOException if an I/O error occurs when reading the APK
        /// </summary>
        public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigResult Verify(SigningServer.Android.Com.Android.Apksig.Util.DataSource apk, SigningServer.Android.Com.Android.Apksig.Zip.ZipSections zipSections, sbyte[] sourceStampCertificateDigest, SigningServer.Android.Collections.Map<int?, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>> signatureSchemeApkContentDigests, int minSdkVersion, int maxSdkVersion)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigResult result = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigResult(SigningServer.Android.Com.Android.Apksig.Constants.VERSION_SOURCE_STAMP);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.SignatureInfo signatureInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.FindSignature(apk, zipSections, SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampConstants.V2_SOURCE_STAMP_BLOCK_ID);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampVerifier.Verify(
                signatureInfo.signatureBlock
                , 
                sourceStampCertificateDigest
                , 
                signatureSchemeApkContentDigests
                , 
                minSdkVersion
                , 
                maxSdkVersion
                , 
                result
            
            );
            return result;
        }
        
        /// <summary>
        /// Verifies the provided APK's SourceStamp signatures and outputs the results into the provided
        /// {@code result}. APK is considered verified only if there are no errors reported in the {@code
        /// result}. See {@link #verify(DataSource, ZipSections, byte[], Map, int, int)} for
        /// more information about the contract of this method.
        /// </summary>
        internal static void Verify(SigningServer.Android.IO.ByteBuffer sourceStampBlock, sbyte[] sourceStampCertificateDigest, SigningServer.Android.Collections.Map<int?, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>> signatureSchemeApkContentDigests, int minSdkVersion, int maxSdkVersion, SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigResult result)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo signerInfo = new SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSignerInfo();
            result.mSigners.Add(signerInfo);
            try
            {
                SigningServer.Android.Security.Cert.CertificateFactory certFactory = SigningServer.Android.Security.Cert.CertificateFactory.GetInstance("X.509");
                SigningServer.Android.IO.ByteBuffer sourceStampBlockData = SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.GetLengthPrefixedSlice(sourceStampBlock);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.SourceStampVerifier.VerifyV2SourceStamp(
                    sourceStampBlockData
                    , 
                    certFactory
                    , 
                    signerInfo
                    , 
                    SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampVerifier.GetSignatureSchemeDigests(signatureSchemeApkContentDigests)
                    , 
                    sourceStampCertificateDigest
                    , 
                    minSdkVersion
                    , 
                    maxSdkVersion
                
                );
                result.verified = !result.ContainsErrors() && !result.ContainsWarnings();
            }
            catch (SigningServer.Android.Security.Cert.CertificateException e)
            {
                throw new System.InvalidOperationException("Failed to obtain X.509 CertificateFactory", e);
            }
            catch (System.Exception e) when ( e is SigningServer.Android.Com.Android.Apksig.Apk.ApkFormatException || e is SigningServer.Android.IO.BufferUnderflowException)
            {
                signerInfo.AddWarning(SigningServer.Android.Com.Android.Apksig.ApkVerificationIssue.SOURCE_STAMP_MALFORMED_SIGNATURE);
            }
        }
        
        internal static SigningServer.Android.Collections.Map<int?, sbyte[]> GetSignatureSchemeDigests(SigningServer.Android.Collections.Map<int?, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>> signatureSchemeApkContentDigests)
        {
            SigningServer.Android.Collections.Map<int?, sbyte[]> digests = new SigningServer.Android.Collections.HashMap<int?, sbyte[]>();
            foreach (SigningServer.Android.Collections.MapEntry<int?, SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]>> signatureSchemeApkContentDigest in signatureSchemeApkContentDigests.EntrySet())
            {
                SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>> apkDigests = SigningServer.Android.Com.Android.Apksig.Internal.Apk.Stamp.V2SourceStampVerifier.GetApkDigests(signatureSchemeApkContentDigest.GetValue());
                digests.Put(signatureSchemeApkContentDigest.GetKey(), SigningServer.Android.Com.Android.Apksig.Internal.Apk.ApkSigningBlockUtilsLite.EncodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(apkDigests));
            }
            return digests;
        }
        
        internal static SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>> GetApkDigests(SigningServer.Android.Collections.Map<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> apkContentDigests)
        {
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>> digests = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>>();
            foreach (SigningServer.Android.Collections.MapEntry<SigningServer.Android.Com.Android.Apksig.Internal.Apk.ContentDigestAlgorithm, sbyte[]> apkContentDigest in apkContentDigests.EntrySet())
            {
                digests.Add(SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of(apkContentDigest.GetKey().GetId(), apkContentDigest.GetValue()));
            }
            SigningServer.Android.Util.Collections.Sort(digests, new System.Collections.Generic.IComparer<SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, sbyte[]>>());
            return digests;
        }
        
    }
    
}
