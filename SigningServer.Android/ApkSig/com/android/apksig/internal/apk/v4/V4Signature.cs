// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4
{
    public class V4Signature
    {
        public static readonly int CURRENT_VERSION = 2;
        
        public static readonly int HASHING_ALGORITHM_SHA256 = 1;
        
        public static readonly sbyte LOG2_BLOCK_SIZE_4096_BYTES = 12;
        
        public class HashingInfo
        {
            public readonly int hashAlgorithm;
            
            public readonly sbyte log2BlockSize;
            
            public readonly sbyte[] salt;
            
            public readonly sbyte[] rawRootHash;
            
            internal HashingInfo(int hashAlgorithm, sbyte log2BlockSize, sbyte[] salt, sbyte[] rawRootHash)
            {
                this.hashAlgorithm = hashAlgorithm;
                this.log2BlockSize = log2BlockSize;
                this.salt = salt;
                this.rawRootHash = rawRootHash;
            }
            
            public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.HashingInfo FromByteArray(sbyte[] bytes)
            {
                SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Wrap(bytes).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
                int hashAlgorithm = buffer.GetInt();
                sbyte log2BlockSize = buffer.Get();
                sbyte[] salt = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                sbyte[] rawRootHash = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                return new SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.HashingInfo(hashAlgorithm, log2BlockSize, salt, rawRootHash);
            }
            
            public virtual sbyte[] ToByteArray()
            {
                int size = 4 + 1 + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.salt) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.rawRootHash);
                SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Allocate(size).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
                buffer.PutInt(this.hashAlgorithm);
                buffer.Put(this.log2BlockSize);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.salt);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.rawRootHash);
                return buffer.Array();
            }
            
        }
        
        public class SigningInfo
        {
            public readonly sbyte[] apkDigest;
            
            public readonly sbyte[] certificate;
            
            public readonly sbyte[] additionalData;
            
            public readonly sbyte[] publicKey;
            
            public readonly int signatureAlgorithmId;
            
            public readonly sbyte[] signature;
            
            internal SigningInfo(sbyte[] apkDigest, sbyte[] certificate, sbyte[] additionalData, sbyte[] publicKey, int signatureAlgorithmId, sbyte[] signature)
            {
                this.apkDigest = apkDigest;
                this.certificate = certificate;
                this.additionalData = additionalData;
                this.publicKey = publicKey;
                this.signatureAlgorithmId = signatureAlgorithmId;
                this.signature = signature;
            }
            
            public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.SigningInfo FromByteArray(sbyte[] bytes)
            {
                SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Wrap(bytes).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
                sbyte[] apkDigest = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                sbyte[] certificate = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                sbyte[] additionalData = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                sbyte[] publicKey = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                int signatureAlgorithmId = buffer.GetInt();
                sbyte[] signature = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(buffer);
                return new SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.SigningInfo(apkDigest, certificate, additionalData, publicKey, signatureAlgorithmId, signature);
            }
            
            public virtual sbyte[] ToByteArray()
            {
                int size = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.apkDigest) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.certificate) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.additionalData) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.publicKey) + 4 + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(this.signature);
                SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Allocate(size).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.apkDigest);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.certificate);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.additionalData);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.publicKey);
                buffer.PutInt(this.signatureAlgorithmId);
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, this.signature);
                return buffer.Array();
            }
            
        }
        
        public readonly int version;
        
        public readonly sbyte[] hashingInfo;
        
        public readonly sbyte[] signingInfo;
        
        internal V4Signature(int version, sbyte[] hashingInfo, sbyte[] signingInfo)
        {
            this.version = version;
            this.hashingInfo = hashingInfo;
            this.signingInfo = signingInfo;
        }
        
        public static SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature ReadFrom(SigningServer.Android.IO.InputStream stream)
        {
            int version = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadIntLE(stream);
            if (version != SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.CURRENT_VERSION)
            {
                throw new SigningServer.Android.IO.IOException("Invalid signature version.");
            }
            sbyte[] hashingInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(stream);
            sbyte[] signingInfo = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadBytes(stream);
            return new SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature(version, hashingInfo, signingInfo);
        }
        
        public virtual void WriteTo(SigningServer.Android.IO.OutputStream stream)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteIntLE(stream, this.version);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(stream, this.hashingInfo);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(stream, this.signingInfo);
        }
        
        public static sbyte[] GetSignedData(long fileSize, SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.HashingInfo hashingInfo, SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.SigningInfo signingInfo)
        {
            int size = 4 + 8 + 4 + 1 + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(hashingInfo.salt) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(hashingInfo.rawRootHash) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(signingInfo.apkDigest) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(signingInfo.certificate) + SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.BytesSize(signingInfo.additionalData);
            SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Allocate(size).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
            buffer.PutInt(size);
            buffer.PutLong(fileSize);
            buffer.PutInt(hashingInfo.hashAlgorithm);
            buffer.Put(hashingInfo.log2BlockSize);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, hashingInfo.salt);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, hashingInfo.rawRootHash);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, signingInfo.apkDigest);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, signingInfo.certificate);
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteBytes(buffer, signingInfo.additionalData);
            return buffer.Array();
        }
        
        public static int BytesSize(sbyte[] bytes)
        {
            return 4 + (bytes == null ? 0 : bytes.Length);
        }
        
        public static void ReadFully(SigningServer.Android.IO.InputStream stream, sbyte[] buffer)
        {
            int len = buffer.Length;
            int n = 0;
            while (n < len)
            {
                int count = stream.Read(buffer, n, len - n);
                if (count < 0)
                {
                    throw new SigningServer.Android.IO.EOFException();
                }
                n += count;
            }
        }
        
        public static int ReadIntLE(SigningServer.Android.IO.InputStream stream)
        {
            sbyte[] buffer = new sbyte[4];
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadFully(stream, buffer);
            return SigningServer.Android.IO.ByteBuffer.Wrap(buffer).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN).GetInt();
        }
        
        public static void WriteIntLE(SigningServer.Android.IO.OutputStream stream, int v)
        {
            sbyte[] buffer = SigningServer.Android.IO.ByteBuffer.Wrap(new sbyte[4]).Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN).PutInt(v).Array();
            stream.Write(buffer);
        }
        
        public static sbyte[] ReadBytes(SigningServer.Android.IO.InputStream stream)
        {
            try
            {
                int size = SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadIntLE(stream);
                sbyte[] bytes = new sbyte[size];
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.ReadFully(stream, bytes);
                return bytes;
            }
            catch (SigningServer.Android.IO.EOFException ignored)
            {
                return null;
            }
        }
        
        public static sbyte[] ReadBytes(SigningServer.Android.IO.ByteBuffer buffer)
        {
            if (buffer.Remaining() < 4)
            {
                throw new SigningServer.Android.IO.EOFException();
            }
            int size = buffer.GetInt();
            if (buffer.Remaining() < size)
            {
                throw new SigningServer.Android.IO.EOFException();
            }
            sbyte[] bytes = new sbyte[size];
            buffer.Get(bytes);
            return bytes;
        }
        
        public static void WriteBytes(SigningServer.Android.IO.OutputStream stream, sbyte[] bytes)
        {
            if (bytes == null)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteIntLE(stream, 0);
                return;
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Apk.V4.V4Signature.WriteIntLE(stream, bytes.Length);
            stream.Write(bytes);
        }
        
        public static void WriteBytes(SigningServer.Android.IO.ByteBuffer buffer, sbyte[] bytes)
        {
            if (bytes == null)
            {
                buffer.PutInt(0);
                return;
            }
            buffer.PutInt(bytes.Length);
            buffer.Put(bytes);
        }
        
    }
    
}
