// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using System.Linq;
using System.Reflection;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Asn1
{
    /// <summary>
    /// Parser of ASN.1 BER-encoded structures.
    /// 
    /// &lt;p&gt;Structure is described to the parser by providing a class annotated with {@link Asn1Class},
    /// containing fields annotated with {@link Asn1Field}.
    /// </summary>
    public class Asn1BerParser
    {
        internal Asn1BerParser()
        {
        }
        
        /// <summary>
        /// Returns the ASN.1 structure contained in the BER encoded input.
        /// 
        /// @param encoded encoded input. If the decoding operation succeeds, the position of this buffer
        ///        is advanced to the first position following the end of the consumed structure.
        /// @param containerClass class describing the structure of the input. The class must meet the
        ///        following requirements:
        ///        &lt;ul&gt;
        ///        &lt;li&gt;The class must be annotated with {@link Asn1Class}.&lt;/li&gt;
        ///        &lt;li&gt;The class must expose a public no-arg constructor.&lt;/li&gt;
        ///        &lt;li&gt;Member fields of the class which are populated with parsed input must be
        ///            annotated with {@link Asn1Field} and be public and non-final.&lt;/li&gt;
        ///        &lt;/ul&gt;
        /// @throws Asn1DecodingException if the input could not be decoded into the specified Java
        ///         object
        /// </summary>
        public static T Parse<T>(SigningServer.Android.IO.ByteBuffer encoded)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue containerDataValue;
            try
            {
                containerDataValue = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.ByteBufferBerDataValueReader(encoded).ReadDataValue();
            }
            catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException e)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to decode top-level data value", e);
            }
            if (containerDataValue == null)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Empty input");
            }
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Parse<T>(containerDataValue);
        }
        
        /// <summary>
        /// Returns the implicit {@code SET OF} contained in the provided ASN.1 BER input. Implicit means
        /// that this method does not care whether the tag number of this data structure is
        /// {@code SET OF} and whether the tag class is {@code UNIVERSAL}.
        /// 
        /// &lt;p&gt;Note: The returned type is {@link List} rather than {@link java.util.Set} because ASN.1
        /// SET may contain duplicate elements.
        /// 
        /// @param encoded encoded input. If the decoding operation succeeds, the position of this buffer
        ///        is advanced to the first position following the end of the consumed structure.
        /// @param elementClass class describing the structure of the values/elements contained in this
        ///        container. The class must meet the following requirements:
        ///        &lt;ul&gt;
        ///        &lt;li&gt;The class must be annotated with {@link Asn1Class}.&lt;/li&gt;
        ///        &lt;li&gt;The class must expose a public no-arg constructor.&lt;/li&gt;
        ///        &lt;li&gt;Member fields of the class which are populated with parsed input must be
        ///            annotated with {@link Asn1Field} and be public and non-final.&lt;/li&gt;
        ///        &lt;/ul&gt;
        /// @throws Asn1DecodingException if the input could not be decoded into the specified Java
        ///         object
        /// </summary>
        public static SigningServer.Android.Collections.List<T> ParseImplicitSetOf<T>(SigningServer.Android.IO.ByteBuffer encoded)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue containerDataValue;
            try
            {
                containerDataValue = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.ByteBufferBerDataValueReader(encoded).ReadDataValue();
            }
            catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException e)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to decode top-level data value", e);
            }
            if (containerDataValue == null)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Empty input");
            }
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseSetOf<T>(containerDataValue);
        }
        
        internal static T Parse<T>(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue container)
        {
            if (container == null)
            {
                throw new System.NullReferenceException("container == null");
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type dataType = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.GetContainerAsn1Type<T>();
            switch (dataType)
            {
                case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseChoice<T>(container);
                case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE:
                    {
                        int expectedTagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL;
                        int expectedTagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber(dataType);
                        if ((container.GetTagClass() != expectedTagClass) || (container.GetTagNumber() != expectedTagNumber))
                        {
                            throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Asn1UnexpectedTagException("Unexpected data value read as " + typeof(T).GetName() + ". Expected " + SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TagClassAndNumberToString(expectedTagClass, expectedTagNumber) + ", but read: " + SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TagClassAndNumberToString(container.GetTagClass(), container.GetTagNumber()));
                        }
                        return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseSequence<T>(container);
                    }
                case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.UNENCODED_CONTAINER:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseSequence<T>(container, true);
                default:
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Parsing container " + dataType + " not supported");
            }
        }
        
        internal static T ParseChoice<T>(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue)
        {
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField> fields = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.GetAnnotatedFields<T>();
            if (fields.IsEmpty())
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("No fields annotated with " + typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field).GetName() + " in CHOICE class " + typeof(T).GetName());
            }
            for (int i = 0;i < fields.Size() - 1;i++)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField f1 = fields.Get(i);
                int tagNumber1 = f1.GetBerTagNumber();
                int tagClass1 = f1.GetBerTagClass();
                for (int j = i + 1;j < fields.Size();j++)
                {
                    SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField f2 = fields.Get(j);
                    int tagNumber2 = f2.GetBerTagNumber();
                    int tagClass2 = f2.GetBerTagClass();
                    if ((tagNumber1 == tagNumber2) && (tagClass1 == tagClass2))
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("CHOICE fields are indistinguishable because they have the same tag" + " class and number: " + typeof(T).GetName() + "." + f1.GetField().Name + " and ." + f2.GetField().Name);
                    }
                }
            }
            T obj;
            try
            {
                obj = (T)(object)Activator.CreateInstance<T>();
            }
            catch (System.Exception e) when ( e is System.ArgumentException || e is SigningServer.Android.Core.ReflectiveOperationException)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to instantiate " + typeof(T).GetName(), e);
            }
            foreach (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField field in fields)
            {
                try
                {
                    field.SetValueFrom(dataValue, obj);
                    return obj;
                }
                catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Asn1UnexpectedTagException expected)
                {
                }
            }
            throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("No options of CHOICE " + typeof(T).GetName() + " matched");
        }
        
        internal static T ParseSequence<T>(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue container)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseSequence<T>(container, false);
        }
        
        internal static T ParseSequence<T>(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue container, bool isUnencodedContainer)
        {
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField> fields = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.GetAnnotatedFields<T>();
            SigningServer.Android.Util.Collections.Sort(fields, ( f1,  f2) => f1.GetAnnotation().Index - f2.GetAnnotation().Index);
            if (fields.Size() > 1)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField lastField = null;
                foreach (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField field in fields)
                {
                    if ((lastField != null) && (lastField.GetAnnotation().Index == field.GetAnnotation().Index))
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Fields have the same index: " + typeof(T).GetName() + "." + lastField.GetField().Name + " and ." + field.GetField().Name);
                    }
                    lastField = field;
                }
            }
            T t;
            try
            {
                t = (T)(object)Activator.CreateInstance<T>();
            }
            catch (System.Exception e) when ( e is System.ArgumentException || e is SigningServer.Android.Core.ReflectiveOperationException)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to instantiate " + typeof(T).GetName(), e);
            }
            int nextUnreadFieldIndex = 0;
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueReader elementsReader = container.ContentsReader();
            while (nextUnreadFieldIndex < fields.Size())
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue;
                try
                {
                    if (isUnencodedContainer && nextUnreadFieldIndex == 0)
                    {
                        dataValue = container;
                    }
                    else 
                    {
                        dataValue = elementsReader.ReadDataValue();
                    }
                }
                catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Malformed data value", e);
                }
                if (dataValue == null)
                {
                    break;
                }
                for (int i = nextUnreadFieldIndex;i < fields.Size();i++)
                {
                    SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField field = fields.Get(i);
                    try
                    {
                        if (field.IsOptional())
                        {
                            try
                            {
                                field.SetValueFrom(dataValue, t);
                                nextUnreadFieldIndex = i + 1;
                                break;
                            }
                            catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Asn1UnexpectedTagException e)
                            {
                                continue;
                            }
                        }
                        else 
                        {
                            field.SetValueFrom(dataValue, t);
                            nextUnreadFieldIndex = i + 1;
                            break;
                        }
                    }
                    catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException e)
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to parse " + typeof(T).GetName() + "." + field.GetField().Name, e);
                    }
                }
            }
            return t;
        }

        internal static object ParseSetOf(
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue container, Type t)
        {
            return ParseSetOfMethod.MakeGenericMethod(t).Invoke(null, new object[]{container});
        }

        private static readonly MethodInfo ParseSetOfMethod = typeof(Asn1BerParser)
            .GetMethods(BindingFlags.NonPublic | BindingFlags.Static)
            .First(m => m.Name == nameof(ParseSetOf) && m.IsGenericMethod);
        
        internal static SigningServer.Android.Collections.List<T> ParseSetOf<T>(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue container)
        {
            SigningServer.Android.Collections.List<T> result = new SigningServer.Android.Collections.List<T>();
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueReader elementsReader = container.ContentsReader();
            while (true)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue;
                try
                {
                    dataValue = elementsReader.ReadDataValue();
                }
                catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Malformed data value", e);
                }
                if (dataValue == null)
                {
                    break;
                }
                T element;
                if (typeof(SigningServer.Android.IO.ByteBuffer) == typeof(T))
                {
                    element = (T)(object)dataValue.GetEncodedContents();
                }
                else if (typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject) == typeof(T))
                {
                    element = (T)(object)new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject(dataValue.GetEncoded());
                }
                else 
                {
                    element = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Parse<T>(dataValue);
                }
                result.Add(element);
            }
            return result;
        }
        
        internal static SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type GetContainerAsn1Type<T>()
        {
            var containerClass = typeof(T);
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class containerAnnotation = containerClass.GetCustomAttribute<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class>();
            if (containerAnnotation == null)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException(containerClass.GetName() + " is not annotated with " + typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class).GetName());
            }
            switch (containerAnnotation.Type)
            {
                case Asn1Type.CHOICE:
                case Asn1Type.SEQUENCE:
                case Asn1Type.UNENCODED_CONTAINER:
                    return containerAnnotation.Type;
                default:
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Unsupported ASN.1 container annotation type: " + containerAnnotation.Type);
            }
        }
        
        internal static Type GetElementType(FieldInfo field)
        {
            var type = field.FieldType;
            if (!type.IsConstructedGenericType)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Not a container type: " + type.FullName);
            }
            
            return type.GenericTypeArguments[0];
        }
        
        internal class AnnotatedField
        {
            internal readonly FieldInfo mField;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field mAnnotation;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type mDataType;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass mTagClass;
            
            internal readonly int mBerTagClass;
            
            internal readonly int mBerTagNumber;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging mTagging;
            
            internal readonly bool mOptional;
            
            public AnnotatedField(FieldInfo field, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field annotation)
            {
                mField = field;
                mAnnotation = annotation;
                mDataType = annotation.Type;
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass tagClass = annotation.Cls;
                if (tagClass == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass.AUTOMATIC)
                {
                    if (annotation.TagNumber != -1)
                    {
                        tagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass.CONTEXT_SPECIFIC;
                    }
                    else 
                    {
                        tagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass.UNIVERSAL;
                    }
                }
                mTagClass = tagClass;
                mBerTagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagClass(mTagClass);
                int tagNumber;
                if (annotation.TagNumber != -1)
                {
                    tagNumber = annotation.TagNumber;
                }
                else if ((mDataType == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE) || (mDataType == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.ANY))
                {
                    tagNumber = -1;
                }
                else 
                {
                    tagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber(mDataType);
                }
                mBerTagNumber = tagNumber;
                mTagging = annotation.Tagging;
                if (((mTagging == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.EXPLICIT) || (mTagging == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.IMPLICIT)) && (annotation.TagNumber == -1))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Tag number must be specified when tagging mode is " + mTagging);
                }
                mOptional = annotation.Optional;
            }
            
            public virtual FieldInfo GetField()
            {
                return mField;
            }
            
            public virtual SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field GetAnnotation()
            {
                return mAnnotation;
            }
            
            public virtual bool IsOptional()
            {
                return mOptional;
            }
            
            public virtual int GetBerTagClass()
            {
                return mBerTagClass;
            }
            
            public virtual int GetBerTagNumber()
            {
                return mBerTagNumber;
            }
            
            public virtual void SetValueFrom(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue, object obj)
            {
                int readTagClass = dataValue.GetTagClass();
                if (mBerTagNumber != -1)
                {
                    int readTagNumber = dataValue.GetTagNumber();
                    if ((readTagClass != mBerTagClass) || (readTagNumber != mBerTagNumber))
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Asn1UnexpectedTagException("Tag mismatch. Expected: " + SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TagClassAndNumberToString(mBerTagClass, mBerTagNumber) + ", but found " + SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TagClassAndNumberToString(readTagClass, readTagNumber));
                    }
                }
                else 
                {
                    if (readTagClass != mBerTagClass)
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.Asn1UnexpectedTagException("Tag mismatch. Expected class: " + SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TagClassToString(mBerTagClass) + ", but found " + SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TagClassToString(readTagClass));
                    }
                }
                if (mTagging == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.EXPLICIT)
                {
                    try
                    {
                        dataValue = dataValue.ContentsReader().ReadDataValue();
                    }
                    catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException e)
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to read contents of EXPLICIT data value", e);
                    }
                }
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.BerToJavaConverter.SetFieldValue(obj, mField, mDataType, dataValue);
            }
            
        }
        
        internal class Asn1UnexpectedTagException: SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException
        {
            internal static readonly long serialVersionUID = 1L;
            
            public Asn1UnexpectedTagException(string message)
                : base (message)
            {
                ;
            }
            
        }
        
        internal static string OidToString(SigningServer.Android.IO.ByteBuffer encodedOid)
        {
            if (!encodedOid.HasRemaining())
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Empty OBJECT IDENTIFIER");
            }
            long firstComponent = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.DecodeBase128UnsignedLong(encodedOid);
            int firstNode = (int)SigningServer.Android.Core.Math.Min(firstComponent / 40, 2);
            long secondNode = firstComponent - firstNode * 40;
            SigningServer.Android.Core.StringBuilder result = new SigningServer.Android.Core.StringBuilder();
            result.Append(SigningServer.Android.Core.LongExtensions.ToString(firstNode)).Append('.').Append(SigningServer.Android.Core.LongExtensions.ToString(secondNode));
            while (encodedOid.HasRemaining())
            {
                long node = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.DecodeBase128UnsignedLong(encodedOid);
                result.Append('.').Append(SigningServer.Android.Core.LongExtensions.ToString(node));
            }
            return result.ToString();
        }
        
        internal static long DecodeBase128UnsignedLong(SigningServer.Android.IO.ByteBuffer encoded)
        {
            if (!encoded.HasRemaining())
            {
                return 0;
            }
            long result = 0;
            while (encoded.HasRemaining())
            {
                if (result > SigningServer.Android.TypeUtils.UnsignedRightShift(SigningServer.Android.Core.LongExtensions.MAX_VALUE, 7))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Base-128 number too large");
                }
                int b = encoded.Get() & 0xff;
                result <<= 7;
                result |= b & 0x7f;
                if ((b & 0x80) == 0)
                {
                    return result;
                }
            }
            throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Truncated base-128 encoded input: missing terminating byte, with highest bit not" + " set");
        }
        
        internal static SigningServer.Android.Math.BigInteger IntegerToBigInteger(SigningServer.Android.IO.ByteBuffer encoded)
        {
            if (!encoded.HasRemaining())
            {
                return SigningServer.Android.Math.BigInteger.ZERO;
            }
            return new SigningServer.Android.Math.BigInteger(SigningServer.Android.Com.Android.Apksig.Internal.Util.ByteBufferUtils.ToByteArray(encoded));
        }
        
        internal static int IntegerToInt(SigningServer.Android.IO.ByteBuffer encoded)
        {
            SigningServer.Android.Math.BigInteger value = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.IntegerToBigInteger(encoded);
            if (value.CompareTo(SigningServer.Android.Math.BigInteger.ValueOf(SigningServer.Android.Core.IntExtensions.MIN_VALUE)) < 0 || value.CompareTo(SigningServer.Android.Math.BigInteger.ValueOf(SigningServer.Android.Core.IntExtensions.MaxValue)) > 0)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException(SigningServer.Android.Core.StringExtensions.Format("INTEGER cannot be represented as int: %1$d (0x%1$x)", value));
            }
            return value.IntValue();
        }
        
        internal static long IntegerToLong(SigningServer.Android.IO.ByteBuffer encoded)
        {
            SigningServer.Android.Math.BigInteger value = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.IntegerToBigInteger(encoded);
            if (value.CompareTo(SigningServer.Android.Math.BigInteger.ValueOf(SigningServer.Android.Core.LongExtensions.MIN_VALUE)) < 0 || value.CompareTo(SigningServer.Android.Math.BigInteger.ValueOf(SigningServer.Android.Core.LongExtensions.MAX_VALUE)) > 0)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException(SigningServer.Android.Core.StringExtensions.Format("INTEGER cannot be represented as long: %1$d (0x%1$x)", value));
            }
            return value.LongValue();
        }
        
        internal static SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField> GetAnnotatedFields<T>()
        {
            FieldInfo[] declaredFields = typeof(T).GetFields();
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField> result = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField>(declaredFields.Length);
            foreach (FieldInfo field in declaredFields)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field annotation = field.GetCustomAttribute<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field>();
                if (annotation == null)
                {
                    continue;
                }
                if (field.IsStatic)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field).GetName() + " used on a static field: " + typeof(T).GetName() + "." + field.Name);
                }
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField annotatedField;
                try
                {
                    annotatedField = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.AnnotatedField(field, annotation);
                }
                catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Invalid ASN.1 annotation on " + typeof(T).GetName() + "." + field.Name, e);
                }
                result.Add(annotatedField);
            }
            return result;
        }
        
        internal class BerToJavaConverter
        {
            internal BerToJavaConverter()
            {
            }
            
            public static void SetFieldValue(object obj, FieldInfo field, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type type, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue)
            {
                try
                {
                    switch (type)
                    {
                        case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SET_OF:
                        case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE_OF:
                            if (typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject).Equals(field.GetType()))
                            {
                                field.SetValue(obj, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.BerToJavaConverter.Convert(type, dataValue, field.GetType()));
                            }
                            else 
                            {
                                field.SetValue(obj, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseSetOf(dataValue, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.GetElementType(field)));
                            }
                            return;
                        default:
                            field.SetValue(obj, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.BerToJavaConverter.Convert(type, dataValue, field.GetType()));
                            break;
                    }
                }
                catch (SigningServer.Android.Core.ReflectiveOperationException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Failed to set value of " + obj.GetType().GetName() + "." + field.Name, e);
                }
            }
            
            internal static readonly sbyte[] EMPTY_BYTE_ARRAY = new sbyte[0];

            public static object Convert(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type sourceType,
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue,
                Type t)
            {
                return ConvertMethod.MakeGenericMethod(t).Invoke(null, new object[] { sourceType, dataValue });
            }

            private static readonly MethodInfo ConvertMethod = typeof(Asn1BerParser)
                .GetMethods(BindingFlags.Static | BindingFlags.Public)
                .First(m => m.Name == nameof(Convert) && m.IsGenericMethodDefinition);
            
            public static T Convert<T>(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type sourceType, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue)
            {
                if (typeof(SigningServer.Android.IO.ByteBuffer) == typeof(T))
                {
                    return (T)(object)dataValue.GetEncodedContents();
                }
                else if (typeof(sbyte[]) == typeof(T))
                {
                    SigningServer.Android.IO.ByteBuffer resultBuf = dataValue.GetEncodedContents();
                    if (!resultBuf.HasRemaining())
                    {
                        return (T)(object)SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.BerToJavaConverter.EMPTY_BYTE_ARRAY;
                    }
                    sbyte[] result = new sbyte[resultBuf.Remaining()];
                    resultBuf.Get(result);
                    return (T)(object)result;
                }
                else if (typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject) == typeof(T))
                {
                    return (T)(object)new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject(dataValue.GetEncoded());
                }
                SigningServer.Android.IO.ByteBuffer encodedContents = dataValue.GetEncodedContents();
                switch (sourceType)
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER:
                        if ((typeof(int) == typeof(T) || (typeof(int?) == typeof(T))))
                        {
                            return (T)(object)SigningServer.Android.Core.IntExtensions.ValueOf(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.IntegerToInt(encodedContents));
                        }
                        else if ((typeof(long) == typeof(T) || (typeof(long?) == typeof(T))))
                        {
                            return (T)(object)SigningServer.Android.Core.LongExtensions.ValueOf(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.IntegerToLong(encodedContents));
                        }
                        else if (typeof(SigningServer.Android.Math.BigInteger) == typeof(T))
                        {
                            return (T)(object)SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.IntegerToBigInteger(encodedContents);
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.OBJECT_IDENTIFIER:
                        if (typeof(string) == typeof(T))
                        {
                            return (T)(object)SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.OidToString(encodedContents);
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.UTC_TIME:
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.GENERALIZED_TIME:
                        if (typeof(string) == typeof(T))
                        {
                            return (T)(object)SigningServer.Android.Core.StringExtensions.Create(SigningServer.Android.Com.Android.Apksig.Internal.Util.ByteBufferUtils.ToByteArray(encodedContents));
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.BOOLEAN:
                        if (typeof(bool) == typeof(T))
                        {
                            if (encodedContents.Remaining() != 1)
                            {
                                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Incorrect encoded size of boolean value: " + encodedContents.Remaining());
                            }
                            bool result;
                            if (encodedContents.Get() == 0)
                            {
                                result = false;
                            }
                            else 
                            {
                                result = true;
                            }
                            return (T)(object)SigningServer.Android.Core.BoolExtensions.Create(result);
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE:
                        {
                            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class containerAnnotation = typeof(T).GetCustomAttribute<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class>();
                            if ((containerAnnotation != null) && (containerAnnotation.Type == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE))
                            {
                                return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseSequence<T>(dataValue);
                            }
                            break;
                        }
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE:
                        {
                            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class containerAnnotation = typeof(T).GetCustomAttribute<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class>();
                            if ((containerAnnotation != null) && (containerAnnotation.Type == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE))
                            {
                                return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1BerParser.ParseChoice<T>(dataValue);
                            }
                            break;
                        }
                    default:
                        break;
                }
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DecodingException("Unsupported conversion: ASN.1 " + sourceType + " to " + typeof(T).GetName());
            }
            
        }
        
    }
    
}
