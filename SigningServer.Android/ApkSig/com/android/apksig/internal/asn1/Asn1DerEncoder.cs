// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Asn1
{
    /// <summary>
    /// Encoder of ASN.1 structures into DER-encoded form.
    /// 
    /// &lt;p&gt;Structure is described to the encoder by providing a class annotated with {@link Asn1Class},
    /// containing fields annotated with {@link Asn1Field}.
    /// </summary>
    public class Asn1DerEncoder
    {
        internal Asn1DerEncoder()
        {
        }
        
        /// <summary>
        /// Returns the DER-encoded form of the provided ASN.1 structure.
        /// 
        /// @param container container to be encoded. The container's class must meet the following
        ///        requirements:
        ///        &lt;ul&gt;
        ///        &lt;li&gt;The class must be annotated with {@link Asn1Class}.&lt;/li&gt;
        ///        &lt;li&gt;Member fields of the class which are to be encoded must be annotated with
        ///            {@link Asn1Field} and be public.&lt;/li&gt;
        ///        &lt;/ul&gt;
        /// @throws Asn1EncodingException if the input could not be encoded
        /// </summary>
        public static sbyte[] Encode(object container)
        {
            SigningServer.Android.Core.Class<object> containerClass = container.GetType();
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class containerAnnotation = containerClass.GetDeclaredAnnotation(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class));
            if (containerAnnotation == null)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException(containerClass.GetName() + " not annotated with " + typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class).GetName());
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type containerType = containerAnnotation.Type();
            switch (containerType)
            {
                case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToChoice(container);
                case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequence(container);
                case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.UNENCODED_CONTAINER:
                    return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequence(container, true);
                default:
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Unsupported container type: " + containerType);
            }
        }
        
        internal static sbyte[] ToChoice(object container)
        {
            SigningServer.Android.Core.Class<object> containerClass = container.GetType();
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField> fields = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.GetAnnotatedFields(container);
            if (fields.IsEmpty())
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("No fields annotated with " + typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field).GetName() + " in CHOICE class " + containerClass.GetName());
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField resultField = null;
            foreach (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField field in fields)
            {
                object fieldValue = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.GetMemberFieldValue(container, field.GetField());
                if (fieldValue != null)
                {
                    if (resultField != null)
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Multiple non-null fields in CHOICE class " + containerClass.GetName() + ": " + resultField.GetField().GetName() + ", " + field.GetField().GetName());
                    }
                    resultField = field;
                }
            }
            if (resultField == null)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("No non-null fields in CHOICE class " + containerClass.GetName());
            }
            return resultField.ToDer();
        }
        
        internal static sbyte[] ToSequence(object container)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequence(container, false);
        }
        
        internal static sbyte[] ToSequence(object container, bool omitTag)
        {
            SigningServer.Android.Core.Class<object> containerClass = container.GetType();
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField> fields = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.GetAnnotatedFields(container);
            SigningServer.Android.Util.Collections.Sort(fields, ( f1,  f2) => f1.GetAnnotation().Index() - f2.GetAnnotation().Index();
            );
            if (fields.Size() > 1)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField lastField = null;
                foreach (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField field in fields)
                {
                    if ((lastField != null) && (lastField.GetAnnotation().Index() == field.GetAnnotation().Index()))
                    {
                        throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Fields have the same index: " + containerClass.GetName() + "." + lastField.GetField().GetName() + " and ." + field.GetField().GetName());
                    }
                    lastField = field;
                }
            }
            SigningServer.Android.Collections.List<sbyte[]> serializedFields = new SigningServer.Android.Collections.List<sbyte[]>(fields.Size());
            int contentLen = 0;
            foreach (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField field in fields)
            {
                sbyte[] serializedField;
                try
                {
                    serializedField = field.ToDer();
                }
                catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Failed to encode " + containerClass.GetName() + "." + field.GetField().GetName(), e);
                }
                if (serializedField != null)
                {
                    serializedFields.Add(serializedField);
                    contentLen += serializedField.Length;
                }
            }
            if (omitTag)
            {
                sbyte[] unencodedResult = new sbyte[contentLen];
                int index = 0;
                foreach (sbyte[] serializedField in serializedFields)
                {
                    SigningServer.Android.Core.System.Arraycopy(serializedField, 0, unencodedResult, index, serializedField.Length);
                    index += serializedField.Length;
                }
                return unencodedResult;
            }
            else 
            {
                return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, true, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_SEQUENCE, serializedFields.ToArray());
            }
        }
        
        internal static sbyte[] ToSetOf(SigningServer.Android.Collections.Collection<object> values, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type elementType)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequenceOrSetOf(values, elementType, true);
        }
        
        internal static sbyte[] ToSequenceOf(SigningServer.Android.Collections.Collection<object> values, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type elementType)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequenceOrSetOf(values, elementType, false);
        }
        
        internal static sbyte[] ToSequenceOrSetOf(SigningServer.Android.Collections.Collection<object> values, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type elementType, bool toSet)
        {
            SigningServer.Android.Collections.List<sbyte[]> serializedValues = new SigningServer.Android.Collections.List<sbyte[]>(values.Size());
            foreach (object value in values)
            {
                serializedValues.Add(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.JavaToDerConverter.ToDer(value, elementType, null));
            }
            int tagNumber;
            if (toSet)
            {
                if (serializedValues.Size() > 1)
                {
                    SigningServer.Android.Util.Collections.Sort(serializedValues, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ByteArrayLexicographicComparator.INSTANCE);
                }
                tagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_SET;
            }
            else 
            {
                tagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_SEQUENCE;
            }
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, true, tagNumber, serializedValues.ToArray());
        }
        
        /// <summary>
        /// Compares two bytes arrays based on their lexicographic order. Corresponding elements of the
        /// two arrays are compared in ascending order. Elements at out of range indices are assumed to
        /// be smaller than the smallest possible value for an element.
        /// </summary>
        internal class ByteArrayLexicographicComparator: System.Collections.Generic.IComparer<sbyte[]>
        {
            internal static readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ByteArrayLexicographicComparator INSTANCE = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ByteArrayLexicographicComparator();
            
            public override int Compare(sbyte[] arr1, sbyte[] arr2)
            {
                int commonLength = SigningServer.Android.Core.Math.Min(arr1.Length, arr2.Length);
                for (int i = 0;i < commonLength;i++)
                {
                    int diff = (arr1[i] & 0xff) - (arr2[i] & 0xff);
                    if (diff != 0)
                    {
                        return diff;
                    }
                }
                return arr1.Length - arr2.Length;
            }
            
        }
        
        internal static SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField> GetAnnotatedFields(object container)
        {
            SigningServer.Android.Core.Class<object> containerClass = container.GetType();
            SigningServer.Android.Core.Reflect.Field[] declaredFields = containerClass.GetDeclaredFields();
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField> result = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField>(declaredFields.Length);
            foreach (SigningServer.Android.Core.Reflect.Field field in declaredFields)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field annotation = field.GetDeclaredAnnotation(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field));
                if (annotation == null)
                {
                    continue;
                }
                if (SigningServer.Android.Core.Reflect.Modifier.IsStatic(field.GetModifiers()))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field).GetName() + " used on a static field: " + containerClass.GetName() + "." + field.GetName());
                }
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField annotatedField;
                try
                {
                    annotatedField = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.AnnotatedField(container, field, annotation);
                }
                catch (SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Invalid ASN.1 annotation on " + containerClass.GetName() + "." + field.GetName(), e);
                }
                result.Add(annotatedField);
            }
            return result;
        }
        
        internal static sbyte[] ToInteger(int value)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToInteger((long)value);
        }
        
        internal static sbyte[] ToInteger(long value)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToInteger(SigningServer.Android.Math.BigInteger.ValueOf(value));
        }
        
        internal static sbyte[] ToInteger(SigningServer.Android.Math.BigInteger value)
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, false, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_INTEGER, value.ToByteArray());
        }
        
        internal static sbyte[] ToBoolean(bool value)
        {
            sbyte[] result = new sbyte[1];
            if (value == false)
            {
                result[0] = 0;
            }
            else 
            {
                result[0] = 1;
            }
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, false, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_BOOLEAN, result);
        }
        
        internal static sbyte[] ToOid(string oid)
        {
            SigningServer.Android.IO.ByteArrayOutputStream encodedValue = new SigningServer.Android.IO.ByteArrayOutputStream();
            string[] nodes = oid.Split("\\.");
            if (nodes.Length < 2)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("OBJECT IDENTIFIER must contain at least two nodes: " + oid);
            }
            int firstNode;
            try
            {
                firstNode = SigningServer.Android.Core.IntExtensions.ParseInt(nodes[0]);
            }
            catch (SigningServer.Android.Core.NumberFormatException e)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Node #1 not numeric: " + nodes[0]);
            }
            if ((firstNode > 6) || (firstNode < 0))
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Invalid value for node #1: " + firstNode);
            }
            int secondNode;
            try
            {
                secondNode = SigningServer.Android.Core.IntExtensions.ParseInt(nodes[1]);
            }
            catch (SigningServer.Android.Core.NumberFormatException e)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Node #2 not numeric: " + nodes[1]);
            }
            if ((secondNode >= 40) || (secondNode < 0))
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Invalid value for node #2: " + secondNode);
            }
            int firstByte = firstNode * 40 + secondNode;
            if (firstByte > 0xff)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("First two nodes out of range: " + firstNode + "." + secondNode);
            }
            encodedValue.Write(firstByte);
            for (int i = 2;i < nodes.Length;i++)
            {
                string nodeString = nodes[i];
                int node;
                try
                {
                    node = SigningServer.Android.Core.IntExtensions.ParseInt(nodeString);
                }
                catch (SigningServer.Android.Core.NumberFormatException e)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Node #" + (i + 1) + " not numeric: " + nodeString);
                }
                if (node < 0)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Invalid value for node #" + (i + 1) + ": " + node);
                }
                if (node <= 0x7f)
                {
                    encodedValue.Write(node);
                    continue;
                }
                if (node < 1 << 14)
                {
                    encodedValue.Write(0x80 | (node >> 7));
                    encodedValue.Write(node & 0x7f);
                    continue;
                }
                if (node < 1 << 21)
                {
                    encodedValue.Write(0x80 | (node >> 14));
                    encodedValue.Write(0x80 | ((node >> 7) & 0x7f));
                    encodedValue.Write(node & 0x7f);
                    continue;
                }
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Node #" + (i + 1) + " too large: " + node);
            }
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, false, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_OBJECT_IDENTIFIER, encodedValue.ToByteArray());
        }
        
        internal static object GetMemberFieldValue(object obj, SigningServer.Android.Core.Reflect.Field field)
        {
            try
            {
                return field.Get(obj);
            }
            catch (SigningServer.Android.Core.ReflectiveOperationException e)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Failed to read " + obj.GetType().GetName() + "." + field.GetName(), e);
            }
        }
        
        internal class AnnotatedField
        {
            internal readonly SigningServer.Android.Core.Reflect.Field mField;
            
            internal readonly object mObject;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field mAnnotation;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type mDataType;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type mElementDataType;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass mTagClass;
            
            internal readonly int mDerTagClass;
            
            internal readonly int mDerTagNumber;
            
            internal readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging mTagging;
            
            internal readonly bool mOptional;
            
            public AnnotatedField(object obj, SigningServer.Android.Core.Reflect.Field field, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field annotation)
            {
                mObject = obj;
                mField = field;
                mAnnotation = annotation;
                mDataType = annotation.Type();
                mElementDataType = annotation.ElementType();
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass tagClass = annotation.Cls();
                if (tagClass == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass.AUTOMATIC)
                {
                    if (annotation.TagNumber() != -1)
                    {
                        tagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass.CONTEXT_SPECIFIC;
                    }
                    else 
                    {
                        tagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1TagClass.UNIVERSAL;
                    }
                }
                mTagClass = tagClass;
                mDerTagClass = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagClass(mTagClass);
                int tagNumber;
                if (annotation.TagNumber() != -1)
                {
                    tagNumber = annotation.TagNumber();
                }
                else if ((mDataType == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE) || (mDataType == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.ANY))
                {
                    tagNumber = -1;
                }
                else 
                {
                    tagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber(mDataType);
                }
                mDerTagNumber = tagNumber;
                mTagging = annotation.Tagging();
                if (((mTagging == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.EXPLICIT) || (mTagging == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.IMPLICIT)) && (annotation.TagNumber() == -1))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Tag number must be specified when tagging mode is " + mTagging);
                }
                mOptional = annotation.Optional();
            }
            
            public virtual SigningServer.Android.Core.Reflect.Field GetField()
            {
                return mField;
            }
            
            public virtual SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field GetAnnotation()
            {
                return mAnnotation;
            }
            
            public virtual sbyte[] ToDer()
            {
                object fieldValue = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.GetMemberFieldValue(mObject, mField);
                if (fieldValue == null)
                {
                    if (mOptional)
                    {
                        return null;
                    }
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Required field not set");
                }
                sbyte[] encoded = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.JavaToDerConverter.ToDer(fieldValue, mDataType, mElementDataType);
                switch (mTagging)
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.NORMAL:
                        return encoded;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.EXPLICIT:
                        return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(mDerTagClass, true, mDerTagNumber, encoded);
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Tagging.IMPLICIT:
                        int originalTagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber(encoded[0]);
                        if (originalTagNumber == 0x1f)
                        {
                            throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("High-tag-number form not supported");
                        }
                        if (mDerTagNumber >= 0x1f)
                        {
                            throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Unsupported high tag number: " + mDerTagNumber);
                        }
                        encoded[0] = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.SetTagNumber(encoded[0], mDerTagNumber);
                        encoded[0] = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.SetTagClass(encoded[0], mDerTagClass);
                        return encoded;
                    default:
                        throw new SigningServer.Android.Core.RuntimeException("Unknown tagging mode: " + mTagging);
                }
            }
            
        }
        
        internal static sbyte[] CreateTag(int tagClass, bool constructed, int tagNumber, params sbyte[][] contents)
        {
            if (tagNumber >= 0x1f)
            {
                throw new System.ArgumentException("High tag numbers not supported: " + tagNumber);
            }
            sbyte firstIdentifierByte = (sbyte)((tagClass << 6) | (constructed ? 1 << 5 : 0) | tagNumber);
            int contentsLength = 0;
            foreach (sbyte[] c in contents)
            {
                contentsLength += c.Length;
            }
            int contentsPosInResult;
            sbyte[] result;
            if (contentsLength < 0x80)
            {
                contentsPosInResult = 2;
                result = new sbyte[contentsPosInResult + contentsLength];
                result[0] = firstIdentifierByte;
                result[1] = (sbyte)contentsLength;
            }
            else 
            {
                if (contentsLength <= 0xff)
                {
                    contentsPosInResult = 3;
                    result = new sbyte[contentsPosInResult + contentsLength];
                    result[1] = (sbyte)0x81;
                    result[2] = (sbyte)contentsLength;
                }
                else if (contentsLength <= 0xffff)
                {
                    contentsPosInResult = 4;
                    result = new sbyte[contentsPosInResult + contentsLength];
                    result[1] = (sbyte)0x82;
                    result[2] = (sbyte)(contentsLength >> 8);
                    result[3] = (sbyte)(contentsLength & 0xff);
                }
                else if (contentsLength <= 0xffffff)
                {
                    contentsPosInResult = 5;
                    result = new sbyte[contentsPosInResult + contentsLength];
                    result[1] = (sbyte)0x83;
                    result[2] = (sbyte)(contentsLength >> 16);
                    result[3] = (sbyte)((contentsLength >> 8) & 0xff);
                    result[4] = (sbyte)(contentsLength & 0xff);
                }
                else 
                {
                    contentsPosInResult = 6;
                    result = new sbyte[contentsPosInResult + contentsLength];
                    result[1] = (sbyte)0x84;
                    result[2] = (sbyte)(contentsLength >> 24);
                    result[3] = (sbyte)((contentsLength >> 16) & 0xff);
                    result[4] = (sbyte)((contentsLength >> 8) & 0xff);
                    result[5] = (sbyte)(contentsLength & 0xff);
                }
                result[0] = firstIdentifierByte;
            }
            foreach (sbyte[] c in contents)
            {
                SigningServer.Android.Core.System.Arraycopy(c, 0, result, contentsPosInResult, c.Length);
                contentsPosInResult += c.Length;
            }
            return result;
        }
        
        internal class JavaToDerConverter
        {
            internal JavaToDerConverter()
            {
            }
            
            public static sbyte[] ToDer(object source, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type targetType, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type targetElementType)
            {
                SigningServer.Android.Core.Class<object> sourceType = source.GetType();
                if (typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject).Equals(sourceType))
                {
                    SigningServer.Android.IO.ByteBuffer buf = ((SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject)source).GetEncoded();
                    sbyte[] result = new sbyte[buf.Remaining()];
                    buf.Get(result);
                    return result;
                }
                if ((targetType == null) || (targetType == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.ANY))
                {
                    return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.Encode(source);
                }
                switch (targetType)
                {
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.OCTET_STRING:
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.BIT_STRING:
                        sbyte[] value = null;
                        if (source is SigningServer.Android.IO.ByteBuffer)
                        {
                            SigningServer.Android.IO.ByteBuffer buf = (SigningServer.Android.IO.ByteBuffer)source;
                            value = new sbyte[buf.Remaining()];
                            buf.Slice().Get(value);
                        }
                        else if (source is sbyte[])
                        {
                            value = (sbyte[])source;
                        }
                        if (value != null)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, false, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber(targetType), value);
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.INTEGER:
                        if (source is int?)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToInteger((int?)source);
                        }
                        else if (source is long?)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToInteger((long?)source);
                        }
                        else if (source is SigningServer.Android.Math.BigInteger)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToInteger((SigningServer.Android.Math.BigInteger)source);
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.BOOLEAN:
                        if (source is bool?)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToBoolean((bool?)(source));
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.UTC_TIME:
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.GENERALIZED_TIME:
                        if (source is string)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.CreateTag(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_CLASS_UNIVERSAL, false, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber(targetType), ((string)source).GetBytes());
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.OBJECT_IDENTIFIER:
                        if (source is string)
                        {
                            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToOid((string)source);
                        }
                        break;
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE:
                        {
                            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class containerAnnotation = sourceType.GetDeclaredAnnotation(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class));
                            if ((containerAnnotation != null) && (containerAnnotation.Type() == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE))
                            {
                                return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequence(source);
                            }
                            break;
                        }
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE:
                        {
                            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class containerAnnotation = sourceType.GetDeclaredAnnotation(typeof(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class));
                            if ((containerAnnotation != null) && (containerAnnotation.Type() == SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.CHOICE))
                            {
                                return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToChoice(source);
                            }
                            break;
                        }
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SET_OF:
                        return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSetOf((SigningServer.Android.Collections.Collection<object>)source, targetElementType);
                    case SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE_OF:
                        return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1DerEncoder.ToSequenceOf((SigningServer.Android.Collections.Collection<object>)source, targetElementType);
                    default:
                        break;
                }
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1EncodingException("Unsupported conversion: " + sourceType.GetName() + " to ASN.1 " + targetType);
            }
            
        }
        
        /// <summary>
        /// ASN.1 DER-encoded {@code NULL}.
        /// </summary>
        public static readonly SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject ASN1_DER_NULL = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject(new sbyte[]{
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.TAG_NUMBER_NULL, 0}
        );
        
    }
    
}
