// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using System.IO;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber
{
    /// <summary>
    /// {@link BerDataValueReader} which reads from an {@link InputStream} returning BER-encoded data
    /// values. See {@code X.690} for the encoding.
    /// </summary>
    public class InputStreamBerDataValueReader: SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueReader
    {
        internal readonly SigningServer.Android.IO.InputStream mIn;
        
        public InputStreamBerDataValueReader(SigningServer.Android.IO.InputStream input)
        {
            if (input == null)
            {
                throw new System.NullReferenceException("in == null");
            }
            mIn = input;
        }
        
        public SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue ReadDataValue()
        {
            return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.ReadDataValue(mIn);
        }
        
        /// <summary>
        /// Returns the next data value or {@code null} if end of input has been reached.
        /// 
        /// @throws BerDataValueFormatException if the value being read is malformed.
        /// </summary>
        internal static SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue ReadDataValue(SigningServer.Android.IO.InputStream inputStream)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.RecordingInputStream input = new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.RecordingInputStream(inputStream);
            try
            {
                int firstIdentifierByte = input.Read();
                if (firstIdentifierByte == -1)
                {
                    return null;
                }
                int tagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.ReadTagNumber(input, firstIdentifierByte);
                int firstLengthByte = input.Read();
                if (firstLengthByte == -1)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Missing length");
                }
                bool constructed = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.IsConstructed((byte)firstIdentifierByte);
                int contentsLength;
                int contentsOffsetInDataValue;
                if ((firstLengthByte & 0x80) == 0)
                {
                    contentsLength = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.ReadShortFormLength(firstLengthByte);
                    contentsOffsetInDataValue = input.GetReadByteCount();
                    SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.SkipDefiniteLengthContents(input, contentsLength);
                }
                else if ((firstLengthByte & 0xff) != 0x80)
                {
                    contentsLength = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.ReadLongFormLength(input, firstLengthByte);
                    contentsOffsetInDataValue = input.GetReadByteCount();
                    SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.SkipDefiniteLengthContents(input, contentsLength);
                }
                else 
                {
                    contentsOffsetInDataValue = input.GetReadByteCount();
                    contentsLength = constructed ? SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.SkipConstructedIndefiniteLengthContents(input) : SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.SkipPrimitiveIndefiniteLengthContents(input);
                }
                byte[] encoded = input.GetReadBytes();
                SigningServer.Android.IO.ByteBuffer encodedContents = SigningServer.Android.IO.ByteBuffer.Wrap(encoded, contentsOffsetInDataValue, contentsLength);
                return new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue(SigningServer.Android.IO.ByteBuffer.Wrap(encoded), encodedContents, SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagClass((byte)firstIdentifierByte), constructed, tagNumber);
            }
            catch (global::System.IO.IOException e)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Failed to read data value", e);
            }
        }
        
        internal static int ReadTagNumber(SigningServer.Android.IO.InputStream input, int firstIdentifierByte)
        {
            int tagNumber = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerEncoding.GetTagNumber((byte)firstIdentifierByte);
            if (tagNumber == 0x1f)
            {
                return SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.ReadHighTagNumber(input);
            }
            else 
            {
                return tagNumber;
            }
        }
        
        internal static int ReadHighTagNumber(SigningServer.Android.IO.InputStream input)
        {
            int b;
            int result = 0;
            do
            {
                b = input.Read();
                if (b == -1)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Truncated tag number");
                }
                if (result > SigningServer.Android.TypeUtils.UnsignedRightShift(SigningServer.Android.Core.IntExtensions.MAX_VALUE, 7))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Tag number too large");
                }
                result <<= 7;
                result |= b & 0x7f;
            }
            while ((b & 0x80) != 0);
            return result;
        }
        
        internal static int ReadShortFormLength(int firstLengthByte)
        {
            return firstLengthByte & 0x7f;
        }
        
        internal static int ReadLongFormLength(SigningServer.Android.IO.InputStream input, int firstLengthByte)
        {
            int byteCount = firstLengthByte & 0x7f;
            if (byteCount > 4)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Length too large: " + byteCount + " bytes");
            }
            int result = 0;
            for (int i = 0;i < byteCount;i++)
            {
                int b = input.Read();
                if (b == -1)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Truncated length");
                }
                if (result > SigningServer.Android.TypeUtils.UnsignedRightShift(SigningServer.Android.Core.IntExtensions.MAX_VALUE, 8))
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Length too large");
                }
                result <<= 8;
                result |= b & 0xff;
            }
            return result;
        }
        
        internal static void SkipDefiniteLengthContents(SigningServer.Android.IO.InputStream input, int len)
        {
            long bytesRead = 0;
            while (len > 0)
            {
                int skipped = (int)input.Skip(len);
                if (skipped <= 0)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Truncated definite-length contents: " + bytesRead + " bytes read" + ", " + len + " missing");
                }
                len -= skipped;
                bytesRead += skipped;
            }
        }
        
        internal static int SkipPrimitiveIndefiniteLengthContents(SigningServer.Android.IO.InputStream input)
        {
            bool prevZeroByte = false;
            int bytesRead = 0;
            while (true)
            {
                int b = input.Read();
                if (b == -1)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Truncated indefinite-length contents: " + bytesRead + " bytes read");
                }
                bytesRead++;
                if (bytesRead < 0)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Indefinite-length contents too long");
                }
                if (b == 0)
                {
                    if (prevZeroByte)
                    {
                        return bytesRead - 2;
                    }
                    prevZeroByte = true;
                    continue;
                }
                else 
                {
                    prevZeroByte = false;
                }
            }
        }
        
        internal static int SkipConstructedIndefiniteLengthContents(SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.RecordingInputStream input)
        {
            int readByteCountBefore = input.GetReadByteCount();
            while (true)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValue dataValue = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.InputStreamBerDataValueReader.ReadDataValue(input);
                if (dataValue == null)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Truncated indefinite-length contents: " + (input.GetReadByteCount() - readByteCountBefore) + " bytes read");
                }
                if (input.GetReadByteCount() <= 0)
                {
                    throw new SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Ber.BerDataValueFormatException("Indefinite-length contents too long");
                }
                SigningServer.Android.IO.ByteBuffer encoded = dataValue.GetEncoded();
                if ((encoded.Remaining() == 2) && (encoded.Get(0) == 0) && (encoded.Get(1) == 0))
                {
                    return input.GetReadByteCount() - readByteCountBefore - 2;
                }
            }
        }
        
        internal class RecordingInputStream: SigningServer.Android.IO.InputStream
        {
            internal readonly SigningServer.Android.IO.InputStream mIn;
            
            internal readonly SigningServer.Android.IO.ByteArrayOutputStream mBuf;
            
            internal RecordingInputStream(SigningServer.Android.IO.InputStream input)
            {
                mIn = input;
                mBuf = new SigningServer.Android.IO.ByteArrayOutputStream();
            }
            
            public virtual byte[] GetReadBytes()
            {
                return mBuf.ToByteArray();
            }
            
            public virtual int GetReadByteCount()
            {
                return mBuf.Size();
            }
            
            public int Read()
            {
                int b = mIn.Read();
                if (b != -1)
                {
                    mBuf.Write(b);
                }
                return b;
            }
            
            public int Read(byte[] b)
            {
                int len = mIn.Read(b);
                if (len > 0)
                {
                    mBuf.Write(b, 0, len);
                }
                return len;
            }
            
            public int Read(byte[] b, int off, int len)
            {
                len = mIn.Read(b, off, len);
                if (len > 0)
                {
                    mBuf.Write(b, off, len);
                }
                return len;
            }
            
            public long Skip(long n)
            {
                if (n <= 0)
                {
                    return mIn.Skip(n);
                }
                byte[] buf = new byte[4096];
                int len = mIn.Read(buf, 0, (int)SigningServer.Android.Core.Math.Min(buf.Length, n));
                if (len > 0)
                {
                    mBuf.Write(buf, 0, len);
                }
                return (len < 0) ? 0 : len;
            }
            
            public int Available()
            {
                return 0;
            }
            
            public void Dispose()
            {
            }
            
            public void Mark(int readlimit)
            {
            }
            
            public void Reset()
            {
                throw new global::System.IO.IOException("mark/reset not supported");
            }
            
            public bool MarkSupported()
            {
                return false;
            }

            public Stream AsStream()
            {
                throw new global::System.IO.IOException("Conversion to .net stream not possible");
            }
        }
        
    }
    
}
