// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    /// <summary>
    /// Pseudo {@link DataSource} that chains the given {@link DataSource} as a continuous one.
    /// </summary>
    public class ChainedDataSource: SigningServer.Android.Com.Android.Apksig.Util.DataSource
    {
        internal readonly SigningServer.Android.Com.Android.Apksig.Util.DataSource[] mSources;
        
        internal readonly long mTotalSize;
        
        public ChainedDataSource(params SigningServer.Android.Com.Android.Apksig.Util.DataSource[] sources)
        {
            mSources = sources;
            mTotalSize = SigningServer.Android.Collections.Arrays.Stream(sources).MapToLong(( src) => src.Size();
            ).Sum();
        }
        
        public override long Size()
        {
            return mTotalSize;
        }
        
        public override void Feed(long offset, long size, SigningServer.Android.Com.Android.Apksig.Util.DataSink sink)
        {
            if (offset + size > mTotalSize)
            {
                throw new System.IndexOutOfRangeException("Requested more than available");
            }
            foreach (SigningServer.Android.Com.Android.Apksig.Util.DataSource src in mSources)
            {
                if (offset >= src.Size())
                {
                    offset -= src.Size();
                    continue;
                }
                long remaining = src.Size() - offset;
                if (remaining >= size)
                {
                    src.Feed(offset, size, sink);
                    break;
                }
                src.Feed(offset, remaining, sink);
                size -= remaining;
                offset = 0;
            }
        }
        
        public override SigningServer.Android.IO.ByteBuffer GetByteBuffer(long offset, int size)
        {
            if (offset + size > mTotalSize)
            {
                throw new System.IndexOutOfRangeException("Requested more than available");
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, long?> firstSource = LocateDataSource(offset);
            int i = firstSource.GetFirst();
            offset = firstSource.GetSecond();
            if (offset + size <= mSources[i].Size())
            {
                return mSources[i].GetByteBuffer(offset, size);
            }
            SigningServer.Android.IO.ByteBuffer buffer = SigningServer.Android.IO.ByteBuffer.Allocate(size);
            for (;i < mSources.Length && buffer.HasRemaining();i++)
            {
                long sizeToCopy = SigningServer.Android.Core.Math.Min(mSources[i].Size() - offset, buffer.Remaining());
                mSources[i].CopyTo(offset, SigningServer.Android.Core.Math.ToIntExact(sizeToCopy), buffer);
                offset = 0;
            }
            buffer.Rewind();
            return buffer;
        }
        
        public override void CopyTo(long offset, int size, SigningServer.Android.IO.ByteBuffer dest)
        {
            Feed(offset, size, new SigningServer.Android.Com.Android.Apksig.Internal.Util.ByteBufferSink(dest));
        }
        
        public override SigningServer.Android.Com.Android.Apksig.Util.DataSource Slice(long offset, long size)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, long?> firstSource = LocateDataSource(offset);
            int beginIndex = firstSource.GetFirst();
            long beginLocalOffset = firstSource.GetSecond();
            SigningServer.Android.Com.Android.Apksig.Util.DataSource beginSource = mSources[beginIndex];
            if (beginLocalOffset + size <= beginSource.Size())
            {
                return beginSource.Slice(beginLocalOffset, size);
            }
            SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Util.DataSource> sources = new SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Util.DataSource>();
            sources.Add(beginSource.Slice(beginLocalOffset, beginSource.Size() - beginLocalOffset));
            SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, long?> lastSource = LocateDataSource(offset + size - 1);
            int endIndex = lastSource.GetFirst();
            long endLocalOffset = lastSource.GetSecond();
            for (int i = beginIndex + 1;i < endIndex;i++)
            {
                sources.Add(mSources[i]);
            }
            sources.Add(mSources[endIndex].Slice(0, endLocalOffset + 1));
            return new SigningServer.Android.Com.Android.Apksig.Internal.Util.ChainedDataSource(sources.ToArray(new SigningServer.Android.Com.Android.Apksig.Util.DataSource[0]));
        }
        
        /// <summary>
        /// Find the index of DataSource that offset is at.
        /// 
        /// @return Pair of DataSource index and the local offset in the DataSource.
        /// </summary>
        internal SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<int?, long?> LocateDataSource(long offset)
        {
            long localOffset = offset;
            for (int i = 0;i < mSources.Length;i++)
            {
                if (localOffset < mSources[i].Size())
                {
                    return SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair.Of<int, long>(i, localOffset);
                }
                localOffset -= mSources[i].Size();
            }
            throw new System.IndexOutOfRangeException("Access is out of bound, offset: " + offset + ", totalSize: " + mTotalSize);
        }
        
    }
    
}
