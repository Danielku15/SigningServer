// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    /// <summary>
    /// {@link DataSource} backed by a {@link FileChannel} for {@link RandomAccessFile} access.
    /// </summary>
    public class FileChannelDataSource: SigningServer.Android.Com.Android.Apksig.Util.DataSource
    {
        internal static readonly int MAX_READ_CHUNK_SIZE = 1024 * 1024;
        
        internal readonly SigningServer.Android.IO.Channels.FileChannel mChannel;
        
        internal readonly long mOffset;
        
        internal readonly long mSize;
        
        /// <summary>
        /// Constructs a new {@code FileChannelDataSource} based on the data contained in the
        /// whole file. Changes to the contents of the file, including the size of the file,
        /// will be visible in this data source.
        /// </summary>
        public FileChannelDataSource(SigningServer.Android.IO.Channels.FileChannel channel)
        {
            mChannel = channel;
            mOffset = 0;
            mSize = -1;
        }
        
        /// <summary>
        /// Constructs a new {@code FileChannelDataSource} based on the data contained in the
        /// specified region of the provided file. Changes to the contents of the file will be visible in
        /// this data source.
        /// 
        /// @throws IndexOutOfBoundsException if {@code offset} or {@code size} is negative.
        /// </summary>
        public FileChannelDataSource(SigningServer.Android.IO.Channels.FileChannel channel, long offset, long size)
        {
            if (offset < 0)
            {
                throw new System.IndexOutOfRangeException("offset: " + size);
            }
            if (size < 0)
            {
                throw new System.IndexOutOfRangeException("size: " + size);
            }
            mChannel = channel;
            mOffset = offset;
            mSize = size;
        }
        
        public long Size()
        {
            if (mSize == -1)
            {
                try
                {
                    return mChannel.Size();
                }
                catch (global::System.IO.IOException e)
                {
                    return 0;
                }
            }
            else 
            {
                return mSize;
            }
        }
        
        public SigningServer.Android.Com.Android.Apksig.Util.DataSource Slice(long offset, long size)
        {
            long sourceSize = Size();
            SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSource.CheckChunkValid(offset, size, sourceSize);
            if ((offset == 0) && (size == sourceSize))
            {
                return this;
            }
            return new SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSource(mChannel, mOffset + offset, size);
        }
        
        public void Feed(long offset, long size, SigningServer.Android.Com.Android.Apksig.Util.DataSink sink)
        {
            long sourceSize = Size();
            SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSource.CheckChunkValid(offset, size, sourceSize);
            if (size == 0)
            {
                return;
            }
            long chunkOffsetInFile = mOffset + offset;
            long remaining = size;
            SigningServer.Android.IO.ByteBuffer buf = SigningServer.Android.IO.ByteBuffer.AllocateDirect((int)SigningServer.Android.Core.Math.Min(remaining, SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSource.MAX_READ_CHUNK_SIZE));
            while (remaining > 0)
            {
                int chunkSize = (int)SigningServer.Android.Core.Math.Min(remaining, buf.Capacity());
                int chunkRemaining = chunkSize;
                buf.Limit(chunkSize);
                lock(mChannel)
                {
                    mChannel.Position(chunkOffsetInFile);
                    while (chunkRemaining > 0)
                    {
                        int read = mChannel.Read(buf);
                        if (read < 0)
                        {
                            throw new global::System.IO.IOException("Unexpected EOF encountered");
                        }
                        chunkRemaining -= read;
                    }
                }
                buf.Flip();
                sink.Consume(buf);
                buf.Clear();
                chunkOffsetInFile += chunkSize;
                remaining -= chunkSize;
            }
        }
        
        public void CopyTo(long offset, int size, SigningServer.Android.IO.ByteBuffer dest)
        {
            long sourceSize = Size();
            SigningServer.Android.Com.Android.Apksig.Internal.Util.FileChannelDataSource.CheckChunkValid(offset, size, sourceSize);
            if (size == 0)
            {
                return;
            }
            if (size > dest.Remaining())
            {
                throw new SigningServer.Android.IO.BufferOverflowException();
            }
            long offsetInFile = mOffset + offset;
            int remaining = size;
            int prevLimit = dest.Limit();
            try
            {
                dest.Limit(dest.Position() + size);
                while (remaining > 0)
                {
                    int chunkSize;
                    lock(mChannel)
                    {
                        mChannel.Position(offsetInFile);
                        chunkSize = mChannel.Read(dest);
                    }
                    offsetInFile += chunkSize;
                    remaining -= chunkSize;
                }
            }
            finally
            {
                dest.Limit(prevLimit);
            }
        }
        
        public SigningServer.Android.IO.ByteBuffer GetByteBuffer(long offset, int size)
        {
            if (size < 0)
            {
                throw new System.IndexOutOfRangeException("size: " + size);
            }
            SigningServer.Android.IO.ByteBuffer result = SigningServer.Android.IO.ByteBuffer.Allocate(size);
            CopyTo(offset, size, result);
            result.Flip();
            return result;
        }
        
        internal static void CheckChunkValid(long offset, long size, long sourceSize)
        {
            if (offset < 0)
            {
                throw new System.IndexOutOfRangeException("offset: " + offset);
            }
            if (size < 0)
            {
                throw new System.IndexOutOfRangeException("size: " + size);
            }
            if (offset > sourceSize)
            {
                throw new System.IndexOutOfRangeException("offset (" + offset + ") > source size (" + sourceSize + ")");
            }
            long endOffset = offset + size;
            if (endOffset < offset)
            {
                throw new System.IndexOutOfRangeException("offset (" + offset + ") + size (" + size + ") overflow");
            }
            if (endOffset > sourceSize)
            {
                throw new System.IndexOutOfRangeException("offset (" + offset + ") + size (" + size + ") > source size (" + sourceSize + ")");
            }
        }
        
    }
    
}
