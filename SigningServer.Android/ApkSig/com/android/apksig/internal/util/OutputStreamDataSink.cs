// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    /// <summary>
    /// {@link DataSink} which outputs received data into the associated {@link OutputStream}.
    /// </summary>
    public class OutputStreamDataSink: SigningServer.Android.Com.Android.Apksig.Util.DataSink
    {
        internal static readonly int MAX_READ_CHUNK_SIZE = 65536;
        
        internal readonly SigningServer.Android.IO.OutputStream mOut;
        
        /// <summary>
        /// Constructs a new {@code OutputStreamDataSink} which outputs received data into the provided
        /// {@link OutputStream}.
        /// </summary>
        public OutputStreamDataSink(SigningServer.Android.IO.OutputStream output)
        {
            if (output == null)
            {
                throw new System.NullReferenceException("out == null");
            }
            mOut = output;
        }
        
        /// <summary>
        /// Returns {@link OutputStream} into which this data sink outputs received data.
        /// </summary>
        public virtual SigningServer.Android.IO.OutputStream GetOutputStream()
        {
            return mOut;
        }
        
        public void Consume(sbyte[] buf, int offset, int length)
        {
            mOut.Write(buf, offset, length);
        }
        
        public void Consume(SigningServer.Android.IO.ByteBuffer buf)
        {
            if (!buf.HasRemaining())
            {
                return;
            }
            if (buf.HasArray())
            {
                mOut.Write(buf.Array(), buf.ArrayOffset() + buf.Position(), buf.Remaining());
                buf.Position(buf.Limit());
            }
            else 
            {
                sbyte[] tmp = new sbyte[SigningServer.Android.Core.Math.Min(buf.Remaining(), SigningServer.Android.Com.Android.Apksig.Internal.Util.OutputStreamDataSink.MAX_READ_CHUNK_SIZE)];
                while (buf.HasRemaining())
                {
                    int chunkSize = SigningServer.Android.Core.Math.Min(buf.Remaining(), tmp.Length);
                    buf.Get(tmp, 0, chunkSize);
                    mOut.Write(tmp, 0, chunkSize);
                }
            }
        }
        
    }
    
}
