// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Util
{
    /// <summary>
    /// Pair of two elements.
    /// </summary>
    public class Pair<A, B>
    {
        internal readonly A mFirst;
        
        internal readonly B mSecond;
        
        internal Pair(A first, B second)
        {
            mFirst = first;
            mSecond = second;
        }
        
        public static SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<A, B> Of<A, B>(A first, B second)
        {
            return new SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<A, B>(first, second);
        }
        
        public virtual A GetFirst()
        {
            return mFirst;
        }
        
        public virtual B GetSecond()
        {
            return mSecond;
        }
        
        public override int GetHashCode()
        {
            int prime = 31;
            int result = 1;
            result = prime * result + ((mFirst == null) ? 0 : mFirst.GetHashCode());
            result = prime * result + ((mSecond == null) ? 0 : mSecond.GetHashCode());
            return result;
        }
        
        public override bool Equals(object obj)
        {
            if (this == obj)
            {
                return true;
            }
            if (obj == null)
            {
                return false;
            }
            if (GetType() != obj.GetType())
            {
                return false;
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<A,B> other = (SigningServer.Android.Com.Android.Apksig.Internal.Util.Pair<A,B>)obj;
            if (mFirst == null)
            {
                if (other.mFirst != null)
                {
                    return false;
                }
            }
            else if (!mFirst.Equals(other.mFirst))
            {
                return false;
            }
            if (mSecond == null)
            {
                if (other.mSecond != null)
                {
                    return false;
                }
            }
            else if (!mSecond.Equals(other.mSecond))
            {
                return false;
            }
            return true;
        }
        
    }
    
}
