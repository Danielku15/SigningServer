// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using SigningServer.Android.Security.Cert;

namespace SigningServer.Android.Com.Android.Apksig.Internal.X509
{
    /// <summary>
    /// X509 {@code Certificate} as specified in RFC 5280.
    /// </summary>
    [SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Class(Type = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
    public class Certificate
    {
        [SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 0, Type = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public SigningServer.Android.Com.Android.Apksig.Internal.X509.TBSCertificate certificate;
        
        [SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 1, Type = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.SEQUENCE)]
        public SigningServer.Android.Com.Android.Apksig.Internal.Pkcs7.AlgorithmIdentifier signatureAlgorithm;
        
        [SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Field(Index = 2, Type = SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1Type.BIT_STRING)]
        public SigningServer.Android.IO.ByteBuffer signature;
        
        public static SigningServer.Android.Security.Cert.X509Certificate FindCertificate(SigningServer.Android.Collections.Collection<SigningServer.Android.Security.Cert.X509Certificate> certs, SigningServer.Android.Com.Android.Apksig.Internal.Pkcs7.SignerIdentifier id)
        {
            foreach (SigningServer.Android.Security.Cert.X509Certificate cert in certs)
            {
                if (SigningServer.Android.Com.Android.Apksig.Internal.X509.Certificate.IsMatchingCerticicate(cert, id))
                {
                    return cert;
                }
            }
            return null;
        }
        
        internal static bool IsMatchingCerticicate(SigningServer.Android.Security.Cert.X509Certificate cert, SigningServer.Android.Com.Android.Apksig.Internal.Pkcs7.SignerIdentifier id)
        {
            if (id.issuerAndSerialNumber == null)
            {
                return false;
            }
            SigningServer.Android.Com.Android.Apksig.Internal.Pkcs7.IssuerAndSerialNumber issuerAndSerialNumber = id.issuerAndSerialNumber;
            sbyte[] encodedIssuer = SigningServer.Android.Com.Android.Apksig.Internal.Util.ByteBufferUtils.ToByteArray(issuerAndSerialNumber.issuer.GetEncoded());
            X500Principal idIssuer = new X500Principal(encodedIssuer);
            SigningServer.Android.Math.BigInteger idSerialNumber = issuerAndSerialNumber.certificateSerialNumber;
            return idSerialNumber.Equals(cert.GetSerialNumber()) && idIssuer.Equals(cert.GetIssuerX500Principal());
        }
        
        public static SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> ParseCertificates(SigningServer.Android.Collections.List<SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject> encodedCertificates)
        {
            if (encodedCertificates.IsEmpty())
            {
                return SigningServer.Android.Util.Collections.EmptyList<SigningServer.Android.Security.Cert.X509Certificate>();
            }
            SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate> result = new SigningServer.Android.Collections.List<SigningServer.Android.Security.Cert.X509Certificate>(encodedCertificates.Size());
            for (int i = 0;i < encodedCertificates.Size();i++)
            {
                SigningServer.Android.Com.Android.Apksig.Internal.Asn1.Asn1OpaqueObject encodedCertificate = encodedCertificates.Get(i);
                SigningServer.Android.Security.Cert.X509Certificate certificate;
                sbyte[] encodedForm = SigningServer.Android.Com.Android.Apksig.Internal.Util.ByteBufferUtils.ToByteArray(encodedCertificate.GetEncoded());
                try
                {
                    certificate = SigningServer.Android.Com.Android.Apksig.Internal.Util.X509CertificateUtils.GenerateCertificate(encodedForm);
                }
                catch (SigningServer.Android.Security.Cert.CertificateException e)
                {
                    throw new SigningServer.Android.Security.Cert.CertificateException("Failed to parse certificate #" + (i + 1), e);
                }
                certificate = new SigningServer.Android.Com.Android.Apksig.Internal.Util.GuaranteedEncodedFormX509Certificate(certificate, encodedForm);
                result.Add(certificate);
            }
            return result;
        }
        
    }
    
}
