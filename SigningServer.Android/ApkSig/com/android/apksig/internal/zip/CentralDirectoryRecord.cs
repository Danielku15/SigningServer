// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Internal.Zip
{
    /// <summary>
    /// ZIP Central Directory (CD) Record.
    /// </summary>
    public class CentralDirectoryRecord
    {
        /// <summary>
        /// Comparator which compares records by the offset of the corresponding Local File Header in the
        /// archive.
        /// </summary>
        public static readonly System.Collections.Generic.IComparer<SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord> BY_LOCAL_FILE_HEADER_OFFSET_COMPARATOR = new SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.ByLocalFileHeaderOffsetComparator();
        
        internal static readonly int RECORD_SIGNATURE = 0x02014b50;
        
        internal static readonly int HEADER_SIZE_BYTES = 46;
        
        internal static readonly int GP_FLAGS_OFFSET = 8;
        
        internal static readonly int LOCAL_FILE_HEADER_OFFSET_OFFSET = 42;
        
        internal static readonly int NAME_OFFSET = SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.HEADER_SIZE_BYTES;
        
        internal readonly SigningServer.Android.IO.ByteBuffer mData;
        
        internal readonly short mGpFlags;
        
        internal readonly short mCompressionMethod;
        
        internal readonly int mLastModificationTime;
        
        internal readonly int mLastModificationDate;
        
        internal readonly long mCrc32;
        
        internal readonly long mCompressedSize;
        
        internal readonly long mUncompressedSize;
        
        internal readonly long mLocalFileHeaderOffset;
        
        internal readonly string mName;
        
        internal readonly int mNameSizeBytes;
        
        internal CentralDirectoryRecord(SigningServer.Android.IO.ByteBuffer data, short gpFlags, short compressionMethod, int lastModificationTime, int lastModificationDate, long crc32, long compressedSize, long uncompressedSize, long localFileHeaderOffset, string name, int nameSizeBytes)
        {
            mData = data;
            mGpFlags = gpFlags;
            mCompressionMethod = compressionMethod;
            mLastModificationDate = lastModificationDate;
            mLastModificationTime = lastModificationTime;
            mCrc32 = crc32;
            mCompressedSize = compressedSize;
            mUncompressedSize = uncompressedSize;
            mLocalFileHeaderOffset = localFileHeaderOffset;
            mName = name;
            mNameSizeBytes = nameSizeBytes;
        }
        
        public virtual int GetSize()
        {
            return mData.Remaining();
        }
        
        public virtual string GetName()
        {
            return mName;
        }
        
        public virtual int GetNameSizeBytes()
        {
            return mNameSizeBytes;
        }
        
        public virtual short GetGpFlags()
        {
            return mGpFlags;
        }
        
        public virtual short GetCompressionMethod()
        {
            return mCompressionMethod;
        }
        
        public virtual int GetLastModificationTime()
        {
            return mLastModificationTime;
        }
        
        public virtual int GetLastModificationDate()
        {
            return mLastModificationDate;
        }
        
        public virtual long GetCrc32()
        {
            return mCrc32;
        }
        
        public virtual long GetCompressedSize()
        {
            return mCompressedSize;
        }
        
        public virtual long GetUncompressedSize()
        {
            return mUncompressedSize;
        }
        
        public virtual long GetLocalFileHeaderOffset()
        {
            return mLocalFileHeaderOffset;
        }
        
        /// <summary>
        /// Returns the Central Directory Record starting at the current position of the provided buffer
        /// and advances the buffer's position immediately past the end of the record.
        /// </summary>
        public static SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord GetRecord(SigningServer.Android.IO.ByteBuffer buf)
        {
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.AssertByteOrderLittleEndian(buf);
            if (buf.Remaining() < SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.HEADER_SIZE_BYTES)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Zip.ZipFormatException("Input too short. Need at least: " + SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.HEADER_SIZE_BYTES + " bytes, available: " + buf.Remaining() + " bytes", new SigningServer.Android.IO.BufferUnderflowException());
            }
            int originalPosition = buf.Position();
            int recordSignature = buf.GetInt();
            if (recordSignature != SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.RECORD_SIGNATURE)
            {
                throw new SigningServer.Android.Com.Android.Apksig.Zip.ZipFormatException("Not a Central Directory record. Signature: 0x" + SigningServer.Android.Core.LongExtensions.ToHexString(recordSignature & 0xffffffffL));
            }
            buf.Position(originalPosition + SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.GP_FLAGS_OFFSET);
            short gpFlags = buf.GetShort();
            short compressionMethod = buf.GetShort();
            int lastModificationTime = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt16(buf);
            int lastModificationDate = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt16(buf);
            long crc32 = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt32(buf);
            long compressedSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt32(buf);
            long uncompressedSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt32(buf);
            int nameSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt16(buf);
            int extraSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt16(buf);
            int commentSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt16(buf);
            buf.Position(originalPosition + SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.LOCAL_FILE_HEADER_OFFSET_OFFSET);
            long localFileHeaderOffset = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GetUnsignedInt32(buf);
            buf.Position(originalPosition);
            int recordSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.HEADER_SIZE_BYTES + nameSize + extraSize + commentSize;
            if (recordSize > buf.Remaining())
            {
                throw new SigningServer.Android.Com.Android.Apksig.Zip.ZipFormatException("Input too short. Need: " + recordSize + " bytes, available: " + buf.Remaining() + " bytes", new SigningServer.Android.IO.BufferUnderflowException());
            }
            string name = SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.GetName(buf, originalPosition + SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.NAME_OFFSET, nameSize);
            buf.Position(originalPosition);
            int originalLimit = buf.Limit();
            int recordEndInBuf = originalPosition + recordSize;
            SigningServer.Android.IO.ByteBuffer recordBuf;
            try
            {
                buf.Limit(recordEndInBuf);
                recordBuf = buf.Slice();
            }
            finally
            {
                buf.Limit(originalLimit);
            }
            buf.Position(recordEndInBuf);
            return new SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord(recordBuf, gpFlags, compressionMethod, lastModificationTime, lastModificationDate, crc32, compressedSize, uncompressedSize, localFileHeaderOffset, name, nameSize);
        }
        
        public virtual void CopyTo(SigningServer.Android.IO.ByteBuffer output)
        {
            output.Put(mData.Slice());
        }
        
        public virtual SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord CreateWithModifiedLocalFileHeaderOffset(long localFileHeaderOffset)
        {
            SigningServer.Android.IO.ByteBuffer result = SigningServer.Android.IO.ByteBuffer.Allocate(mData.Remaining());
            result.Put(mData.Slice());
            result.Flip();
            result.Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.SetUnsignedInt32(result, SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.LOCAL_FILE_HEADER_OFFSET_OFFSET, localFileHeaderOffset);
            return new SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord(result, mGpFlags, mCompressionMethod, mLastModificationTime, mLastModificationDate, mCrc32, mCompressedSize, mUncompressedSize, localFileHeaderOffset, mName, mNameSizeBytes);
        }
        
        public static SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord CreateWithDeflateCompressedData(string name, int lastModifiedTime, int lastModifiedDate, long crc32, long compressedSize, long uncompressedSize, long localFileHeaderOffset)
        {
            byte[] nameBytes = name.GetBytes(SigningServer.Android.IO.Charset.StandardCharsets.UTF_8);
            short gpFlags = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.GP_FLAG_EFS;
            short compressionMethod = SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.COMPRESSION_METHOD_DEFLATED;
            int recordSize = SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.HEADER_SIZE_BYTES + nameBytes.Length;
            SigningServer.Android.IO.ByteBuffer result = SigningServer.Android.IO.ByteBuffer.Allocate(recordSize);
            result.Order(SigningServer.Android.IO.ByteOrder.LITTLE_ENDIAN);
            result.PutInt(SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord.RECORD_SIGNATURE);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, 0x14);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, 0x14);
            result.PutShort(gpFlags);
            result.PutShort(compressionMethod);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, lastModifiedTime);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, lastModifiedDate);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt32(result, crc32);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt32(result, compressedSize);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt32(result, uncompressedSize);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, nameBytes.Length);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, 0);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, 0);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, 0);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt16(result, 0);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt32(result, 0);
            SigningServer.Android.Com.Android.Apksig.Internal.Zip.ZipUtils.PutUnsignedInt32(result, localFileHeaderOffset);
            result.Put(nameBytes);
            if (result.HasRemaining())
            {
                throw new SigningServer.Android.Core.RuntimeException("pos: " + result.Position() + ", limit: " + result.Limit());
            }
            result.Flip();
            return new SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord(result, gpFlags, compressionMethod, lastModifiedTime, lastModifiedDate, crc32, compressedSize, uncompressedSize, localFileHeaderOffset, name, nameBytes.Length);
        }
        
        public static string GetName(SigningServer.Android.IO.ByteBuffer record, int position, int nameLengthBytes)
        {
            byte[] nameBytes;
            int nameBytesOffset;
            if (record.HasArray())
            {
                nameBytes = record.Array();
                nameBytesOffset = record.ArrayOffset() + position;
            }
            else 
            {
                nameBytes = new byte[nameLengthBytes];
                nameBytesOffset = 0;
                int originalPosition = record.Position();
                try
                {
                    record.Position(position);
                    record.Get(nameBytes);
                }
                finally
                {
                    record.Position(originalPosition);
                }
            }
            return SigningServer.Android.Core.StringExtensions.Create(nameBytes, nameBytesOffset, nameLengthBytes, SigningServer.Android.IO.Charset.StandardCharsets.UTF_8);
        }
        
        internal class ByLocalFileHeaderOffsetComparator: System.Collections.Generic.IComparer<SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord>
        {
            public int Compare(SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord r1, SigningServer.Android.Com.Android.Apksig.Internal.Zip.CentralDirectoryRecord r2)
            {
                long offset1 = r1.GetLocalFileHeaderOffset();
                long offset2 = r2.GetLocalFileHeaderOffset();
                if (offset1 > offset2)
                {
                    return 1;
                }
                else if (offset1 < offset2)
                {
                    return -1;
                }
                else 
                {
                    return 0;
                }
            }
            
        }
        
    }
    
}
