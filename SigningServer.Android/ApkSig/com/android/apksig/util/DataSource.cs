// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;

namespace SigningServer.Android.Com.Android.Apksig.Util
{
    /// <summary>
    /// Abstract representation of a source of data.
    /// 
    /// &lt;p&gt;This abstraction serves three purposes:
    /// &lt;ul&gt;
    /// &lt;li&gt;Transparent handling of different types of sources, such as {@code byte[]},
    ///     {@link java.nio.ByteBuffer}, {@link java.io.RandomAccessFile}, memory-mapped file.&lt;/li&gt;
    /// &lt;li&gt;Support sources larger than 2 GB. If all sources were smaller than 2 GB, {@code ByteBuffer}
    ///     may have worked as the unifying abstraction.&lt;/li&gt;
    /// &lt;li&gt;Support sources which do not fit into logical memory as a contiguous region.&lt;/li&gt;
    /// &lt;/ul&gt;
    /// 
    /// &lt;p&gt;There are following ways to obtain a chunk of data from the data source:
    /// &lt;ul&gt;
    /// &lt;li&gt;Stream the chunk's data into a {@link DataSink} using
    ///     {@link #feed(long, long, DataSink) feed}. This is best suited for scenarios where there is no
    ///     need to have the chunk's data accessible at the same time, for example, when computing the
    ///     digest of the chunk. If you need to keep the chunk's data around after {@code feed}
    ///     completes, you must create a copy during {@code feed}. However, in that case the following
    ///     methods of obtaining the chunk's data may be more appropriate.&lt;/li&gt;
    /// &lt;li&gt;Obtain a {@link ByteBuffer} containing the chunk's data using
    ///     {@link #getByteBuffer(long, int) getByteBuffer}. Depending on the data source, the chunk's
    ///     data may or may not be copied by this operation. This is best suited for scenarios where
    ///     you need to access the chunk's data in arbitrary order, but don't need to modify the data and
    ///     thus don't require a copy of the data.&lt;/li&gt;
    /// &lt;li&gt;Copy the chunk's data to a {@link ByteBuffer} using
    ///     {@link #copyTo(long, int, ByteBuffer) copyTo}. This is best suited for scenarios where
    ///     you require a copy of the chunk's data, such as to when you need to modify the data.
    ///     &lt;/li&gt;
    /// &lt;/ul&gt;
    /// </summary>
    public interface DataSource
    {
        /// <summary>
        /// Returns the amount of data (in bytes) contained in this data source.
        /// </summary>
        public long Size();
        
        /// <summary>
        /// Feeds the specified chunk from this data source into the provided sink.
        /// 
        /// @param offset index (in bytes) at which the chunk starts inside data source
        /// @param size size (in bytes) of the chunk
        /// @throws IndexOutOfBoundsException if {@code offset} or {@code size} is negative, or if
        ///         {@code offset + size} is greater than {@link #size()}.
        /// </summary>
        public void Feed(long offset, long size, SigningServer.Android.Com.Android.Apksig.Util.DataSink sink);
        
        /// <summary>
        /// Returns a buffer holding the contents of the specified chunk of data from this data source.
        /// Changes to the data source are not guaranteed to be reflected in the returned buffer.
        /// Similarly, changes in the buffer are not guaranteed to be reflected in the data source.
        /// 
        /// &lt;p&gt;The returned buffer's position is {@code 0}, and the buffer's limit and capacity is
        /// {@code size}.
        /// 
        /// @param offset index (in bytes) at which the chunk starts inside data source
        /// @param size size (in bytes) of the chunk
        /// @throws IndexOutOfBoundsException if {@code offset} or {@code size} is negative, or if
        ///         {@code offset + size} is greater than {@link #size()}.
        /// </summary>
        public SigningServer.Android.IO.ByteBuffer GetByteBuffer(long offset, int size);
        
        /// <summary>
        /// Copies the specified chunk from this data source into the provided destination buffer,
        /// advancing the destination buffer's position by {@code size}.
        /// 
        /// @param offset index (in bytes) at which the chunk starts inside data source
        /// @param size size (in bytes) of the chunk
        /// @throws IndexOutOfBoundsException if {@code offset} or {@code size} is negative, or if
        ///         {@code offset + size} is greater than {@link #size()}.
        /// </summary>
        public void CopyTo(long offset, int size, SigningServer.Android.IO.ByteBuffer dest);
        
        /// <summary>
        /// Returns a data source representing the specified region of data of this data source. Changes
        /// to data represented by this data source will also be visible in the returned data source.
        /// 
        /// @param offset index (in bytes) at which the region starts inside data source
        /// @param size size (in bytes) of the region
        /// @throws IndexOutOfBoundsException if {@code offset} or {@code size} is negative, or if
        ///         {@code offset + size} is greater than {@link #size()}.
        /// </summary>
        public SigningServer.Android.Com.Android.Apksig.Util.DataSource Slice(long offset, long size);
        
    }
    
}
